<?xml version="1.0" encoding="UTF-8"?>
<!--For PDF version (standard)-->
<!-- <?xml-stylesheet href="docbook/xsl/fo/docbook.xsl" type="text/xsl" ?>-->
<!--For PDF version-->
<!-- <?xml-stylesheet href="ONVIF-stylesheets/onvif-specification-fo-us.xsl" type="text/xsl" ?>-->
<!--For online version-->
<?xml-stylesheet href="docbook-css/docbook.xsl" type="text/xsl" ?>
<!--For PDF version - New ONVIF-->
<!--<?xml-stylesheet href="../ONVIFNew-stylesheets/onvif-specification-fo-us.xsl" type="text/xsl" ?>-->
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xml="http://www.w3.org/XML/1998/namespace" xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd" version="0.1" xml:id="ONVIF_Security_Configuration_Device_TS">
  <info>
    <orgname>
      <phrase>
        <trademark class="registered">ONVIF</trademark>
      </phrase>
    </orgname>
    <title>Security Configuration Device Test Specification</title>
    <subtitle>Version 20.12</subtitle>
    <date>December 2020</date>
    <copyright>
      <year>2020</year>
      <holder>ONVIF, Inc. All rights reserved.</holder>
    </copyright>
    <address>
      <uri>www.onvif.org</uri>
    </address>
    <legalnotice role="notices">
      <para>
        Recipients of this document may copy, distribute, publish, or display this
        document so long as this copyright notice, license and disclaimer are retained with
        all copies of the document. No license is granted to modify this document.
      </para>
      <para>
        THIS DOCUMENT IS PROVIDED "AS IS," AND THE CORPORATION AND ITS MEMBERS AND THEIR
        AFFILIATES, MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
        NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
        NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THIS DOCUMENT ARE SUITABLE FOR ANY
        PURPOSE; OR THAT THE IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY PATENTS,
        COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
      </para>
      <para>
        IN NO EVENT WILL THE CORPORATION OR ITS MEMBERS OR THEIR AFFILIATES BE LIABLE FOR
        ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, PUNITIVE OR CONSEQUENTIAL DAMAGES,
        ARISING OUT OF OR RELATING TO ANY USE OR DISTRIBUTION OF THIS DOCUMENT, WHETHER OR
        NOT (1) THE CORPORATION, MEMBERS OR THEIR AFFILIATES HAVE BEEN ADVISED OF THE
        POSSIBILITY OF SUCH DAMAGES, OR (2) SUCH DAMAGES WERE REASONABLY FORESEEABLE, AND
        ARISING OUT OF OR RELATING TO ANY USE OR DISTRIBUTION OF THIS DOCUMENT. THE
        FOREGOING DISCLAIMER AND LIMITATION ON LIABILITY DO NOT APPLY TO, INVALIDATE, OR
        LIMIT REPRESENTATIONS AND WARRANTIES MADE BY THE MEMBERS AND THEIR RESPECTIVE
        AFFILIATES TO THE CORPORATION AND OTHER MEMBERS IN CERTAIN WRITTEN POLICIES OF THE
        CORPORATION.
      </para>
    </legalnotice>
    <revhistory>
      <revision>
        <revnumber>0.6</revnumber>
        <date>Feb 26, 2013</date>
        <revdescription>
          <para>
            Initial version
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>0.7</revnumber>
        <date>Apr 16, 2013</date>
        <revdescription>
          <para>
            Adapted document to Advanced Security Service Specification v1.0_RC1
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>0.7.1</revnumber>
        <date>May 8, 2013</date>
        <revdescription>
          <para>
            Added key store tests
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>0.8</revnumber>
        <date>May 11, 2013</date>
        <revdescription>
          <para>
            First draft for WG review
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>0.81</revnumber>
        <date>Jun 11, 2013</date>
        <revdescription>
          <para>
            Minor changes after Singapore F2F
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>0.82</revnumber>
        <date>Jun 13, 2013</date>
        <revdescription>
          <para>
            Partial fix for ticket #1079
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>0.9</revnumber>
        <date>Jun 14, 2013</date>
        <revdescription>
          <para>
            Added appendices A.8 to A.11 and modified Sect. 5.3.14.
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>13.06</revnumber>
        <date>Dec, 2013</date>
        <revdescription>
          <para>
            First issue of Advanced Security Test Specification
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>14.06</revnumber>
        <date>Jun, 2014</date>
        <revdescription>
          <para>
            New tests were added:
          </para>
          <para>
            Create PKCS#10 – negative test,
          </para>
          <para>
            Delete Certificate – CA – Preserve Public Key,
          </para>
          <para>
            Upload certificate – delete linked key (negative test),
          </para>
          <para>
            Upload certificate – Upload malformed certificate (negative test),
          </para>
          <para>
            Upload certificate – Upload expired certificate,
          </para>
          <para>
            TLS Server Certificate - self-signed,
          </para>
          <para>
            TLS Server Certificate – CA.
          </para>
          <para>
            Annex A.21, A.22 were added.
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>14.12</revnumber>
        <date>Dec, 2014</date>
        <revdescription>
          <para>
            The following test cases were added:
          </para>
          <para>
            Create PKCS#10 – Subject Test,
          </para>
          <para>
            Create self-signed certificate – Subject Test,
          </para>
          <para>
            Upload Passphrase, Delete Passphrase,
          </para>
          <para>
            Upload PKCS8 – no key pair exists,
          </para>
          <para>
            Upload PKCS8 – decryption fails,
          </para>
          <para>
            Upload PKCS8 – key pair without private key exists,
          </para>
          <para>
            Upload PKCS12 – no key pair exists,
          </para>
          <para>
            Upload PKCS12 – decryption fails,
          </para>
          <para>
            Upload PKCS12 – key pair without private key exists.
          </para>
          <para>
            The following test cases were modified with ID change:
          </para>
          <para>
            Basic TLS Handshake,
          </para>
          <para>
            Basic TLS Handshake after Replace Server Certificate Assignment.
          </para>
          <para>
            The following annexes were added:
          </para>
          <para>
            A.23, A.24, A.25, A.26, A.27, A.28, A.29, A.30, A.31, A.32, A.33, A.34, A.35.
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>15.06</revnumber>
        <date>Jun, 2015</date>
        <revdescription>
          <para>
            The following test cases were added:
          </para>
          <para>
            ADVANCED_SECURITY-3-2-5 Basic TLS Handshake with Replace Server Certification Path and PKCS#12
          </para>
          <para>
            ADVANCED_SECURITY-6-3-4 Upload PKCS12 - verify key and certificate
          </para>
          <para>
            ADVANCED_SECURITY-2-1-27 CreateSelfSignedCertificate with PKCS#12
          </para>
          <para>
            ADVANCED_SECURITY-2-1-28 Create PKCS#10 request with PKCS#12
          </para>
          <para>
            ADVANCED_SECURITY-8-1-1 Upload CRL
          </para>
          <para>
            ADVANCED_SECURITY-8-1-2 Delete CRL
          </para>
          <para>
            ADVANCED_SECURITY-8-1-3 Get CRL
          </para>
          <para>
            ADVANCED_SECURITY-8-1-4 Create certification path validation policy
          </para>
          <para>
            ADVANCED_SECURITY-8-1-5 Get certification path validation policy
          </para>
          <para>
            ADVANCED_SECURITY-8-1-6 Delete certification path validation policy
          </para>
          <para>
            ADVANCED_SECURITY-3-3-1 TLS client authentication – self-signed TLS server certificate with on-device RSA key pair
          </para>
          <para>
            ADVANCED_SECURITY-3-3-2 CRL processing with on-device RSA key pair
          </para>
          <para>
            ADVANCED_SECURITY-3-3-3 Replace certification path validation policy assignment
          </para>

          <para>
            The following test cases were modified:
          </para>
          <para>
            ADVANCED_SECURITY-1-1-3 Check private Key status for an RSA private key
          </para>
          <para>
            ADVANCED_SECURITY-2-1-1 Create PKCS#10 certification requests
          </para>
          <para>
            ADVANCED_SECURITY-2-1-2 Create self-signed certificate
          </para>
          <para>
            ADVANCED_SECURITY-2-1-3 Upload certificate – Keystore contains private key
          </para>
          <para>
            ADVANCED_SECURITY-2-1-6 Get certificate – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-2-1-8 Get all certificates – self signed
          </para>
          <para>
            ADVANCED_SECURITY-2-1-10 Delete Certificate – self signed
          </para>
          <para>
            ADVANCED_SECURITY-2-1-12 Create Certification Path – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-2-1-13 Create Certification Path – CA
          </para>
          <para>
            ADVANCED_SECURITY-2-1-14 Get Certification Path – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-2-1-15 Get Certification Path – CA
          </para>
          <para>
            ADVANCED_SECURITY-2-1-16 Get All Certification Paths – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-2-1-17 Get All Certification Paths – CA
          </para>
          <para>
            ADVANCED_SECURITY-2-1-18 Delete Certification Path – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-2-1-19 Delete Certification Path - CA
          </para>
          <para>
            ADVANCED_SECURITY-2-1-20 Create PKCS#10 (negative test)
          </para>
          <para>
            ADVANCED_SECURITY-2-1-22 Upload certificate – delete linked key (negative test)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-1 Add Server Certificate Assignment – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-3-1-2 Add Server Certificate Assignment – CA
          </para>
          <para>
            ADVANCED_SECURITY-3-1-3 Replace Server Certificate Assignment – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-3-1-4 Replace Server Certificate Assignment – CA
          </para>
          <para>
            ADVANCED_SECURITY-3-1-5 Get Assigned Server Certificates – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-3-1-6 Get Assigned Server Certificates – CA
          </para>
          <para>
            ADVANCED_SECURITY-3-1-7 Remove Server Certificate Assignment – self-signed
          </para>
          <para>
            ADVANCED_SECURITY-3-1-8 Remove Server Certificate Assignment – CA
          </para>
          <para>
            ADVANCED_SECURITY-3-2-3 Basic TLS Handshake
          </para>
          <para>
            ADVANCED_SECURITY-3-2-4 Basic TLS Handshake after Replace Server Certificate Assignment
          </para>
          <para>
            ADVANCED_SECURITY-4-1-1 TLS Server Certificate - self-signed
          </para>
          <para>
            ADVANCED_SECURITY-4-1-2 TLS Server Certificate – CA
          </para>
          <para>
            ADVANCED_SECURITY-5-1-1 Advanced Security Service Capabilities
          </para>
          <para>
            ADVANCED_SECURITY-5-1-2 Get Services and Get Advanced Security Service Capabilities Consistency
          </para>

          <para>
            The following annexes were added:
          </para>
          <para>
            A.36, A.37, A.38, A.39, A.40, A.41, A.42, A.43, A.44, A.45, A.46
          </para>

          <para>
            The following annexes were modified:
          </para>
          <para>
            A.4, A.8, A.11, A.13, A.14, A.16, A.18, A.30, A.35
          </para>

        </revdescription>
      </revision>
      <revision>
        <revnumber>16.06</revnumber>
        <date>Mar 2016</date>
        <revdescription>
          <para>
            The ADVANCED_SECURITY-3-2-4 has been updated.
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>17.06</revnumber>
        <date>Jun 22, 2017</date>
        <revdescription>
          <para>
            The document formating were updated.
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>Mar 14, 2018</date>
        <revdescription>
          <para>
            timeout1 variable was replaced by operationDelay variable.
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>Mar 15, 2018</date>
        <revdescription>
          <para>
            The following were updated according to #1562:
          </para>
          <para>
            Annex A.47 Remove Server Certificate Assignment (added)
          </para>
          <para>
            Annex A.48 Restore Server Certificate Assignment (added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-1 Add Server Certificate Assignment – self-signed (steps 3 and 8 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-2 Add Server Certificate Assignment – CA (steps 3 and 8 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-3 Replace Server Certificate Assignment – self-signed (steps 3 and 18 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-4 Replace Server Certificate Assignment – CA (steps 3 and 25 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-5 Get Assigned Server Certificates – self-signed (steps 3 and 12 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-6 Get Assigned Server Certificates – CA (steps 3 and 14 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-7 Remove Server Certificate Assignment – self-signed (steps 3 and 17 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-8 Remove Server Certificate Assignment – CA (steps 3 and 18 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-2-3 Basic TLS Handshake (steps 3 and 23 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-2-4 Basic TLS Handshake after Replace Server Certificate Assignment (steps 3 and 39 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-2-5 Basic TLS Handshake with Replace Server Certification Path and PKCS#12 (steps 3 and 40 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-3-1 TLS client authentication – self-signed TLS server certificate with on-device RSA key pair (steps 3 and 38 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-3-2 CRL processing with on-device RSA key pair (steps 3 and 40 were added)
          </para>
          <para>
            ADVANCED_SECURITY-4-1-1 TLS Server Certificate - self-signed (steps 3 and 22 were added)
          </para>
          <para>
            ADVANCED_SECURITY-4-1-2 TLS Server Certificate – CA (steps 3 and 35 were added)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>Mar 15, 2018</date>
        <revdescription>
          <para>
            The following were updated according to #1586:
          </para>
          <para>
            ADVANCED_SECURITY-1-1-1 Create RSA Key Pair, status through polling (steps 4.3, 4.3.1, 4.4 were updated)
          </para>
          <para>
            ADVANCED_SECURITY-1-1-2 Create RSA Key Pair, status through event (steps 6.3, 6.4 were updated)
          </para>
          <para>
            Annex A.7 Create an RSA key pair (steps 4, 4.1, 5 were updated)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>Apr 17, 2018</date>
        <revdescription>
          <para>
            The following were updated according to #1615:
          </para>
          <para>
            Annex A.4 Provide CA certificate (step 1 added, step 3 updated)
          </para>
          <para>
            Annex A.22 Provide expired CA certificate (step 1 added, step 4 updated)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>Apr 23, 2018</date>
        <revdescription>
          <para>
            The following were updated according to #1594:
          </para>
          <para>
            ADVANCED_SECURITY-5-1-1 Advanced Security Service Capabilities (step 13.1 were updated)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>May 03, 2018</date>
        <revdescription>
          <para>
            The following were updated according to #1593:
          </para>
          <para>
            ADVANCED_SECURITY-3-1-1 Add Server Certificate Assignment – self-signed (step 7 was added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-2 Add Server Certificate Assignment – CA (step 7 was added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-3 Replace Server Certificate Assignment – self-signed (steps 7, 14 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-4 Replace Server Certificate Assignment – CA (steps 11, 21 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-6 Get Assigned Server Certificates – CA (step 9 was added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-7 Remove Server Certificate Assignment – self-signed (step 13 was added)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-8 Remove Server Certificate Assignment – CA (steps 9, 16 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-2-3 Basic TLS Handshake (step 12 was added)
          </para>
          <para>
            ADVANCED_SECURITY-3-2-4 Basic TLS Handshake after Replace Server Certificate Assignment (steps 12, 25 were added)
          </para>
          <para>
            ADVANCED_SECURITY-3-2-5 Basic TLS Handshake with Replace Server Certification Path and PKCS#12 (steps 13, 27, 37 were added)
          </para>
          <para>
            ADVANCED_SECURITY-4-1-1 TLS Server Certificate - self-signed (step 13 was added)
          </para>
          <para>
            ADVANCED_SECURITY-4-1-2 TLS Server Certificate – CA (steps 7, 20 were added)
          </para>
          <para>
            Annex A.12 Remove server certificate assignment with corresponding certification path, certificate and RSA key pair  (step 3 was added)
          </para>
          <para>
            Annex A.13 Add server certificate assignment with corresponding certification path, self-signed certificate and RSA key pair (step 4 was added)
          </para>
          <para>
            Annex A.20 Remove server certificate assignment with corresponding certification path, certificates and RSA key pairs (step 3 was added)
          </para>
          <para>
            Annex A.47 Remove Server Certificate Assignment (step 8.4 was added)
          </para>
          <para>
            Annex A.48 Restore Server Certificate Assignment (step 1.3 was added)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>May 07, 2018</date>
        <revdescription>
          <para>
            The following were updated according to #1632:
          </para>
          <para>
            ADVANCED_SECURITY-2-1-20 CreatePKCS10CSR – negative test (step 11 was updated)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>May 16, 2018</date>
        <revdescription>
          <para>
            The following were updated according to #1619:
          </para>
          <para>
            Annex A.45 Provide CRL for specified certificate (step 1 was changed)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>Jun 21, 2018</date>
        <revdescription>
          <para>Reformatting document using new template</para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.12</revnumber>
        <date>Oct 1, 2018</date>
        <revdescription>
          <para>
            The following were updated in the scope of #1599:
          </para>
          <para>
            ADVANCED_SECURITY-2-1-27 CreateSelfSignedCertificate with PKCS#12 (Pre-Requisite updated with new item)
          </para>
          <para>
            ADVANCED_SECURITY-2-1-28 Create PKCS#10 request with PKCS#12 (Pre-Requisite updated with new item)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-3 Replace Server Certificate Assignment - Self-Signed (test procedure updates to create new RSA key pair for second certificate)
          </para>
          <para>
            ADVANCED_SECURITY-3-1-4 Replace Server Certificate Assignment - CA (test procedure updates to create new RSA key pair for second CA-signed certificate)
          </para>
          <para>
            ADVANCED_SECURITY-3-2-4 Basic TLS Handshake after Replace Server Certificate Assignment (test procedure updates to create new RSA key pair for second certificate)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.12</revnumber>
        <date>Nov 12, 2018</date>
        <revdescription>
          <para>
            The following were updated in the scope of #1653:
          </para>
          <para>
            Title was updated (Advanced Security Test Specification replaced with Security Configuration Device Test Specification)
          </para>
          <para>
            Introduction section was updated (ONVIF Advanced Security Test Specification was replaces with ONVIF Security Configuration Device Test Specification)
          </para>
          <para>
            Scope section was updated (ONVIF Advanced Security Test Specification was replaces with ONVIF Security Configuration Device Test Specification, ONVIF Advanced Security Service replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Normative references was updated ([ONVIF Advanced Security Service] ONVIF Advanced Security Specifications: replaced with [ONVIF Security Configuration Service] ONVIF Security Configuration Specifications:)
          </para>
          <para>
            Definition was updated (ONVIF Advanced Security Service replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Test Overview\Test Policy\Keystore was updated (Advanced Security Service was replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Test Overview\Test Policy\Certificate Management was updated (Advanced Security Service was replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Test Overview\Test Policy\TLS Server was updated (Advanced Security Service was replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Test Overview\Test Policy\Referential Integrity was updated (Advanced Security Service was replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Test Overview\Test Policy\Capabilities was updated (Advanced Security Service was replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Test Overview\Test Policy\Off-Device Key Generation Operations was updated (Advanced Security Service was replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Test Overview\Test Policy\Certificate-based Client Authentication was updated (Advanced Security Service was replaced with ONVIF Security Configuration Service)
          </para>
          <para>
            Advanced Security Test Cases chapter title was updated with Security Configuration Test Cases
          </para>
          <para>
            For all test cases Pre-Requisites were updated ("Advanced Security Service is received from the DUT." was replaced with "Security Configuration Service is received from the DUT.")
          </para>
          <para>
            For all test cases WSDL References were updated ("advancedsecurity.wsdl" was replaced with "security.wsdl")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Keystore – Key Management" was replaced with "Key Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Key Management" was replaced with "Key Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Keystore - Certificate Management" was replaced with "Certificate Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Certificate Management" was replaced with "Certificate Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, TLS Server" was replaced with "TLS Server (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Capabilities" was replaced with "Capabilities (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Passphrase Management" was replaced with "Passphrase Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Upload Certificate Revocation List" was replaced with "CRL Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Delete Certificate Revocation List" was replaced with "CRL Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, 7.6.2	Get Certificate Revocation List" was replaced with "CRL Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Create Certification Path Validation Policy" was replaced with "Certification Path Validation Policy Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Get Certification Path Validation Policy" was replaced with "Certification Path Validation Policy Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Delete Certification Path Validation Policy" was replaced with "Certification Path Validation Policy Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            For all test cases Specification Coverage were updated ("Advanced Security, Replace Certification Path Validation Policy" was replaced with "Certification Path Validation Policy Management (ONVIF Security Configuration Service Specification)")
          </para>
          <para>
            Test ADVANCED_SECURITY-5-1-1 was renamed ("Advanced Security Service Capabilities" was replaced with "Security Configuration Service Capabilities")
          </para>
          <para>
            For test ADVANCED_SECURITY-5-1-1 test purpose was updated ("To verify DUT Advanced Security Service Capabilities." was replaced with "To verify DUT Security Configuration Service Capabilities.")
          </para>
          <para>
            Test ADVANCED_SECURITY-5-1-2 was renamed ("Get Services and Get Advanced Security Service Capabilities Consistency" was replaced with "Get Services and Get Security Configuration Service Capabilities Consistency")
          </para>
          <para>
            For test ADVANCED_SECURITY-5-1-2 test purpose was updated ("To verify Get Services and Advanced Security Service Capabilities consistency." was replaced with "To verify Get Services and Security Configuration Service Capabilities consistency.")
          </para>
          <para>
            Feature under test field for tests ADVANCED_SECURITY-5-1-1 and ADVANCED_SECURITY-5-1-2 were updated ("GetServiceCapabilities (for Advanced Security Service)" was replaced with "GetServiceCapabilities (for Security Configuration Service)")
          </para>
          <para>
            Other minor changes in description related to renaming of Advanced Security Service to Security Configuration Service.
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.12</revnumber>
        <date>Dec 21, 2018</date>
        <revdescription>
          <para>Switching Hub description in 'Network Configuration for DUT' section was updated according to #1737</para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.06</revnumber>
        <date>May 06, 2019</date>
        <revdescription>
          <para>The following were updated in the scope of #1799:</para>
          <para>
            Security Configuration Test Cases\TLS Versions (added)
          </para>
          <para>
            ADVANCED_SECURITY-9-1-1 TLS Version Management (added)
          </para>
          <para>
            ADVANCED_SECURITY-9-1-2  Disable TLS Version (added)
          </para>
          <para>
            Annex A.49 Configuring HTTPS if Required (added)
          </para>
          <para>
            Annex A.50 Configuring HTTPS using Security Configuration Service (added)
          </para>
          <para>
            Annex A.51 Add server certificate assignment with corresponding certification path, CA certificate and RSA key pair (added)
          </para>
          <para>
            Annex A.52 Basic TLS Handshake With Protocol Version Alert (added)
          </para>
          <para>
            Scope\TLS Versions (added)
          </para>
          <para>
            Test Policy\TLS Versions (added)
          </para>
        </revdescription>
      </revision>
       <revision>
        <revnumber>20.06</revnumber>
        <date>May 13, 2020</date>
        <revdescription>
          <para>Pre-Requisite of the following test cases updated with adding of Pull-Point Notification feature according to #1999:</para>
        <para>ADVANCED_SECURITY-1-1-2	Create RSA Key Pair, status through event</para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>20.12</revnumber>
        <date>Dec 08, 2020</date>
        <revdescription>
          <para>Pre-Requisites of the following test cases were updated with adding of Network Configuration feature according to #2094</para>
        <para>ADVANCED_SECURITY-3-1-1 Add Server Certificate Assignment – self-signed</para>
<para>ADVANCED_SECURITY-3-1-2 Add Server Certificate Assignment – CA</para>
<para>ADVANCED_SECURITY-3-1-3 Replace Server Certificate Assignment – self-signed</para>
<para>ADVANCED_SECURITY-3-1-4 Replace Server Certificate Assignment – CA</para>
<para>ADVANCED_SECURITY-3-1-5 Get Assigned Server Certificates – self-signed</para>
<para>ADVANCED_SECURITY-3-1-6 Get Assigned Server Certificates – CA</para>
<para>ADVANCED_SECURITY-3-1-7 Remove Server Certificate Assignment – self-signed</para>
<para>ADVANCED_SECURITY-3-1-8 Remove Server Certificate Assignment – CA</para>
<para>ADVANCED_SECURITY-3-2-3 Basic TLS Handshake</para>
<para>ADVANCED_SECURITY-3-2-4 Basic TLS Handshake after Replace Server Certificate Assignment</para>
<para>ADVANCED_SECURITY-3-2-5 Basic TLS Handshake with Replace Server Certification Path and PKCS#12</para>
<para>ADVANCED_SECURITY-3-3-1 TLS client authentication – self-signed TLS server certificate with on-device RSA key pair</para>
<para>ADVANCED_SECURITY-3-3-2 CRL processing with on-device RSA key pair</para>
<para>ADVANCED_SECURITY-4-1-1 TLS Server Certificate - self-signed</para>
<para>ADVANCED_SECURITY-4-1-2 TLS Server Certificate – CA</para>
<para>ADVANCED_SECURITY-9-1-2 Disable TLS Version</para>
        </revdescription>
      </revision>
    </revhistory>
  </info>
  <chapter xml:id="s.intro">
    <title>Introduction</title>
    <para>
      The goal of the ONVIF test specification set is to make it possible to realize fully interoperable IP physical security implementation from different vendors. The set of ONVIF test specification describes the test cases need to verify the [ONVIF Core Specs] and [ONVIF Conformance] requirements. In addition, the test cases are to be basic inputs for some Profile specification requirements. It also describes the test framework, test setup, pre-requisites, test policies needed for the execution of the described test cases.
    </para>
    <para>
      This ONVIF Security Configuration Device Test Specification acts as a supplementary document to the [ONVIF Network Interface Specs], illustrating test cases need to be executed and passed. In addition, this specification acts as an input document to the development of test tool that will be used to test the ONVIF device implementation conformance towards ONVIF standard. This test tool is referred as ONVIF Client hereafter.
    </para>
    <section xml:id="s.intro.scope">
      <title>Scope</title>
      <para>
        This ONVIF Security Configuration Device Test Specification defines and regulates the conformance testing procedure for the ONVIF conformant devices. Conformance testing is meant to be functional black-box testing. The objective of this specification is to provide test cases to test individual requirements of ONVIF devices according to the ONVIF Security Configuration Service, which is defined in [ONVIF Security Configuration Service].
      </para>
      <para>
        The principal intended purposes are:<itemizedlist>
          <listitem>
            <para>Provide self-assessment tool for implementations.</para>
          </listitem>
          <listitem>
            <para>
              Provide comprehensive test suite coverage for [ONVIF Network Interface Specs].
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        This specification does not address the following:
        <itemizedlist>
          <listitem>
            <para>
              Product use cases and non-functional (performance and regression) testing.
            </para>
          </listitem>
          <listitem>
            <para>
              SOAP Implementation Interoperability test i.e. Web Service Interoperability Basic Profile version 2.0 (WS-I BP 2.0).
            </para>
          </listitem>
          <listitem>
            <para>
              Full coverage of network protocol implementation test for HTTP, HTTPS, RTP, RTSP, and TLS protocols.
            </para>
          </listitem>

        </itemizedlist>
      </para>
      <para>
        The set of ONVIF Test Specification will not cover the complete set of requirements as defined in [ONVIF Network Interface Specs]; instead, it will cover its subset.
      </para>
      <para>
        This ONVIF Security Configuration Device Test Specification covers the ONVIF Security Configuration Service, which is a functional block of [ONVIF Network Interface Specs]. The following section gives a brief overview of each functional block and its scope.
      </para>

      <section xml:id="s.intro.scope.keystore">
        <title>Keystore</title>
        <para>
          The Keystore section covers the test cases needed for storage and management of keys on an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>Create RSA Key Pair</para>
            </listitem>
            <listitem>
              <para>
                Get Key Status
              </para>
            </listitem>
            <listitem>
              <para>
                Get Private Key Status
              </para>
            </listitem>
            <listitem>
              <para>
                Get All Keys
              </para>
            </listitem>
            <listitem>
              <para>
                Delete Key
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.sert_mng">
        <title>Certificate Management</title>
        <para>
          The Certificate Management section covers the test cases needed for storage and management of certificates on an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>Create PKCS#10 Certification Request</para>
            </listitem>
            <listitem>
              <para>
                Create Self-Signed Certificate
              </para>
            </listitem>
            <listitem>
              <para>
                Upload Certificate
              </para>
            </listitem>
            <listitem>
              <para>
                Get Certificate
              </para>
            </listitem>
            <listitem>
              <para>
                Get All Certificates
              </para>
            </listitem>
            <listitem>
              <para>Delete Certificate</para>
            </listitem>
            <listitem>
              <para>
                Create Certification Path
              </para>
            </listitem>
            <listitem>
              <para>
                Get Certification Path
              </para>
            </listitem>
            <listitem>
              <para>
                Get All Certification Paths
              </para>
            </listitem>
            <listitem>
              <para>
                Delete Certification Path
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.tsl_serv">
        <title>TLS Server</title>
        <para>
          The TLS Server section covers the test cases needed for configuring the TLS server on an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>Add Server Certificate Assignment</para>
            </listitem>
            <listitem>
              <para>
                Remove Server Certificate Assignment
              </para>
            </listitem>
            <listitem>
              <para>
                Replace Server Certificate Assignment
              </para>
            </listitem>
            <listitem>
              <para>
                Get Assigned Server Certificates
              </para>
            </listitem>
            <listitem>
              <para>
                Basic TLS Handshake
              </para>
            </listitem>
            <listitem>
              <para>TLS client authentication</para>
            </listitem>
            <listitem>
              <para>
                Add certification path validation policies assignment
              </para>
            </listitem>
            <listitem>
              <para>
                Delete certification path validation policies assignment
              </para>
            </listitem>
            <listitem>
              <para>
                Replace certification path validation policy assignment
              </para>
            </listitem>
            <listitem>
              <para>
                Get certification path validation policies assignment
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.ref_int">
        <title>Referential integrity</title>
        <para>
          The Referential integrity section covers the test cases needed for referential integrity checks on an ONVIF device.
        </para>

      </section>

      <section xml:id="s.intro.scope.capabilities">
        <title>Capabilities</title>
        <para>
          The Capabilities section covers the test cases needed for getting capabilities from an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>Getting capabilities with GetServiceCapabilities command</para>
            </listitem>
            <listitem>
              <para>
                Getting capabilities with GetServices command
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.offdev_key_gen_op">
        <title>Off-Device Key Generation Operations</title>
        <para>
          The Off-Device Key Generation Operations section covers the test cases needed for uploading keys to an ONVIF device, potentially along with a certificate for the key, based on the PKCS#8 [RFC 5958] and PKCS#12 [PKCS#12] data structures.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>Upload Passphrase</para>
            </listitem>
            <listitem>
              <para>
                Delete Passphrase
              </para>
            </listitem>
            <listitem>
              <para>
                Upload key pair in PKCS#8 data structure
              </para>
            </listitem>
            <listitem>
              <para>
                Upload certificate with private key in PKCS#12 data structure
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.sert_based_client_auth">
        <title>Certificate-based Client Authentication</title>
        <para>
          The Certificate-based Client Authentication section covers the test cases needed for CRL management on an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>Upload CRL</para>
            </listitem>
            <listitem>
              <para>
                Get All CRLs
              </para>
            </listitem>
            <listitem>
              <para>
                Delete CRL
              </para>
            </listitem>
            <listitem>
              <para>
                Create certification path validation policy
              </para>
            </listitem>
            <listitem>
              <para>
                Get certification path validation policies
              </para>
            </listitem>
            <listitem>
              <para>Delete certification path validation policy</para>
            </listitem>
            <listitem>
              <para>
                Get certification path validation policy
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <section xml:id="s.intro.scope.tls_versions">
        <title>TLS Versions</title>
        <para>
          The TLS Versions section covers the test cases needed for disabling and enabling TLS versions on an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>Get list of Enabled TLS Versions</para>
            </listitem>
            <listitem>
              <para>
                Set list of Enabled TLS Versions
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>


    </section>
  </chapter>
  <chapter xml:id="s.docbook">
    <title>Normative references</title>
    <itemizedlist>
      <listitem>
        <para>[ONVIF Conformance] ONVIF Conformance Process Specification:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/conformance/">https://www.onvif.org/profiles/conformance/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Profile Policy] ONVIF Profile Policy:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/">https://www.onvif.org/profiles/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Network Interface Specs] ONVIF Network Interface Specification documents:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/specifications/">https://www.onvif.org/profiles/specifications/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Core Specs] ONVIF Core Specifications:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/specifications/">https://www.onvif.org/profiles/specifications/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Security Configuration Service] ONVIF Security Configuration Specifications:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/specifications/">https://www.onvif.org/profiles/specifications/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ONVIF Base Test] ONVIF Base Device Test Specifications:</para>
        <para>
          <link xlink:href="https://www.onvif.org/profiles/conformance/device-test/">https://www.onvif.org/profiles/conformance/device-test/</link>
        </para>
      </listitem>
      <listitem>
        <para>[ISO/IEC Directives, Part 2] ISO/IEC Directives, Part 2, Annex H:</para>
        <para>
          <link xlink:href="http://www.iso.org/directives">http://www.iso.org/directives</link>
        </para>
      </listitem>
      <listitem>
        <para>[ISO 16484-5] ISO 16484-5:2014-09 Annex P:</para>
        <para>
          <link xlink:href="https://www.iso.org/obp/ui/#!iso:std:63753:en">https://www.iso.org/obp/ui/#!iso:std:63753:en</link>
        </para>
      </listitem>
      <listitem>
        <para>[SOAP 1.2, Part 1] W3C SOAP 1.2, Part 1, Messaging Framework:</para>
        <para>
          <link xlink:href="http://www.w3.org/TR/soap12-part1/">http://www.w3.org/TR/soap12-part1/</link>
        </para>
      </listitem>
      <listitem>
        <para>[XML-Schema, Part 1] W3C XML Schema Part 1: Structures Second Edition:</para>
        <para>
          <link xlink:href="http://www.w3.org/TR/xmlschema-1/">http://www.w3.org/TR/xmlschema-1/</link>
        </para>
      </listitem>
      <listitem>
        <para>[XML-Schema, Part 2] W3C XML Schema Part 2: Datatypes Second Edition:</para>
        <para>
          <link xlink:href="http://www.w3.org/TR/xmlschema-2/">http://www.w3.org/TR/xmlschema-2/</link>
        </para>
      </listitem>
      <listitem>
        <para>[WS-Security] "Web Services Security: SOAP Message Security 1.1 (WS-Security 2004)", OASIS Standard, February 2006.:</para>
        <para>
          <link xlink:href="http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf">http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf</link>
        </para>
      </listitem>
      <listitem>
        <para>[RFC 3447] "Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1", J. Jonsson, B. Kaliski, February 2003.:</para>
        <para>
          <link xlink:href="https://www.ietf.org/rfc/rfc3447.txt">https://www.ietf.org/rfc/rfc3447.txt</link>
        </para>
      </listitem>
      <listitem>
        <para>[RFC 5280] "Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile", D. Cooper et. al., May 2008.:</para>
        <para>
          <link xlink:href="http://www.ietf.org/rfc/rfc5280.txt">http://www.ietf.org/rfc/rfc5280.txt</link>
        </para>
      </listitem>
      <listitem>
        <para>[RFC 5958] "Asymmetric Key Packages", S. Turner, August 2010.:</para>
        <para>
          <link xlink:href="https://tools.ietf.org/html/rfc5958">https://tools.ietf.org/html/rfc5958</link>
        </para>
      </listitem>
      <listitem>
        <para>[RFC 5959] "Algorithms for Asymmetric Key Package Content Type", S. Turner, August 2010.:</para>
        <para>
          <link xlink:href="https://www.ietf.org/rfc/rfc5959.txt">https://www.ietf.org/rfc/rfc5959.txt</link>
        </para>
      </listitem>
      <listitem>
        <para>[PKCS#12] "Personal Information Exchange Syntax v1.0", RSA Laboratories, June 24, 1999.:</para>
      </listitem>
    </itemizedlist>
  </chapter>
  <chapter xml:id="additions">
    <title>Terms and Definitions</title>
    <section xml:id="additions.conventions">
      <title>Conventions</title>
      <para>
        The key words "shall", "shall not", "should", "should not", "may", "need not",
        "can", "cannot" in this specification are to be interpreted as described in [ISO/IEC
        Directives Part 2].
      </para>
    </section>
    <section xml:id="additions.definitions">
      <title>Definitions</title>
      <para>This section defines terms that are specific to the ONVIF Security Configuration Service and tests. For a list of applicable general terms and definitions, please see [ONVIF Base Test].</para>
      <variablelist>
        <varlistentry>
          <term>Key</term>
          <listitem>
            <para>A key is an input to a cryptographic algorithm. Sufficient randomness of the key is usually a necessary condition for the security of the algorithm. This specification supports RSA key pairs as keys. </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Key Pair </term>
          <listitem>
            <para>
              A key that consists of a public key and (optionally) a private key.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>RSA key pair </term>
          <listitem>
            <para>
              A key pair that is accepted as input by the RSA algorithm.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Digital Signature </term>
          <listitem>
            <para>
              A digital signature for an object allows to verify the object’s authenticity, i.e., to check whether the object has in fact been created by the signer and has not been modified afterwards. A digital signature is based on a key pair, where the private key is used to create the signature and the public key is used for verification of the signature.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Certificate </term>
          <listitem>
            <para>
              A certificate as used in this specification binds a public key to a subject entity. The certificate is digitally signed by the certificate issuer (the certification authority) to allow for verifying its authenticity.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Certification Path </term>
          <listitem>
            <para>
              A certification path is a sequence of certificates in which the signature of each certificate except for the last certificate can be verified with the subject public key in the next certificate in the sequence.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Certification Authority </term>
          <listitem>
            <para>
              A certification authority is an entity that issues certificates to subject entities.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Alias </term>
          <listitem>
            <para>
              An alias is a name for an object on the device that is chosen by the client and treated transparently by the device.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section xml:id="additions.abbreviations">
      <title>Abbreviations</title>
      <para>This section describes abbreviations used in this document.</para>
      <variablelist>
        <varlistentry>
          <term>CA </term>
          <listitem>
            <para>Certification Authority </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>CSR</term>
          <listitem>
            <para>Certificate Signing Request (also called Certification Request)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>SHA</term>
          <listitem>
            <para>Secure Hashing Algorithm</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>TLS</term>
          <listitem>
            <para>Transport Layer Security</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </chapter>
  <chapter xml:id="overview">
    <title>Test Overview</title>
    <para>
      This section provides information the test setup procedure and required prerequisites, and the test policies that should be followed for test case execution.
    </para>
    <section xml:id="overview.test_setup">
      <title>Test Setup</title>
      <section xml:id="overview.test_setup.network_configuration">
        <title>Network Configuration for DUT</title>
        <para>
          The generic test configuration for the execution of test cases defined in this document is as shown below (Figure 4.1).
        </para>
        <para>
          Based on the individual test case requirements, some of the entities in the below setup may not be needed for the execution of those corresponding test cases.
        </para>
        <figure>
          <title>Test Configuration for DUT</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="test_network.png" format="PNG" scalefit="0"/>
            </imageobject>
            <textobject>
              <phrase>Test Configuration for DUT</phrase>
            </textobject>
          </mediaobject>
        </figure>
        <para>
          <emphasis role="bold">DUT:</emphasis> ONVIF device to be tested. Hereafter, this is referred to as DUT (Device Under Test).
        </para>
        <para>
          <emphasis role="bold">ONVIF Client (Test Tool):</emphasis> Tests are executed by this system and it controls the behavior of the DUT. It handles both expected and unexpected behavior.
        </para>
        <para>
          <emphasis role="bold">HTTP Proxy:</emphasis> provides facilitation in case of RTP and RTSP tunneling over HTTP.
        </para>
        <para>
          <emphasis role="bold">Wireless Access Point:</emphasis> provides wireless connectivity to the devices that support wireless connection.
        </para>
        <para>
          <emphasis role="bold">DNS Server:</emphasis> provides DNS related information to the connected devices.
        </para>
        <para>
          <emphasis role="bold">DHCP Server:</emphasis> provides IPv4 Address to the connected devices.
        </para>
        <para>
          <emphasis role="bold">NTP Server:</emphasis> provides time synchronization between ONVIF Client and DUT.
        </para>
        <para>
          <emphasis role="bold">Switching Hub:</emphasis> provides network connectivity among all the test equipments in the test environment. All devices should be connected to the Switching Hub.
          When running multiple test instances in parallel on the same network, the Switching Hub should be configured to use filtering in order to avoid multicast traffic being flooded to all ports, because this may affect test stability.
        </para>
        <para>
          <emphasis role="bold">Router:</emphasis> provides router advertisements for IPv6 configuration.
        </para>
      </section>
    </section>
    <section xml:id="overview.prerequisites">
      <title>Prerequisites</title>
      <para>
        The pre-requisites for executing the test cases described in this Test Specification are:
        <itemizedlist>
          <listitem>
            <para>
              The DUT shall be configured with an IPv4 address.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be IP reachable in the test configuration.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be able to be discovered by the Test Tool.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be configured with the time, i.e. manual configuration of UTC time and if NTP is supported by the DUT then NTP time shall be synchronized with NTP Server.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT time and Test tool time shall be synchronized with each other either manually or by a common NTP server.
            </para>
          </listitem>
          <listitem>
            <para>
              The ONVIF Client supports both WS-Security Username Token profile and HTTP digest authentication as authentication functionalities and selects the authentication method to use based on the procedure defined in Sect. 3.3.6 (Authentication method selection as a testing framework) of [ONVIF Base Test Spec].
            </para>
          </listitem>
          <listitem>
            <para>
              The user account that is used by the ONVIF Client for issuing commands to the DUT has administrative rights.
            </para>
          </listitem>
          <listitem>
            <para>
              The ONVIF Client shall have access to a certification authority.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall have enough free storage capacity for RSA key pairs that is required for test cases (see test cases pre-requisites for more information).
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall have enough free storage capacity for certificates that is required for test cases (see test cases pre-requisites for more information).
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall have enough free storage capacity for certification paths that is required for test cases (see test cases pre-requisites for more information).
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall have enough free storage capacity for server certificate assignment that is required for test cases (see test cases pre-requisites for more information).
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>
    <section xml:id="overview.test_policy">
      <title>Test Policy</title>
      <para>
        This section describes the test policies specific to the test case execution of each functional block.
      </para>
      <para>
        The DUT shall adhere to the test policies defined in this section.
      </para>
      <section xml:id="overview.test_policy.general_policy">
        <title>General Policy</title>
        <para>
          The test policies specific to the test case execution of all functional blocks:
          <itemizedlist>
            <listitem>
              <para>If a DUT method produces a fault that is not explicitly stated as expected in the test procedure of a test case, the result of the test case shall be FAIL.</para>
            </listitem>
            <listitem>
              <para>
                Assertions in a test procedure are defined using the verb verify, e.g., "ONVIF Client verifies that list l contains ID x", with the following semantics:
                <itemizedlist>
                  <listitem>
                    <para>If the assertion holds, the test proceeds with the next step in the test procedure.</para>
                  </listitem>
                  <listitem>
                    <para>If the assertion does not hold, the test result shall be FAIL.</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>

      <section xml:id="overview.test_policy.keystore">
        <title>Keystore</title>
        <para>
          The test policies specific to the test case execution of Keystore functional block:
          <itemizedlist>
            <listitem>
              <para>DUT shall give the ONVIF Security Configuration Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.</para>
            </listitem>
            <listitem>
              <para>The DUT shall support on-board generation of an RSA key pair.</para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed about key management
                <itemizedlist>
                  <listitem>
                    <para>The DUT generates an RSA key pair status handling is done with polling.</para>
                  </listitem>
                  <listitem>
                    <para>The DUT generates an RSA key pair status handling is done with event.</para>
                  </listitem>
                  <listitem>
                    <para>The DUT returns whether a key pair in the keystore contains a private key.</para>
                  </listitem>
                  <listitem>
                    <para>The status of a key in the DUT’s keystore is returned correctly.</para>
                  </listitem>
                  <listitem>
                    <para>A key is deleted correctly from the keystore on the DUT.</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.advanced_security.keystore"/> for Keystore Test Cases.
        </para>
      </section>

      <section xml:id="overview.test_policy.sert_mng">
        <title>Certificate Management</title>
        <para>
          The test policies specific to the test case execution of Certificate Management functional block:
          <itemizedlist>
            <listitem>
              <para>DUT shall give the ONVIF Security Configuration Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.</para>
            </listitem>
            <listitem>
              <para>The DUT shall support generating a PKCS#10 certification request.</para>
            </listitem>
            <listitem>
              <para>The DUT shall support creating a self-signed certificate.</para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed about certificate management
                <itemizedlist>
                  <listitem>
                    <para>The DUT correctly supports external certification for a key pair in the keystore.</para>
                  </listitem>
                  <listitem>
                    <para>The DUT correctly generates a self-signed certificate for a key pair in the keystore.</para>
                  </listitem>
                  <listitem>
                    <para>The ONVIF Client can upload a certificate to the DUT.</para>
                  </listitem>
                  <listitem>
                    <para>A certificate from the keystore on the DUT is correctly returned to the ONVIF client.</para>
                  </listitem>
                  <listitem>
                    <para>All certificates in the keystore on the DUT are correctly returned to the ONVIF client.</para>
                  </listitem>
                  <listitem>
                    <para>The ONVIF Client can delete a certificate from the keystore on the DUT.</para>
                  </listitem>
                  <listitem>
                    <para>Certificates in the keystore on the DUT can be correctly combined to a certification path.</para>
                  </listitem>
                  <listitem>
                    <para>A certification path stored in the keystore on the DUT can be correctly deleted.</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.advanced_security.certificate_management"/> for Certificate Management Test Cases.
        </para>
      </section>

      <section xml:id="overview.test_policy.tsl_serv">
        <title>TLS Server</title>
        <para>
          The test policies specific to the test case execution of TLS Server functional block:
          <itemizedlist>
            <listitem>
              <para>DUT shall give the ONVIF Security Configuration Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.</para>
            </listitem>
            <listitem>
              <para>The DUT shall implement a TLS server.</para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed for the TLS server
                <itemizedlist>
                  <listitem>
                    <para>A certification path is assigned to the TLS server.</para>
                  </listitem>
                  <listitem>
                    <para>A certification path is received from the TLS server.</para>
                  </listitem>
                  <listitem>
                    <para>A certification path assignment is removed from the TLS server.</para>
                  </listitem>
                  <listitem>
                    <para>A certification path assignment to the TLS server is replaced by another certification path assignment.</para>
                  </listitem>
                  <listitem>
                    <para>Basic TLS Handshake</para>
                  </listitem>
                  <listitem>
                    <para>Basic TLS Handshake after Replace Server Certificate Assignment</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed for the TLS server in case certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT
                <itemizedlist>
                  <listitem>
                    <para>Basic TLS Handshake with Replace Server Certification Path and PKCS#12</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed for the TLS server in case TLS client authentication is supported by the DUT
                <itemizedlist>
                  <listitem>
                    <para>TLS client authentication – self-signed TLS server certificate with on-device RSA key pair</para>
                  </listitem>
                  <listitem>
                    <para>CRL processing with on-device RSA key pair</para>
                  </listitem>
                  <listitem>
                    <para>Replace certification path validation policy assignment</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>

          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.advanced_security.tls_server"/> for TLS Server Test Cases.
        </para>
      </section>

      <section xml:id="overview.test_policy.ref_int">
        <title>Referential Integrity</title>
        <para>
          The test policies specific to the test case execution of Referential integrity functional block:
          <itemizedlist>
            <listitem>
              <para>DUT shall give the ONVIF Security Configuration Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.</para>
            </listitem>
            <listitem>
              <para>The DUT shall implement a TLS server.</para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed for the TLS server
                <itemizedlist>
                  <listitem>
                    <para>Referential integrity of certificate assigned to a TLS server.</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.advanced_security.referential_integrity"/> for Referential integrity Test Cases.
        </para>
      </section>

      <section xml:id="overview.test_policy.capabilities">
        <title>Capabilities</title>
        <para>
          The test policies specific to the test case execution of Capabilities functional block:
          <itemizedlist>
            <listitem>
              <para>DUT shall give the ONVIF Security Configuration Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.</para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>Getting capabilities with GetServiceCapabilities command</para>
                  </listitem>
                  <listitem>
                    <para>Getting capabilities with GetServices command</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.advanced_security.capabilities"/> for Capabilities Test Cases.
        </para>
      </section>

      <section xml:id="overview.test_policy.offdev_key_gen_op">
        <title>Off-Device Key Generation Operations</title>
        <para>
          The test policies specific to the test case execution of Off-Device Key Generation Operations functional block:
          <itemizedlist>
            <listitem>
              <para>DUT shall give the ONVIF Security Configuration Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.</para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>Uploading passphrase with UploadPassphrase command</para>
                  </listitem>
                  <listitem>
                    <para>Deleting passphrase with DeletePassphrase command</para>
                  </listitem>
                  <listitem>
                    <para>Upload key pair in PKCS#8 data structure with UploadKeyPairInPKCS8 command</para>
                  </listitem>
                  <listitem>
                    <para>Upload certificate with private key in PKCS#12 data structure with UploadCertificateWithPrivateKeyInPKCS12 command</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.advanced_security.offdevice_key_generation_operations"/> for Off-Device Key Generation Operations Test Cases.
        </para>
      </section>

      <section xml:id="overview.test_policy.sert_based_client_auth">
        <title>Certificate-Based Client Authentication</title>
        <para>
          The test policies specific to the test case execution of Certificate-based Client Authentication functional block:
          <itemizedlist>
            <listitem>
              <para>DUT shall give the ONVIF Security Configuration Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.</para>
            </listitem>
            <listitem>
              <para>The DUT shall support upload of CRLs.</para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed about CRL management
                <itemizedlist>
                  <listitem>
                    <para>The ONVIF Client can upload a CRL to the DUT.</para>
                  </listitem>
                  <listitem>
                    <para>A CRL from the storage on the DUT is correctly returned to the ONVIF client.</para>
                  </listitem>
                  <listitem>
                    <para>All CRLs in the storage on the DUT are correctly returned to the ONVIF client.</para>
                  </listitem>
                  <listitem>
                    <para>The ONVIF Client can delete a CRL from the storage on the DUT.</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed about certification path validation policy management
                <itemizedlist>
                  <listitem>
                    <para>The ONVIF Client can create a certification path validation policy on the DUT.</para>
                  </listitem>
                  <listitem>
                    <para>A certification path validation policy from the storage on the DUT is correctly returned to the ONVIF client.</para>
                  </listitem>
                  <listitem>
                    <para>All certification path validation policies in the storage on the DUT are correctly returned to the ONVIF client.</para>
                  </listitem>
                  <listitem>
                    <para>The ONVIF Client can delete a certification path validation policy from the storage on the DUT.</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.advanced_security.certificatebased_client_authentication"/> for Certificate-based Client Authentication Test Cases.
        </para>
      </section>

      <section xml:id="overview.test_policy.tls_versions">
        <title>TLS Versions</title>
        <para>
          The test policies specific to the test case execution of TLS Versions functional block:
          <itemizedlist>
            <listitem>
              <para>DUT shall give the ONVIF Security Configuration Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.</para>
            </listitem>
            <listitem>
              <para>The DUT shall support enabling and disabling specific TLS versions.</para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed about enabling and disabling specific TLS versions
                <itemizedlist>
                  <listitem>
                    <para>The ONVIF Client can get list of enabled TLS versions.</para>
                  </listitem>
                  <listitem>
                    <para>The ONVIF Client can set list of enabled TLS versions.</para>
                  </listitem>
                  <listitem>
                    <para>TLS versions out of enabled TLS versions are rejected by the DUT.</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.advanced_security.tls_versions"/> for TLS Versions Test Cases.
        </para>
      </section>

    </section>
  </chapter>
  <!--Security Configuration Test Cases-->
  <chapter xml:id="tc.advanced_security">
    <title>Security Configuration Test Cases</title>
    <!--Keystore-->
    <section xml:id="tc.advanced_security.keystore" xreflabel="Section 5.1">
      <title>Keystore</title>
      <!--ADVANCED_SECURITY-1-1-1-->
      <section xml:id="tc.ADVANCED_SECURITY-1-1-1">
        <title>Create RSA Key Pair, status through polling</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-1-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreateRSAKeyPair, GetKeyStatus
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test RSA key pair generation with key status retrieval through polling.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. On-board RSA key pair generation is supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>

            <listitem>
              <para>
                For each key length <emphasis role="italic">keyLength</emphasis> in the RSAKeyLengths capability contained in <emphasis role="italic">cap</emphasis>.KeystoreCapabilities repeat the following steps:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">CreateRSAKeyPair</emphasis> with parameter
                      <itemizedlist>
                        <listitem>
                          <para>KeyLength := keyLength</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">CreateRSAKeyPairResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            KeyID =: <emphasis role="italic">keyID</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            EstimatedCreationTime =: <emphasis role="italic">duration</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem xml:id="tc.ADVANCED_SECURITY-1-1-1.4.3" xreflabel="4.3">
                    <para>
                      Until <emphasis role="italic">operationDelay</emphasis> + <emphasis role="italic">duration</emphasis> expires repeat the following steps:
                      <orderedlist numeration="arabic" inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            ONVIF Client waits for 5 seconds.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ONVIF Client invokes <emphasis role="bold">GetKeyStatus</emphasis> with parameters
                            <itemizedlist>
                              <listitem>
                                <para>
                                  KeyID := <emphasis role="italic">keyID</emphasis>
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            The DUT responds with <emphasis role="bold">GetKeyStatusResponse</emphasis> message with parameters
                            <itemizedlist>
                              <listitem>
                                <para>KeyStatus =: keyStatus</para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">keyStatus</emphasis> is equal to "ok", go to the step <xref linkend="tc.ADVANCED_SECURITY-1-1-1.4.5"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">keyStatus</emphasis> is equal to "corrupt", FAIL the test, delete the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration, and skip other steps.
                          </para>
                        </listitem>

                      </orderedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">operationDelay</emphasis> + <emphasis role="italic">duration</emphasis> timeout expires for step <xref linkend="tc.ADVANCED_SECURITY-1-1-1.4.3"/> and the last <emphasis role="italic">keyStatus</emphasis> is other than "ok", FAIL the test, delete the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration and skip other steps.
                    </para>
                  </listitem>
                  <listitem xml:id="tc.ADVANCED_SECURITY-1-1-1.4.5" xreflabel="4.5">
                    <para>
                      ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
                    </para>
                  </listitem>

                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreateRSAKeyPairResponse</emphasis> message(s).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetKeyStatusResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
      <!--ADVANCED_SECURITY-1-1-2-->
      <section xml:id="tc.ADVANCED_SECURITY-1-1-2">
        <title>Create RSA Key Pair, status through event</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-1-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreateRSAKeyPair
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis>security.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test RSA key pair generation with key status retrieval through events.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Event Service was received from the DUT. 
          On-board RSA key pair generation is supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. 
          Device supports Pull-Point Notification feature.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Advancedsecurity/Keystore/KeyStatus"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Filter.TopicExpression.@Dialect := "http://www.onvif.org/ver10/tev/topicExpression/ConcreteSet"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                For each key length <emphasis role="italic">keyLength</emphasis> in the RSAKeyLengths capability contained in <emphasis role="italic">cap</emphasis>.KeystoreCapabilities repeat the following steps:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">CreateRSAKeyPair</emphasis> with parameter
                      <itemizedlist>
                        <listitem>
                          <para>
                            KeyLength := <emphasis role="italic">keyLength</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">CreateRSAKeyPairResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            KeyID =: <emphasis role="italic">keyID</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            EstimatedCreationTime =: <emphasis role="italic">duration</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem xml:id="tc.ADVANCED_SECURITY-1-1-2.6.3" xreflabel="6.3">
                    <para>
                      Until <emphasis role="italic">operationDelay</emphasis> + <emphasis role="italic">duration</emphasis> timeout expires repeat the following steps:
                      <orderedlist numeration="arabic" inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                            <itemizedlist>
                              <listitem>
                                <para>Timeout := PT60S</para>
                              </listitem>
                              <listitem>
                                <para>
                                  MessageLimit := 1
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                            <itemizedlist>
                              <listitem>
                                <para>
                                  CurrentTime =: <emphasis role="italic">ct</emphasis>
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  TerminationTime =: <emphasis role="italic">tt</emphasis>
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  NotificationMessage =: <emphasis role="italic">m</emphasis>
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> is not null and the KeyID source simple item in <emphasis role="italic">m</emphasis> is equal to <emphasis role="italic">keyID</emphasis> and the NewStatus data simple item in <emphasis role="italic">m</emphasis> is equal to "ok", go to the step <xref linkend="tc.ADVANCED_SECURITY-1-1-2.6.5"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> is not null and the KeyID source simple item in <emphasis role="italic">m</emphasis> is equal to <emphasis role="italic">keyID</emphasis> and the NewStatus data simple item in <emphasis role="italic">m</emphasis> is equal to "corrupt", FAIL the test, delete the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration and go to the step <xref linkend="tc.ADVANCED_SECURITY-1-1-2.7"/>.
                          </para>
                        </listitem>

                      </orderedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">operationDelay</emphasis> + <emphasis role="italic">duration</emphasis> timeout expires for step <xref linkend="tc.ADVANCED_SECURITY-1-1-2.6.3"/> without Notification with KeyID source simple item equal to <emphasis role="italic">keyID</emphasis> and the NewStatus data simple item equal to "ok", FAIL the test, delete the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration and go to the step <xref linkend="tc.ADVANCED_SECURITY-1-1-2.7"/>.
                    </para>
                  </listitem>
                  <listitem xml:id="tc.ADVANCED_SECURITY-1-1-2.6.5" xreflabel="6.5">
                    <para>
                      ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
                    </para>
                  </listitem>

                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.ADVANCED_SECURITY-1-1-2.7">
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.
              </para>
            </listitem>


          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreateRSAKeyPairResponse</emphasis> message(s).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message(s).
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send the <emphasis role="bold">UnsubscribeResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
      <!--ADVANCED_SECURITY-1-1-3-->
      <section xml:id="tc.ADVANCED_SECURITY-1-1-3">
        <title>Check private Key status for an RSA private key</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-1-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetAllKeys
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test whether the private key status is correctly returned for a key pair with private key.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. On-board RSA key pair generation is supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates an RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateRSAKeyPair"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyAttribute list =: <emphasis role="italic">keyAttributeList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">keyAttributeList</emphasis>[KeyID = <emphasis role="italic">keyID</emphasis>].hasPrivateKey is not equal to true, FAIL the test and go to the next step.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllKeysResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--ADVANCED_SECURITY-1-1-4-->
      <section xml:id="tc.ADVANCED_SECURITY-1-1-4">
        <title>Get all keys</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-1-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetAllKeys
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test listing of RSA key pairs and appearing of new created RSA key pairs in the list.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. On-board RSA key pair generation is supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyAttribute list =: <emphasis role="italic">initialKeyList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates an RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateRSAKeyPair"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyAttribute list =: <emphasis role="italic">updatedKeyList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedKeyList</emphasis> does not contain <emphasis role="italic">keyID</emphasis> and all keys from <emphasis role="italic">initialKeyList</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> contains keys other than <emphasis role="italic">keyID</emphasis> or keys from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>

            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllKeysResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-1-1-5-->
      <section xml:id="tc.ADVANCED_SECURITY-1-1-5">
        <title>Delete Key</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-1-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteKey
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test deletion of RSA key pairs
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. On-board RSA key pair generation is supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyAttribute list =: <emphasis role="italic">initialKeyList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates an RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateRSAKeyPair"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyAttribute list =: <emphasis role="italic">updatedKeyList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedKeyList</emphasis> does not contain <emphasis role="italic">keyID</emphasis> and all keys from <emphasis role="italic">initialKeyList</emphasis>, FAIL the test, delete the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedKeyList</emphasis> contains keys other than <emphasis role="italic">keyID</emphasis> or keys from <emphasis role="italic">initialKeyList</emphasis>, FAIL the test, and delete the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteKeyResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyAttribute list =: <emphasis role="italic">finalKeyList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">finalKeyList</emphasis> is not equal <emphasis role="italic">initialKeyList</emphasis>, FAIL the test.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteKeyResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllKeysResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
    </section>
    <!--Certificate Management-->
    <section xml:id="tc.advanced_security.certificate_management" xreflabel="Section 5.2">
      <title>Certificate Management</title>
      <!--ADVANCED_SECURITY-2-1-1-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-1">
        <title>Create PKCS#10 certification requests</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreatePKCS10CSR
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the creation of a PKCS#10 certification requests.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates an RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateRSAKeyPair"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePKCS10CSR</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Subject := <emphasis role="italic">subject</emphasis> (see <xref linkend="Annex_SubjectForAServerCertificate"/>)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID := <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CSRAttribute skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.algorithm := 1.2.840.113549.1.1.5 (OID of SHA-1 with RSA Encryption algorithm)
                    </para>
                  </listitem>

                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      PKCS10CSR =: <emphasis role="italic">PKCS10request</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client validates that <emphasis role="italic">PKCS10request</emphasis> is correctly DER encoded (see <xref linkend="Annex_HelperValidateDEREncoding"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">PKCS10request</emphasis> is incorrectly DER encoded, FAIL the test and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client validates that <emphasis role="italic">PKCS10request</emphasis> contains the correct subject equals to <emphasis role="italic">subject</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">PKCS10request</emphasis> contains a wrong subject, FAIL the test and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-2-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-2">
        <title>Create self-signed certificate</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreateSelfSignedCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the creation of self-signed certificates.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates an RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateRSAKeyPair"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreateSelfSignedCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      X509Version skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID := <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Subject := <emphasis role="italic">subject</emphasis> (see <xref linkend="Annex_SubjectForAServerCertificate"/>)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      notValidBefore skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      notValidAfter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.algorithm := 1.2.840.113549.1.1.5 (OID of SHA-1 with RSA Encryption algorithm)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.parameters skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.anyParameters skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreateSelfSignedCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreateSelfSignedCertificateResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-3-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-3">
        <title>Upload certificate – Keystore contains private key</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> UploadCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the upload of a certificate in case the keystore in the DUT contains a private key for the public key in the certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>

            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certificate (out <emphasis role="italic">cert</emphasis>) from the PKCS#10 request with RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and associated CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCASignedCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate := <emphasis role="italic">cert</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PrivateKeyRequired : = true
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">UploadCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client validates that <emphasis role="italic">keyID2</emphasis> equal to <emphasis role="italic">keyID1</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">keyID2</emphasis> is not equal to <emphasis role="italic">keyID1</emphasis>, FAIL the test and go to the step 9.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CA certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-4-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-4">
        <title>Upload certificate – Keystore contains private key (negative test)</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> UploadCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the upload of a certificate in case the keystore in the DUT does not contain a private key for the public key in the certificate (negative test).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes UploadCertificate with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate := <emphasis role="italic">CAcert</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PrivateKeyRequired := true
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Receiver/ter:Action/ter:NoMatchingPrivateKey SOAP 1.2 fault.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send the env:Receiver/ter:Action/ter:NoMatchingPrivateKey SOAP 1.2 fault message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-5-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-5">
        <title>Upload certificate – Keystore does not contain private key</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> UploadCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the upload of a certificate in case the keystore in the DUT does not contain a private key for the public key in the certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate := <emphasis role="italic">CAcert</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PrivateKeyRequired : = false
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">UploadCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CA certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-6-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-6">
        <title>Get certificate – self-signed</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-6
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval of a self-signed certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateSelfSignedCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID := <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate =: <emphasis role="italic">X509Cert</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client validates that <emphasis role="italic">X509Cert</emphasis>.CertificateContent is correctly DER encoded (see <xref linkend="Annex_HelperValidateDEREncoding"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert</emphasis>.CertificateContent is incorrectly DER encoded, FAIL the test and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client validates that <emphasis role="italic">X509Cert</emphasis>.CertificateContent contains the correct subject equals to subject defined in <xref linkend="Annex_SubjectForAServerCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert</emphasis>.CertificateContent contains wrong subject, FAIL the test and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCertificateResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-7-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-7">
        <title>Get certificate – CA</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-7
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval of a CA certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID</emphasis>, in <emphasis role="italic">CAcert</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID := <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate =: <emphasis role="italic">X509Cert</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client validates that <emphasis role="italic">X509Cert</emphasis>.CertificateContent is correctly DER encoded (see <xref linkend="Annex_HelperValidateDEREncoding"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert</emphasis>.CertificateContent is incorrectly DER encoded, FAIL the test and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert</emphasis>.CertificateContent contains wrong subject, FAIL the test and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CA certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCertificateResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-8-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-8">
        <title>Get all certificates – self signed</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-8
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetAllCertificates
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval of all certificates tested with self-signed certificates.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">initialCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateSelfSignedCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">updatedCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> does not contain <emphasis role="italic">certID</emphasis> and all certificates from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> contains certificates other than <emphasis role="italic">certID</emphasis> or certificates from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificatesResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-9-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-9">
        <title>Get All Certificate – CA</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-9
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetAllCertificates
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval of all certificates tested with CA certificates.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">initialCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out privateKey) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID</emphasis>, in <emphasis role="italic">CAcert</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">updatedCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> does not contain <emphasis role="italic">certID</emphasis> and all certificates from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> contains certificates other than <emphasis role="italic">certID</emphasis> or certificates from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CA certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificatesResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-10-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-10">
        <title>Delete Certificate – self signed</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-10
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the deletion of a certificate tested with self-signed certificates.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">initialCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateSelfSignedCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">updatedCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> does not contain <emphasis role="italic">certID</emphasis> and all certificates from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, delete the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> contains certificates other than <emphasis role="italic">certID</emphasis> or certificates from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, delete the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">finalCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>

            <listitem>
              <para>
                If <emphasis role="italic">finalCertificateList</emphasis> is not equal <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificatesResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-11-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-11">
        <title>Delete Certificate – CA</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-11
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the deletion of a certificate tested with CA certificates.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">initialCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out privateKey) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID</emphasis>, in <emphasis role="italic">CAcert</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">updatedCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> does not contain <emphasis role="italic">certID</emphasis> and all certificates from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, delete the CA certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificateList</emphasis> contains certificates other than <emphasis role="italic">certID</emphasis> or certificates from <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test, delete the CA certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">finalCertificateList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>

            <listitem>
              <para>
                If <emphasis role="italic">finalCertificateList</emphasis> is not equal <emphasis role="italic">initialCertificateList</emphasis>, FAIL the test.
              </para>
            </listitem>


          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificatesResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-12-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-12">
        <title>Create Certification Path – self-signed</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-12
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreateCertificationPath
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the creation of a certification path containing a self-signed certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateSelfSignedCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreateCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertficateIDs.CertificateID[0] := <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreateCertificationPathResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>) and related the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration.
              </para>
            </listitem>


          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreateCertificationPathResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-13-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-13">
        <title>Create Certification Path – CA</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-13
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreateCertificationPath
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the creation of a certification path (signed server + CA certificate).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates and uploads a CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) for RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and associated CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCASignedCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID2</emphasis>, in <emphasis role="italic">CAcert</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID2</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreateCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertficateIDs.CertificateID[0] =: <emphasis role="italic">certID1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CertficateIDs.CertificateID[1] =: <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test2"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreateCertificationPathResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>), related CA certificate (in <emphasis role="italic">certID2</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID2</emphasis>) and related the CA-signed certificate (in <emphasis role="italic">certID1</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath2"/> to restore DUT configuration.
              </para>
            </listitem>


          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreateCertificationPathResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-14-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-14">
        <title>Get Certification Path – self-signed</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-14
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetCertificationPath
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval of a certification path containing a self-signed certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on self-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_SelfSigned"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetCertificationPathResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPath.CertificateID[0] =: <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CertificationPath.Alias
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certID1</emphasis> is not equal to <emphasis role="italic">certID2</emphasis>, FAIL the test and go to the step 7.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID1</emphasis>), related the self-signed certificate (in <emphasis role="italic">certID1</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration.
              </para>
            </listitem>


          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCertificationPathResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-15-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-15">
        <title>Get Certification Path – CA</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-15
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetCertificationPath
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval of a certification path containing a signed server and a CA certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and a corresponding CA certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_CACertificates"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetCertificationPath</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetCertificationPathResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPath.CertificateID[0] =: <emphasis role="italic">certID3</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CertificationPath.CertificateID[1] =: <emphasis role="italic">certID4</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CertificationPath.Alias
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certID1</emphasis> is not equal to <emphasis role="italic">certID3</emphasis>, FAIL the test and go to the step 8.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certID2</emphasis> is not equal to <emphasis role="italic">certID4</emphasis>, FAIL the test and go to the step 8.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>), related CA certificate (in <emphasis role="italic">certID2</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID2</emphasis>) and related the CA-signed certificate (in <emphasis role="italic">certID1</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath2"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreateCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>


      </section>
      <!--ADVANCED_SECURITY-2-1-16-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-16">
        <title>Get All Certification Paths – self-signed</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-16
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetAllCertificationPaths
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval off all certification paths (self-signed certificate).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on self-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_SelfSigned"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">updatedCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificationPathList</emphasis> does not contain <emphasis role="italic">certPathID</emphasis> and all certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificationPathList</emphasis> contains certification paths other than <emphasis role="italic">certPathID</emphasis> or certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>), related the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-17-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-17">
        <title>Get All Certification Paths – CA</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-17
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetAllCertificationPaths
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval off all certification paths (CA plus signed certificate).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and a corresponding CA certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_CACertificates"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">updatedCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificationPathList</emphasis> does not contain <emphasis role="italic">certPathID</emphasis> and all certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, and go to the step 9.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificationPathList</emphasis> contains certification paths other than <emphasis role="italic">certPathID</emphasis> or certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, and go to the step 9.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>), related CA certificate (in <emphasis role="italic">certID2</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID2</emphasis>) and related the CA-signed certificate (in <emphasis role="italic">certID1</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath2"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-18-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-18">
        <title>Delete Certification Path – self-signed</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-18
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteCertificationPath
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the deletion of a certification path (self-signed certificate).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_SelfSigned"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">updatedCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificationPathList</emphasis> does not contain <emphasis role="italic">certPathID</emphasis> and all certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, delete the certification path (in <emphasis role="italic">certPathID</emphasis>) and related self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificationPathList</emphasis> contains certification paths other than <emphasis role="italic">certPathID</emphasis> or certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, delete the certification path (in <emphasis role="italic">certPathID</emphasis>) and related self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">finalCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">finalCertificationPathList</emphasis> is not equal <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-19-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-19">
        <title>Delete Certification Path - CA</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-19
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteCertification
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the deletion of a certification path (CA plus signed certificate).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and a corresponding CA certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_CACertificates"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">updatedCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificationPathList</emphasis> does not contain <emphasis role="italic">certPathID</emphasis> and all certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, perform steps 9-12 to restore DUT settings, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedCertificationPathList</emphasis> contains certification paths other than <emphasis role="italic">certPathID</emphasis> or certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, perform steps 9-12 to restore DUT settings, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CA certificate (<emphasis role="italic">certID2</emphasis>) and related RSA key pair (<emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CA certificate (<emphasis role="italic">certID1</emphasis>) and related RSA key pair (<emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID list =: <emphasis role="italic">finalCertificationPathList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">finalCertificationPathList</emphasis> is not equal <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message(s).
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step 4.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-20-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-20">
        <title>CreatePKCS10CSR – negative test</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-20
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreatePKCS10CSR
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify env:Sender\ter:InvalidArgVal\ter:InvalidKeyStatus is returned when key pair has status Generating.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PKCS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetServiceCapabilities</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Capabilities =: <emphasis role="italic">cap</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">keyLength</emphasis> := (the smallest key length in the list of supported RSA key lengths (cap.<emphasis role="italic">RSAKeyLengths</emphasis>) that is greater than or equal to 1024).
              </para>
            </listitem>
            <listitem>
              <para>
                If there is no such key length, set <emphasis role="italic">keyLength</emphasis> := (the largest supported RSA key length).
              </para>
            </listitem>
            <listitem xml:id="tc.ADVANCED_SECURITY-2-1-20.7">
              <para>
                ONVIF Client invokes <emphasis role="bold">CreateRSAKeyPair</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyLength =: <emphasis role="italic">keyLength</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreateRSAKeyPairResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EstimatedCreationTime =: <emphasis role="italic">duration</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">duration</emphasis> is less than 2 sec:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client deletes RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">keyLength</emphasis> := (the smallest supported RSA key length that is larger than the current <emphasis role="italic">keyLength</emphasis>)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If no such key length exists, log WARNING message, and PASS the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Go to step <xref linkend="tc.ADVANCED_SECURITY-2-1-20.7"/>.
                    </para>
                  </listitem>

                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePKCS10CSR</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Subject =: <emphasis role="italic">subject</emphasis> (see <xref linkend="Annex_SubjectForAServerCertificate"/>)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CSRAttribute skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.algorithm := 1.2.840.113549.1.1.5 (OID of SHA-1 with RSA Encryption algorithm)
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If the DUT returns env:Sender\ter:InvalidArgVal\ter:InvalidKeyStatus SOAP 1.2 fault, go to step <xref linkend="tc.ADVANCED_SECURITY-2-1-20.13"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If the DUT returns normal <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message.:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client deletes RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">keyLength</emphasis> := (the smallest supported RSA key length that is larger than the current <emphasis role="italic">keyLength</emphasis>)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If no such key length exists, log WARNING message, and PASS the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Go to step <xref linkend="tc.ADVANCED_SECURITY-2-1-20.7"/>.
                    </para>
                  </listitem>

                </orderedlist>
              </para>
            </listitem>
            <listitem  xml:id="tc.ADVANCED_SECURITY-2-1-20.13">
              <para>
                ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send env:Sender\ter:InvalidArgVal\ter:InvalidKeyStatus SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreateRSAKeyPair</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-21-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-21">
        <title>DeleteCertificate – CA – Preserve Public Key </title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-21
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test that the DUT does not delete the public key that is contained in the certificate from the keystore.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PKCS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID</emphasis>, in <emphasis role="italic">CAcert</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message where KeyAttribute list contains <emphasis role="italic">keyID</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The <emphasis role="bold">GetAllKeysResponse</emphasis> message at Step 8 does not contain <emphasis role="italic">keyID</emphasis> in KeyAttribute list.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllKeysResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-22-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-22">
        <title>Upload certificate – delete linked key (negative test)</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-22
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> UploadCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the link of a certificate to RSA Key Pair by attempting to delete key of an uploaded certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certificate (out <emphasis role="italic">cert</emphasis>) from the PKCS#10 request with RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and associated CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCASignedCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate := <emphasis role="italic">cert</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PrivateKeyRequired : = true
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">UploadCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender\ter:InvalidArgVal\ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CA certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send env:Sender\ter:InvalidArgVal\ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteKeyResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-2-1-23-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-23">
        <title>Upload certificate – Upload malformed certificate (negative test)</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-23
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> UploadCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that DUT produces InvalidArgVal\BadCertificate fault if UploadCertificate is invoked for a malformed X.509 certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client corrupts <emphasis role="italic">CAcert</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate := <emphasis role="italic">CAcert</emphasis> (malformed)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PrivateKeyRequired : = false
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender\ter:InvalidArgVal\ter:BadCertificate SOAP 1.2 fault.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send env:Sender\ter:InvalidArgVal\ter:BadCertificate SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>


      </section>
      <!--ADVANCED_SECURITY-2-1-24-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-24">
        <title>Upload certificate – Upload expired certificate</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-24
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> UploadCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that DUT does not produce an InvalidArgVal\BadCertificate fault if UploadCertificate is invoked for an expired certificate.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateExpiredCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate := <emphasis role="italic">CAcert</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PrivateKeyRequired : = false
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">UploadCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Check that the DUT does not return env:Sender\ter:InvalidArgVal\ter:BadCertificate SOAP 1.2 fault in <emphasis role="bold">UploadCertificateResponse</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CA certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT send env:Sender\ter:InvalidArgVal\ter:BadCertificate SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends another SOAP 1.2 fault message, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--ADVANCED_SECURITY-2-1-27-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-27">
        <title>CreateSelfSignedCertificate with PKCS#12</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-27
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreateSelfSignedCertificate
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that DUT correctly handles self-signed certificates that are based on keys uploaded to the DUT with PKCS#12.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. Certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT as indicated by the PKCS12CertificateWithRSAPrivateKeyUpload capability. The DUT does not indicate that it requires that each certificate with private key has its own unique key as indicated by the NoPrivateKeySharing capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) and uploads it with certification path ID (out <emphasis role="italic">certificationPathID</emphasis>) and key pair ID (out <emphasis role="italic">keyID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadPKCS12"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreateSelfSignedCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      X509Version skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID := <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Subject := <emphasis role="italic">subject</emphasis> (see <xref linkend="Annex_SubjectForAServerCertificateAllDNattributes"/>)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      notValidBefore skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      notValidAfter skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.algorithm := 1.2.840.113549.1.1.5 (OID of SHA-1 with RSA Encryption algorithm)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.parameters skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.anyParameters skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreateSelfSignedCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID := <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate =: <emphasis role="italic">X509Cert1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis>.CertificateID is not equal to <emphasis role="italic">certID2</emphasis>, FAIL the test and go to the step 19.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis>.KeyID is not equal to <emphasis role="italic">keyID</emphasis>, FAIL the test and go to the step 19.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client validates that <emphasis role="italic">X509Cert1</emphasis>.CertificateContent is correctly DER encoded (see <xref linkend="Annex_HelperValidateDEREncoding"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis>.CertificateContent is incorrectly DER encoded, FAIL the test and go to the step 19.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client verifies that the subject in <emphasis role="italic">X509Cert1</emphasis>.CertificateContent is equal to <emphasis role="italic">subject</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis>.CertificateContent contains a wrong subject, FAIL the test and go to the step 19.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">certificateList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certificateList1</emphasis> does not contain certificate with Certificate.CertificateID equal to <emphasis role="italic">certID2</emphasis>, FAIL the test and go to the step 19.
              </para>
            </listitem>
            <listitem>
              <para>
                Set:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">certificateList1</emphasis>.Certificate[CertificateID = certID2] =: <emphasis role="italic">X509Cert2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis> is not equal <emphasis role="italic">X509Cert2</emphasis>, FAIL the test and go to the step 19.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                If test did not fail:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CertificateID list =: <emphasis role="italic">certificateList2</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">certificateList2</emphasis> contains certificate with Certificate.CertificateID equal to <emphasis role="italic">certID2</emphasis>, FAIL the test and go to the step 22.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path (in <emphasis role="italic">certificationPathID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration and skip other steps.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreateSelfSignedCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificatesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>


        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step 18:
          <itemizedlist>
            <listitem>
              <para>
                CertificateID
              </para>
            </listitem>
            <listitem>
              <para>
                KeyID
              </para>
            </listitem>
            <listitem>
              <para>
                Alias
              </para>
            </listitem>
            <listitem>
              <para>
                CertificateContent
              </para>
            </listitem>
          </itemizedlist>
        </para>


      </section>
      <!--ADVANCED_SECURITY-2-1-28-->
      <section xml:id="tc.ADVANCED_SECURITY-2-1-28">
        <title>Create PKCS#10 request with PKCS#12</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-2-1-28
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreatePKCS10CSR
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that DUT correctly generates a PKCS#10 request for a key pair that is uploaded with PKCS#12.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. Certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT as indicated by the PKCS12CertificateWithRSAPrivateKeyUpload capability. The DUT does not indicate that it requires that each certificate with private key has its own unique key as indicated by the NoPrivateKeySharing capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert1</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey1</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey1</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) and uploads it with certification path ID (out <emphasis role="italic">certificationPathID1</emphasis>) and key pair ID (out <emphasis role="italic">keyID1</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadPKCS12"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePKCS10CSR</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Subject := <emphasis role="italic">subject</emphasis> (see <xref linkend="Annex_SubjectForAServerCertificate"/>)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID := <emphasis role="italic">keyID1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CSRAttribute skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SignatureAlgorithm.algorithm := 1.2.840.113549.1.1.5 (OID of SHA-1 with RSA Encryption algorithm)
                    </para>
                  </listitem>

                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      PKCS10CSR =: <emphasis role="italic">PKCS10request</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert2</emphasis>) with subject (in "CN=ONVIF TT2,C=US") and a corresponding public key (out <emphasis role="italic">publicKey2</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey2</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certificate (out <emphasis role="italic">cert</emphasis>) from the PKCS#10 request (in <emphasis role="italic">PKCS10request</emphasis>) and an associated CA certificate (in <emphasis role="italic">CAcert2</emphasis>) with related private key (in <emphasis role="italic">priveteKey2</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCertificateFromPKCS10CSR"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate := <emphasis role="italic">cert</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PrivateKeyRequired : = true
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">UploadCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">keyID2</emphasis> is not equal to <emphasis role="italic">keyID1</emphasis>, FAIL the test and go to step 24.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID := <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Certificate =: <emphasis role="italic">X509Cert1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis>.CertificateID is not equal to <emphasis role="italic">certID2</emphasis>, FAIL the test and go to the step 24.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis>.KeyID is not equal to <emphasis role="italic">keyID1</emphasis>, FAIL the test and go to the step 24.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client validates that <emphasis role="italic">X509Cert1</emphasis>.CertificateContent is correctly DER encoded (see <xref linkend="Annex_HelperValidateDEREncoding"/>).
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis>.CertificateContent is incorrectly DER encoded, FAIL the test and go to the step 24.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client verifies that the subject in <emphasis role="italic">X509Cert1</emphasis>.CertificateContent is equal to "CN=ONVIF TT2,C=US".
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis>.CertificateContent contains a wrong subject, FAIL the test and go to the step 24.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID list =: <emphasis role="italic">certificateList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>

            <listitem>
              <para>
                If <emphasis role="italic">certificateList1</emphasis> does not contain certificate with Certificate.CertificateID equal to <emphasis role="italic">certID2</emphasis>, FAIL the test and go to the step 24.
              </para>
            </listitem>
            <listitem>
              <para>
                Set:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">certificateList1</emphasis>.Certificate[CertificateID = certID2] =: <emphasis role="italic">X509Cert2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">X509Cert1</emphasis> is not equal <emphasis role="italic">X509Cert2</emphasis>, FAIL the test and go to the step 24.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                If test did not fail:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CertificateID list =: <emphasis role="italic">certificateList2</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">certificateList2</emphasis> contains certificate with Certificate.CertificateID equal to <emphasis role="italic">certID2</emphasis>, FAIL the test and go to the step 28.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If step 10 failed:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            KeyID =: <emphasis role="italic">keyID2</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with a <emphasis role="bold">DeleteKeyResponse</emphasis> message.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path (in <emphasis role="italic">certificationPathID1</emphasis>) and RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration and skip other steps.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCertificateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertificatesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteKeyResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step 23:
          <itemizedlist>
            <listitem>
              <para>
                CertificateID
              </para>
            </listitem>
            <listitem>
              <para>
                KeyID
              </para>
            </listitem>
            <listitem>
              <para>
                Alias
              </para>
            </listitem>
            <listitem>
              <para>
                CertificateContent
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <!--TLS Server-->
    <section xml:id="tc.advanced_security.tls_server" xreflabel="Section 5.3">
      <title>TLS Server</title>
      <!--Certificate Management-->
      <section xml:id="tc.advanced_security.tls_server.certificate_management">
        <title>Certificate Management</title>
        <!--ADVANCED_SECURITY-3-1-1-->
        <section xml:id="tc.ADVANCED_SECURITY-3-1-1">
          <title>Add Server Certificate Assignment – self-signed</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-1-1
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> AddServerCertificateAssignment
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the assignment of a self-signed certificate to a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment. 
            Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on self-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_SelfSigned"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID</emphasis>), self-signed certificate (in <emphasis role="italic">certID</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>

            </itemizedlist>
          </para>

        </section>
        <!--ADVANCED_SECURITY-3-1-2-->
        <section xml:id="tc.ADVANCED_SECURITY-3-1-2">
          <title>Add Server Certificate Assignment – CA</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-1-2
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> AddServerCertificateAssignment
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the assignment of a certificate (signed + CA) to a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment. Current time of the DUT shall be at least Jan 01, 1970.
           Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and a corresponding CA certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_CACertificates"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID</emphasis>), related CA certificate (in <emphasis role="italic">certID2</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID2</emphasis>) and related CA-signed certificate (in <emphasis role="italic">certID1</emphasis>) and RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment2"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>

              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

        </section>
        <!--ADVANCED_SECURITY-3-1-3-->
        <section xml:id="tc.ADVANCED_SECURITY-3-1-3">
          <title>Replace Server Certificate Assignment – self-signed</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-1-3
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> ReplaceServerCertificateAssignment
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the replacement of a self-signed certificate to a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT.
            Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability.
            RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability.
            TLS is supported by the DUT as indicated by the TLSServerSupported capability.
            The DUT shall have enough free storage capacity for two additional RSA key pairs.
            The DUT shall have enough free storage capacity for two additional certificates.
            The DUT shall have enough free storage capacity for two additional certification paths.
            The DUT shall have enough free storage capacity for one additional server certificate assignment. 
            Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client adds server certification assignment and creates related certification path (out <emphasis role="italic">certPathID1</emphasis>), the self-signed certificate (out <emphasis role="italic">certID1</emphasis>) and the RSA key pair (out <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_SSCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certification path (out <emphasis role="italic">certPathID2</emphasis>) based on self-signed certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_SelfSigned"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">ReplaceServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        OldCertificationPathID =: <emphasis role="italic">certPathID1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NewCertificationPathID =: <emphasis role="italic">certPathID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">ReplaceServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (<emphasis role="italic">certPathID2</emphasis>), the self-signed certificate (<emphasis role="italic">certID2</emphasis>) and the RSA key pair (<emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID1</emphasis>) and related the self-signed certificate (in <emphasis role="italic">certID1</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>

            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">ReplaceServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

        </section>
        <!--ADVANCED_SECURITY-3-1-4-->
        <section xml:id="tc.ADVANCED_SECURITY-3-1-4">
          <title>Replace Server Certificate Assignment – CA</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-1-4
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> ReplaceServerCertificateAssignment
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the replacement of a signed and CA certificate to a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT.
            Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability.
            RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability.
            TLS is supported by the DUT as indicated by the TLSServerSupported capability.
            The DUT shall have enough free storage capacity for three additional RSA key pairs.
            The DUT shall have enough free storage capacity for three additional certificates.
            The DUT shall have enough free storage capacity for two additional certification paths.
            The DUT shall have enough free storage capacity for one additional server certificate assignment.
            Current time of the DUT shall be at least Jan 01, 1970. 
            Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID1</emphasis>, in <emphasis role="italic">CAcert</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID1</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates and uploads a CA-signed certificate (out <emphasis role="italic">certID2</emphasis>) for RSA key pair (out <emphasis role="italic">keyID2</emphasis>) and associated CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCASignedCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">CreateCertificationPath</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertficateIDs.CertificateID[0] := <emphasis role="italic">certID2</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertficateIDs.CertificateID[1] := <emphasis role="italic">certID1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Alias := "ONVIF_TestPath1"
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">CreateCertificationPathResponse</emphasis> message with parameter
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameter
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID := <emphasis role="italic">certPathID1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates and uploads a CA-signed certificate (out <emphasis role="italic">certID3</emphasis>) for RSA key pair (out <emphasis role="italic">keyID3</emphasis>) and associated CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCASignedCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">CreateCertificationPath</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertficateIDs.CertificateID[0] := <emphasis role="italic">certID3</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertficateIDs.CertificateID[1] := <emphasis role="italic">certID1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Alias := "ONVIF_TestPath2"
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">CreateCertificationPathResponse</emphasis> message with parameter
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">ReplaceServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        OldCertificationPathID := <emphasis role="italic">certPathID1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NewCertificationPathID := <emphasis role="italic">certPathID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">ReplaceServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID1</emphasis>) and related the self-signed certificate (in <emphasis role="italic">certID2</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID2</emphasis>), related CA certificate (in <emphasis role="italic">certID1</emphasis>) and RSA key pair (in <emphasis role="italic">keyID1</emphasis>) and related CA-signed certificate (in <emphasis role="italic">certID3</emphasis>) and RSA key pair (in <emphasis role="italic">keyID3</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment2"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">CreateCertificationPathResponse</emphasis> message(s).
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">ReplaceServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

        </section>
        <!--ADVANCED_SECURITY-3-1-5-->
        <section xml:id="tc.ADVANCED_SECURITY-3-1-5">
          <title>Get Assigned Server Certificates – self-signed</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-1-5
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> GetAssignedServerCertificates
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval of a self-signed certificate assignment to a TLS server
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. 
            Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. 
            RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. 
            TLS is supported by the DUT as indicated by the TLSServerSupported capability. 
            The DUT shall have enough free storage capacity for one additional RSA key pair. 
            The DUT shall have enough free storage capacity for one additional certificate. 
            The DUT shall have enough free storage capacity for one additional certification path. 
            The DUT shall have enough free storage capacity for one additional server certificate assignment. 
            Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-5.5">
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client adds server certification assignment and creates related certification path (out <emphasis role="italic">certPathID</emphasis>), the self-signed certificate (out <emphasis role="italic">certID</emphasis>) and the RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_SSCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">updatedCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">updatedCertificationPathList</emphasis> does not contain <emphasis role="italic">certPathID</emphasis> and all certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-1-5.11" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">updatedCertificationPathList</emphasis> contains certification paths other than <emphasis role="italic">certPathID</emphasis> or certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-1-5.11" />.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-5.11">
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID</emphasis>), self-signed certificate (in <emphasis role="italic">certID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message(s).
                </para>
              </listitem>

            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step <xref linkend="tc.ADVANCED_SECURITY-3-1-5.5" />.
          </para>
        </section>
        <!--ADVANCED_SECURITY-3-1-6-->
        <section xml:id="tc.ADVANCED_SECURITY-3-1-6">
          <title>Get Assigned Server Certificates – CA</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-1-6
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> GetAssignedServerCertificates
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the retrieval of certificate (signed + CA) assignment to a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment. Current time of the DUT shall be at least Jan 01, 1970.
           Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis>ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-6.5">
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and a corresponding CA certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_CACertificates"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">updatedCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">updatedCertificationPathList</emphasis> does not contain <emphasis role="italic">certPathID</emphasis> and all certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-1-6.13" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">updatedCertificationPathList</emphasis> contains certification paths other than <emphasis role="italic">certPathID</emphasis> or certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-1-6.13" />.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-6.13">
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID</emphasis>), related CA certificate (in <emphasis role="italic">certID2</emphasis>) and RSA key pair (in <emphasis role="italic">keyID2</emphasis>) and related CA-signed certificate (in <emphasis role="italic">certID1</emphasis>) and RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment2"/> to restore DUT configuration
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message(s).
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step <xref linkend="tc.ADVANCED_SECURITY-3-1-6.5" />.
          </para>
        </section>
        <!--ADVANCED_SECURITY-3-1-7-->
        <section xml:id="tc.ADVANCED_SECURITY-3-1-7">
          <title>Remove Server Certificate Assignment – self-signed</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-1-7
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> RemoveServerCertificateAssignment
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis>security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the removal of a self-signed certificate assignment on a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment.
           Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-7.5">
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client adds server certification assignment and creates related certification path (out <emphasis role="italic">certPathID</emphasis>), the self-signed certificate (out <emphasis role="italic">certID</emphasis>) and the RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_SSCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">updatedCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">updatedCertificationPathList</emphasis> does not contain <emphasis role="italic">certPathID</emphasis> and all certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, remove server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID</emphasis>), self-signed certificate (in <emphasis role="italic">certID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration, and skip other steps.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">updatedCertificationPathList</emphasis> contains certification paths other than <emphasis role="italic">certPathID</emphasis> or certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, remove server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID</emphasis>), self-signed certificate (in <emphasis role="italic">certID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration, and skip other steps.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">RemoveServerCertificateAssignment</emphasis> .
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>) and related the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">finalCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">finalCertificationPathList</emphasis> is not equal <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message(s).
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step <xref linkend="tc.ADVANCED_SECURITY-3-1-7.5" />.
          </para>
        </section>
        <!--ADVANCED_SECURITY-3-1-8-->
        <section xml:id="tc.ADVANCED_SECURITY-3-1-8">
          <title>Remove Server Certificate Assignment – CA</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-1-8
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis>RemoveServerCertificateAssignment
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the removal of certificate (signed + CA) assignment to a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment. Current time of the DUT shall be at least Jan 01, 1970.
           Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-8.5">
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and a corresponding CA certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_CACertificates"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">updatedCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">updatedCertificationPathList</emphasis> does not contain <emphasis role="italic">certPathID</emphasis> and all certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, perform steps <xref linkend="tc.ADVANCED_SECURITY-3-1-8.13" />-<xref linkend="tc.ADVANCED_SECURITY-3-1-8.15" /> to restore DUT rotings, and skip other steps.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">updatedCertificationPathList</emphasis> contains certification paths other than <emphasis role="italic">certPathID</emphasis> or certification paths from <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test, perform steps <xref linkend="tc.ADVANCED_SECURITY-3-1-8.13" />-<xref linkend="tc.ADVANCED_SECURITY-3-1-8.15" /> to restore DUT settings, and skip other steps.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-8.13">
                <para>
                  ONVIF Client invokes <emphasis role="bold">RemoveServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-8.14">
                <para>
                  The DUT responds with a <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-1-8.15">
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>), related CA certificate (in <emphasis role="italic">certID2</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID2</emphasis>) and related the CA-signed certificate (in <emphasis role="italic">certID1</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath2"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">finalCertificationPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">finalCertificationPathList</emphasis> is not equal <emphasis role="italic">initialCertificationPathList</emphasis>, FAIL the test.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> The DUT may return an empty list at step <xref linkend="tc.ADVANCED_SECURITY-3-1-8.5" />.
          </para>
        </section>
      </section>
      <!--TLS Handshaking-->
      <section xml:id="tc.advanced_security.tls_server.tsl_handshaking">
        <title>TLS Handshaking</title>
        <!--ADVANCED_SECURITY-3-2-3-->
        <section xml:id="tc.ADVANCED_SECURITY-3-2-3">
          <title>Basic TLS Handshake</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-2-3
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> execute Basic TLS Handshake
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> Check TLS handshake with certificate.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment.
           Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetNetworkProtocols</emphasis> to retrieve configured network protocols of the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols list =: <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">networkProtocolsList</emphasis> does not contain network protocol with NetworkProtocols.Name is equal to "HTTPS", FAIL the test and skip other steps.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_SelfSigned"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificateID := <emphasis role="italic">certID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        Certificate =: <emphasis role="italic">X509Cert</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID := <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  If HTTPS protocol with NetworkProtocols.Name is equal to "HTTPS" from <emphasis role="italic">networkProtocolsList</emphasis> has NetworkProtocols.Enabled equal to true, go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-3.16" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Name := HTTPS
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Enabled := true
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Port := 443
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Extension skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-3.16">
                <para>
                  ONVIF Client checks that HTTPS protocol Port is open. If HTTPS protocol <emphasis role="italic">portHTTPS</emphasis> is not open, FAIL the test and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-3.18" />.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-3.17">
                <para>
                  ONVIF Client verifies basic TLS handshake with expecting Server Certificate (in <emphasis role="italic">certPathID</emphasis>) using specified port (in <emphasis role="italic">portHTTPS</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/>.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-3.18">
                <para>
                  If HTTPS protocol with NetworkProtocols.Name is equal to "HTTPS" from <emphasis role="italic">networkProtocolsList</emphasis> has NetworkProtocols.Enabled equal to true, go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-3.22" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols list := <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-3.22">
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID</emphasis>), self-signed certificate (in <emphasis role="italic">certID</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message(s).
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetCertificateResponse</emphasis> message(s).
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message(s).
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT did not provide Basic TLS handshake at step <xref linkend="tc.ADVANCED_SECURITY-3-2-3.17" />.
                </para>
              </listitem>

            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> The corresponding to HTTPS port number (<emphasis role="italic">portHTTPS</emphasis>) from <emphasis role="italic">networkProtocolsList</emphasis> shall be used in case HTTPS protocol was enabled in <emphasis role="italic">networkProtocolsList</emphasis>. Otherwise, 443 port number shall be used.
          </para>
          <para>
            <emphasis role="bold">Note:</emphasis> If the DUT presents Certificate which is not equal to <emphasis role="italic">X509Cert</emphasis> during the <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/> execution, log WARNING message.
          </para>
          <para>
            <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
          </para>
        </section>
        <!--ADVANCED_SECURITY-3-2-4-->
        <section xml:id="tc.ADVANCED_SECURITY-3-2-4">
          <title>Basic TLS Handshake after Replace Server Certificate Assignment</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-2-4
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> ReplaceServerCertificateAssignment
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> Check TLS handshake with replaced certificate.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT.
            Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability.
            RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability.
            TLS is supported by the DUT as indicated by the TLSServerSupported capability.
            The DUT shall have enough free storage capacity for two additional RSA key pairs.
            The DUT shall have enough free storage capacity for two additional certificates.
            The DUT shall have enough free storage capacity for two additional certification paths.
            The DUT shall have enough free storage capacity for one additional server certificate assignment.
            There is no server certificate assignment at the device. 
            Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetNetworkProtocols</emphasis> to retrieve configured network protocols of the DUT.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-2-4.5">
                <para>
                  The DUT responds with a <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols list =: <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">networkProtocolsList</emphasis> does not contain network protocol with NetworkProtocols.Name is equal to "HTTPS", FAIL the test, restore the DUT state, and skip other steps.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client adds server certification assignment and creates related certification path (out <emphasis role="italic">certPathID1</emphasis>), the self-signed certificate (out <emphasis role="italic">certID1</emphasis>) and the RSA key pair (out <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_SSCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificateID := <emphasis role="italic">certID1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        Certificate =: <emphasis role="italic">X509Cert1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If HTTPS protocol with NetworkProtocols.Name is equal to "HTTPS" from <emphasis role="italic">networkProtocolsList</emphasis> has NetworkProtocols.Enabled equal to true, go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-4.16" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Name := HTTPS
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Enabled := true
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Port := 443
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Extension skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-2-4.16">
                <para>
                  ONVIF Client checks that HTTPS protocol Port is open. If HTTPS protocol <emphasis role="italic">portHTTPS</emphasis> is not open, FAIL the test, restore the DUT state, and skip other steps.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-4.17">
                <para>
                  ONVIF Client verifies basic TLS handshake with expecting Server Certificate (in <emphasis role="italic">certPathID1</emphasis>) using specified port (in <emphasis role="italic">portHTTPS</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certification path (out <emphasis role="italic">certPathID2</emphasis>) based on self-signed certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_SelfSigned"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">ReplaceServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        OldCertificationPathID =: <emphasis role="italic">certPathID1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NewCertificationPathID =: <emphasis role="italic">certPathID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">ReplaceServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificateID := <emphasis role="italic">certID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        Certificate =: <emphasis role="italic">X509Cert2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-4.26">
                <para>
                  ONVIF Client verifies basic TLS handshake with expecting Server Certificate (in <emphasis role="italic">certPathID2</emphasis>) using specified port (in <emphasis role="italic">portHTTPS</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client selects network protocol with Name ="HTTPS" in <emphasis role="italic">networkProtocolsList</emphasis> (received in step <xref linkend="tc.ADVANCED_SECURITY-3-2-4.5" />) and saves this protocol in <emphasis role="italic">HTTPProtocol</emphasis> variable.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols[0] := <emphasis role="italic">HTTPProtocol</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (<emphasis role="italic">certPathID2</emphasis>), the self-signed certificate (<emphasis role="italic">certID2</emphasis>) and the RSA key pair (<emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID1</emphasis>) and related the self-signed certificate (in <emphasis role="italic">certID1</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration.
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetCertificateResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">ReplaceServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT did not provide Basic TLS handshake at step <xref linkend="tc.ADVANCED_SECURITY-3-2-4.17" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT did not provide Basic TLS handshake at step <xref linkend="tc.ADVANCED_SECURITY-3-2-4.26" />.
                </para>
              </listitem>

            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> The corresponding to HTTPS port number (<emphasis role="italic">portHTTPS</emphasis>) from <emphasis role="italic">networkProtocolsList</emphasis> shall be used in case HTTPS protocol was enabled in <emphasis role="italic">networkProtocolsList</emphasis>. Otherwise, 443 port number shall be used.
          </para>
          <para>
            <emphasis role="bold">Note:</emphasis> If the DUT presents Certificate which is not equal to <emphasis role="italic">X509Cert</emphasis> during the <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/> execution, log WARNING message.
          </para>
          <para>
            <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
          </para>
        </section>
        <!--ADVANCED_SECURITY-3-2-5-->
        <section xml:id="tc.ADVANCED_SECURITY-3-2-5">
          <title>Basic TLS Handshake with Replace Server Certification Path and PKCS#12</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-2-5
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> UploadCertificateWithPrivateKeyInPKCS12, AddServerCertificateAssignment, ReplaceServerCertificateAssignment, GetAssignedServerCertificates
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> Verify that DUT correctly performs TLS handshake after replace of server certification path with PKCS#12.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT as indicated by the PKCS12CertificateWithRSAPrivateKeyUpload capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for two additional certification paths. The DUT shall have enough free storage capacity for one additional server certificate assignment. There is no server certificate assignment at the device.
           Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetNetworkProtocols</emphasis> to retrieve configured network protocols of the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols list =: <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">networkProtocolsList</emphasis> does not contain network protocol with NetworkProtocols.Name is equal to "HTTPS", FAIL the test and skip other steps.
                </para>
              </listitem>
              <listitem>
                <para>
                  Set
                  <itemizedlist>
                    <listitem>
                      <para>
                        <emphasis role="italic">portHTTPS</emphasis> =: <emphasis role="italic">networkProtocolsList</emphasis>.NetworkProtocols[Name = "HTTPS"].Port
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert1</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey1</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey1</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data1</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreatePKCS12WithNewCACert"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertWithPrivateKey := <emphasis role="italic">PKCS12data1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertificationPathAlias := "ONVIF_CertificationPath_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Key_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IgnoreAdditionalCertificates := false
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IntegrityPassphraseID skipped
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        EncryptionPassphraseID skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyID =: <emphasis role="italic">keyID1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID := <emphasis role="italic">certPathID1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  If HTTPS protocol with NetworkProtocols.Name is equal to "HTTPS" from <emphasis role="italic">networkProtocolsList</emphasis> has NetworkProtocols.Enabled equal to true, go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.18" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Name := HTTPS
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Enabled := true
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Port := 443
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Extension skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  Set
                  <itemizedlist>
                    <listitem>
                      <para>
                        <emphasis role="italic">portHTTPS</emphasis> =: 443
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-2-5.18">
                <para>
                  ONVIF Client checks that HTTPS protocol Port is open. If HTTPS protocol <emphasis role="italic">portHTTPS</emphasis> is not open, FAIL the test and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.36" />.
                </para>
              </listitem>
              <listitem xml:id="tc.ADVANCED_SECURITY-3-2-5.19">
                <para>
                  ONVIF Client verifies basic TLS handshake with expecting Server Certificate (in <emphasis role="italic">certPathID1</emphasis>) using specified port (in <emphasis role="italic">portHTTPS</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  If the DUT presents Certificate which is not equal to <emphasis role="italic">PKCS12data1</emphasis> during the <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/> execution, FAIL the test and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.36" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert2</emphasis>) with subject (in "CN=ONVIF TT2,C=US") and a corresponding public key (out <emphasis role="italic">publicKey2</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey2</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data2</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreatePKCS12WithNewCACert"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertWithPrivateKey := <emphasis role="italic">PKCS12data2</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertificationPathAlias := "ONVIF_CertificationPath_Test2"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Key_Test2"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IgnoreAdditionalCertificates := false
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IntegrityPassphraseID skipped
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        EncryptionPassphraseID skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID2</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyID =: <emphasis role="italic">keyID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">ReplaceServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        OldCertificationPathID =: <emphasis role="italic">certPathID1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NewCertificationPathID =: <emphasis role="italic">certPathID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">ReplaceServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">certificationPathIDList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certificationPathIDList</emphasis> contains certification path with CertificationPathID equal to <emphasis role="italic">certPathID1</emphasis>, FAIL the test and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.35" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certificationPathIDList</emphasis> does not contain certification path with CertificationPathID equal to <emphasis role="italic">certPathID2</emphasis>, FAIL the test and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.35" />.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-5.30">
                <para>
                  ONVIF Client checks that HTTPS protocol Port is open. If HTTPS protocol <emphasis role="italic">portHTTPS</emphasis> is not open, FAIL the test and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.33" />.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-5.31">
                <para>
                  ONVIF Client verifies basic TLS handshake with expecting Server Certificate (in <emphasis role="italic">certPathID2</emphasis>) using specified port (in <emphasis role="italic">portHTTPS</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  If the DUT presents Certificate which is not equal to <emphasis role="italic">X509Cert</emphasis> during the <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/> execution, FAIL the test and go to the step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.33" />.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-5.33">
                <para>
                  ONVIF Client invokes <emphasis role="bold">RemoveServerCertificateAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID := <emphasis role="italic">certPathID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-5.35">
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID2</emphasis>) and RSA key pair (in <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-2-5.36">
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID1</emphasis>) and RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols := <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message.s.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.s.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">ReplaceServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT did not provide Basic TLS handshake at Step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.19" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT did not provide Basic TLS handshake at Step <xref linkend="tc.ADVANCED_SECURITY-3-2-5.31" />.
                </para>
              </listitem>
            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> The corresponding to HTTPS port number (<emphasis role="italic">portHTTPS</emphasis>) from <emphasis role="italic">networkProtocolsList</emphasis> shall be used in case HTTPS protocol was enabled in <emphasis role="italic">networkProtocolsList</emphasis>. Otherwise, 443 port number shall be used.
          </para>
          <para>
            <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
          </para>
        </section>
      </section>
      <!--TLS client authentication-->
      <section xml:id="tc.advanced_security.tls_server.tsl_client_authentication">
        <title>TLS client authentication</title>
        <!--ADVANCED_SECURITY-3-3-1-->
        <section xml:id="tc.ADVANCED_SECURITY-3-3-1">
          <title>TLS client authentication – self-signed TLS server certificate with on-device RSA key pair</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-3-1
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> GetClientAuthenticationRequired, SetClientAuthenticationRequired, AddCertPathValidationPolicyAssignment
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the assignment of a self-signed certificate to a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. TLS client authentication is supported by the DUT as indicated by the TLSClientAuthSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment. The DUT shall have enough free storage capacity for one additional certification path validation policy. The DUT shall have enough free storage capacity for one additional certification path validation policy assignment.
           Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetNetworkProtocols</emphasis> to retrieve configured network protocols of the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols list =: <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">networkProtocolsList</emphasis> does not contain network protocol with NetworkProtocols.Name is equal to "HTTPS", FAIL the test and skip other steps.
                </para>
              </listitem>
              <listitem>
                <para>
                  Set
                  <itemizedlist>
                    <listitem>
                      <para>
                        <emphasis role="italic">portHTTPS</emphasis> =: <emphasis role="italic">networkProtocolsList</emphasis>.NetworkProtocols[Name = "HTTPS"].Port
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>

              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetClientAuthenticationRequired</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetClientAuthenticationRequiredResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        clientAuthenticationRequired =: <emphasis role="italic">clientAuthenticationRequired</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client adds server certification assignment and creates related certification path (out <emphasis role="italic">certPathID0</emphasis>), the self-signed certificate (out <emphasis role="italic">certID0</emphasis>) and the RSA key pair (out <emphasis role="italic">keyID0</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_SSCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert1</emphasis>) with subject (in "CN=ONVIF1 TT,C=US") and a corresponding public key (out <emphasis role="italic">publicKey1</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey1</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID1</emphasis>, in <emphasis role="italic">CAcert1</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID1</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certificate (out <emphasis role="italic">cert2</emphasis>) signed by private key (in <emphasis role="italic">privateKey1</emphasis>) of the CA-certificate (in <emphasis role="italic">CAcert1</emphasis>) with subject (in "CN=ONVIF2 TT,C=US") and a corresponding public key (out <emphasis role="italic">publicKey2</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey2</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateSignedCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert3</emphasis>) with subject (in "CN=ONVIF3 TT,C=US") and a corresponding public key (out <emphasis role="italic">publicKey3</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey3</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certificate (out <emphasis role="italic">cert4</emphasis>) signed by private key (in <emphasis role="italic">privateKey3</emphasis>) of the CA-certificate (in <emphasis role="italic">CAcert3</emphasis>) with subject (in "CN=ONVIF4 TT,C=US") and a corresponding public key (out <emphasis role="italic">publicKey4</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey4</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateSignedCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates certification path validation policy (out <emphasis role="italic">certPathValidationPolicyID</emphasis>) with specified alias (in "Test CertPathValidationPolicy Alias") and the certificate identifier (in <emphasis role="italic">certID1</emphasis>) for trust anchor by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertPathValidationPolicyWithCertID"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddCertPathValidationPolicyAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  If HTTPS protocol with NetworkProtocols.Name is equal to "HTTPS" from <emphasis role="italic">networkProtocolsList</emphasis> has NetworkProtocols.Enabled equal to true, go to the step <xref linkend="tc.ADVANCED_SECURITY-3-3-1.24" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Name := HTTPS
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Enabled := true
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Port := 443
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Extension skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  Set
                  <itemizedlist>
                    <listitem>
                      <para>
                        <emphasis role="italic">portHTTPS</emphasis> := 443.
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-3-1.24">
                <para>
                  If <emphasis role="italic">clientAuthenticationRequired</emphasis> is equal to false:
                  <orderedlist numeration="arabic" inheritnum="inherit">
                    <?dbfo label-width="2.5em"?>
                    <listitem>
                      <para>
                        ONVIF Client invokes <emphasis role="bold">SetClientAuthenticationRequired</emphasis> with parameters
                        <itemizedlist>
                          <listitem>
                            <para>
                              clientAuthenticationRequired := true
                            </para>
                          </listitem>
                        </itemizedlist>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        The DUT responds with a <emphasis role="bold">SetClientAuthenticationRequiredResponse</emphasis> message.
                      </para>
                    </listitem>

                  </orderedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetClientAuthenticationRequired</emphasis> through HTTPS using the client certificate <emphasis role="italic">cert2</emphasis> and port <emphasis role="italic">portHTTPS</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetClientAuthenticationRequiredResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        clientAuthenticationRequired =: <emphasis role="italic">clientAuthenticationRequired1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetClientAuthenticationRequired</emphasis> through HTTPS using the client certificate <emphasis role="italic">cert4</emphasis> and port <emphasis role="italic">portHTTPS</emphasis>.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-3-1.28">
                <para>
                  The DUT does not establish a TLS connection.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">clientAuthenticationRequired</emphasis> is equal to false:
                  <orderedlist numeration="arabic" inheritnum="inherit">
                    <?dbfo label-width="2.5em"?>
                    <listitem>
                      <para>
                        ONVIF Client invokes <emphasis role="bold">SetClientAuthenticationRequired</emphasis> with parameters
                        <itemizedlist>
                          <listitem>
                            <para>
                              clientAuthenticationRequired := false
                            </para>
                          </listitem>
                        </itemizedlist>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        The DUT responds with a <emphasis role="bold">SetClientAuthenticationRequiredResponse</emphasis> message.
                      </para>
                    </listitem>

                  </orderedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols := <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">RemoveCertPathValidationPolicyAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">RemoveCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path validation policy (in <emphasis role="italic">certPathValidationPolicyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertPathValidationPolicy"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the CA certificate (in <emphasis role="italic">certID1</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID0</emphasis>), self-signed certificate (in <emphasis role="italic">certID0</emphasis>) and RSA key pair (in <emphasis role="italic">keyID0</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">RemoveCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">SetClientAuthenticationRequiredResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT establishes a TLS connection for step <xref linkend="tc.ADVANCED_SECURITY-3-3-1.28" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetClientAuthenticationRequiredResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>

            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
          </para>
        </section>
        <!--ADVANCED_SECURITY-3-3-2-->
        <section xml:id="tc.ADVANCED_SECURITY-3-3-2">
          <title>CRL processing with on-device RSA key pair</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-3-2
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> TLS Server (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> GetClientAuthentication, SetClientAuthenticationRequired
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To test the assignment of a self-signed certificate to a TLS server.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. CRLs supported by the DUT as indicated by the MaximumNumberOfCRLs capability. TLS client authentication is supported by the DUT as indicated by the TLSClientAuthSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment. The DUT shall have enough free storage capacity for one additional certification path validation policy. The DUT shall have enough free storage capacity for one additional CRL. The DUT shall have enough free storage capacity for one additional certification path validation policy assignment.
           Network Configuration is supported by the DUT.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetNetworkProtocols</emphasis> to retrieve configured network protocols of the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols list =: <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">networkProtocolsList</emphasis> does not contain network protocol with NetworkProtocols.Name is equal to "HTTPS", FAIL the test and skip other steps.
                </para>
              </listitem>
              <listitem>
                <para>
                  Set
                  <itemizedlist>
                    <listitem>
                      <para>
                        <emphasis role="italic">portHTTPS</emphasis> =: <emphasis role="italic">networkProtocolsList</emphasis>.NetworkProtocols[Name = "HTTPS"].Port
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>

              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetClientAuthenticationRequired</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetClientAuthenticationRequiredResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        clientAuthenticationRequired =: <emphasis role="italic">clientAuthenticationRequired</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client adds server certification assignment and creates related certification path (out <emphasis role="italic">certPathID0</emphasis>), the self-signed certificate (out <emphasis role="italic">certID0</emphasis>) and the RSA key pair (out <emphasis role="italic">keyID0</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_SSCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert1</emphasis>) with subject (in "CN=ONVIF1 TT,C=US") and a corresponding public key (out <emphasis role="italic">publicKey1</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey1</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID1</emphasis>, in <emphasis role="italic">CAcert1</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID1</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certificate (out <emphasis role="italic">cert2</emphasis>) signed by private key (in <emphasis role="italic">privateKey1</emphasis>) of the CA-certificate (in <emphasis role="italic">CAcert1</emphasis>) with subject (in "CN=ONVIF2 TT,C=US") and a corresponding public key (out <emphasis role="italic">publicKey2</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey2</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateSignedCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a certificate (out <emphasis role="italic">cert3</emphasis>) signed by private key (in <emphasis role="italic">privateKey1</emphasis>) of the CA-certificate (in <emphasis role="italic">CAcert1</emphasis>) with subject (in "CN=ONVIF3 TT,C=US") and a corresponding public key (out <emphasis role="italic">publicKey3</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey3</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateSignedCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CRL (out <emphasis role="italic">crl</emphasis>) for certificate revocation (in <emphasis role="italic">cert3</emphasis>) signed by private key (in <emphasis role="italic">privateKey1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCRLForCertificate"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client uploads a CRL (in <emphasis role="italic">crl</emphasis>) with alias (in "ONVIF_CRL_Test") identifier (out <emphasis role="italic">crlID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCRL"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates certification path validation policy (out <emphasis role="italic">certPathValidationPolicyID</emphasis>) with specified alias (in "Test CertPathValidationPolicy Alias") and the certificate identifier (in <emphasis role="italic">certID1</emphasis>) for trust anchor by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertPathValidationPolicyWithCertID"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddCertPathValidationPolicyAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  If HTTPS protocol with NetworkProtocols.Name is equal to "HTTPS" from <emphasis role="italic">networkProtocolsList</emphasis> has NetworkProtocols.Enabled equal to true, go to the step <xref linkend="tc.ADVANCED_SECURITY-3-3-2.25" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Name := HTTPS
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Enabled := true
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Port := 443
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NetworkProtocols[0].Extension skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  Set
                  <itemizedlist>
                    <listitem>
                      <para>
                        <emphasis role="italic">portHTTPS</emphasis> := 443.
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-3-2.25">
                <para>
                  If <emphasis role="italic">clientAuthenticationRequired</emphasis> is equal to false:
                  <orderedlist numeration="arabic" inheritnum="inherit">
                    <?dbfo label-width="2.5em"?>
                    <listitem>
                      <para>
                        ONVIF Client invokes <emphasis role="bold">SetClientAuthenticationRequired</emphasis> with parameters
                        <itemizedlist>
                          <listitem>
                            <para>
                              clientAuthenticationRequired := true
                            </para>
                          </listitem>
                        </itemizedlist>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        The DUT responds with a <emphasis role="bold">SetClientAuthenticationRequiredResponse</emphasis> message.
                      </para>
                    </listitem>

                  </orderedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetClientAuthenticationRequired</emphasis> through HTTPS using the client certificate <emphasis role="italic">cert2</emphasis> and port <emphasis role="italic">portHTTPS</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetClientAuthenticationRequiredResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        clientAuthenticationRequired =: <emphasis role="italic">clientAuthenticationRequired1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetClientAuthenticationRequired</emphasis> through HTTPS using the client certificate <emphasis role="italic">cert3</emphasis> and port <emphasis role="italic">portHTTPS</emphasis>.
                </para>
              </listitem>
              <listitem  xml:id="tc.ADVANCED_SECURITY-3-3-2.29">
                <para>
                  The DUT does not establish a TLS connection.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">clientAuthenticationRequired</emphasis> is equal to false:
                  <orderedlist numeration="arabic" inheritnum="inherit">
                    <?dbfo label-width="2.5em"?>
                    <listitem>
                      <para>
                        ONVIF Client invokes <emphasis role="bold">SetClientAuthenticationRequired</emphasis> with parameters
                        <itemizedlist>
                          <listitem>
                            <para>
                              clientAuthenticationRequired := false
                            </para>
                          </listitem>
                        </itemizedlist>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        The DUT responds with a <emphasis role="bold">SetClientAuthenticationRequiredResponse</emphasis> message.
                      </para>
                    </listitem>

                  </orderedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        NetworkProtocols := <emphasis role="italic">networkProtocolsList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">RemoveCertPathValidationPolicyAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">RemoveCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path validation policy (in <emphasis role="italic">certPathValidationPolicyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertPathValidationPolicy"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the CRL (in <emphasis role="italic">crlID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCRL"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the CA certificate (in <emphasis role="italic">certID1</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client removes server certification assignment and deletes related certification path (in <emphasis role="italic">certPathID0</emphasis>), self-signed certificate (in <emphasis role="italic">certID0</emphasis>) and RSA key pair (in <emphasis role="italic">keyID0</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRemoveServerCertificateAssignment"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">RemoveCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">SetClientAuthenticationRequiredResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT establishes a TLS connection for step <xref linkend="tc.ADVANCED_SECURITY-3-3-2.29" />.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetClientAuthenticationRequiredResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message.
                </para>
              </listitem>

            </itemizedlist>
          </para>

          <para>
            <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
          </para>

        </section>
        <!--ADVANCED_SECURITY-3-3-3-->
        <section xml:id="tc.ADVANCED_SECURITY-3-3-3">
          <title>Replace certification path validation policy assignment</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-3-3-3
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> Certification Path Validation Policy Management (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> ReplaceCertPathValidationPolicyAssignment, GetAssignedCertPathValidationPolicies
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> Verify that DUT correctly supports replacing certification path validation policy assignments.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Certification path validation policy supported by the DUT as indicated by the MaximumNumberOfCertificationPathValidationPolicies capability. TLS client authentication is supported by the DUT as indicated by the TLSClientAuthSupported capability. The DUT shall have enough free storage capacity for two additional certification path validation policies. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path validation policy assignment.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>

              <listitem>
                <para>
                  ONVIF Client creates certification path validation policy identifier (out <emphasis role="italic">certPathValidationPolicyID1</emphasis>) with specified alias (in "Test CertPathValidationPolicy1 Alias"), related certificate (out <emphasis role="italic">certID</emphasis>), RSA key pair (out <emphasis role="italic">keyID</emphasis>) and certification path if any (out <emphasis role="italic">certificationPathID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertPathValidationPolicy"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates certification path validation policy identifier (out <emphasis role="italic">certPathValidationPolicyID2</emphasis>) with specified alias (in "Test CertPathValidationPolicy2 Alias") and the certificate identifier (in <emphasis role="italic">certID</emphasis>) for trust anchor by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertPathValidationPolicyWithCertID"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">AddCertPathValidationPolicyAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with an <emphasis role="bold">AddCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">ReplaceCertPathValidationPolicyAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        OldCertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        NewCertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">ReplaceCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAssignedCertPathValidationPolicies</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAssignedCertPathValidationPoliciesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID list =: <emphasis role="italic">certPathValidationPolicyIDList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certPathValidationPolicyIDList</emphasis> contains CertPathValidationPolicyID equal to <emphasis role="italic">certPathValidationPolicyID1</emphasis>, FAIL the test and go to the step 14.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certPathValidationPolicyIDList</emphasis> does not contain CertPathValidationPolicyID equal to <emphasis role="italic">certPathValidationPolicyID2</emphasis>, FAIL the test and go to the step 19.
                </para>
              </listitem>
              <listitem>
                <para>
                  Go to the step 17.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">RemoveCertPathValidationPolicyAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID1</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">RemoveCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  Go to the step 19.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">RemoveCertPathValidationPolicyAssignment</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">RemoveCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">DeleteCertPathValidationPolicy</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID2</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT responds with a <emphasis role="bold">DeleteCertPathValidationPolicyResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path validation policy (in <emphasis role="italic">certPathValidationPolicyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertPathValidationPolicy"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certificationPathID</emphasis> is null:
                  <orderedlist numeration="arabic" inheritnum="inherit">
                    <?dbfo label-width="2.5em"?>
                    <listitem>
                      <para>
                        ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/>.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Skip other steps.
                      </para>
                    </listitem>
                  </orderedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certificationPathID</emphasis> is not null:
                  <orderedlist numeration="arabic" inheritnum="inherit">
                    <?dbfo label-width="2.5em"?>
                    <listitem>
                      <para>
                        ONVIF Client deletes the certification path (in <emphasis role="italic">certificationPathID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration.
                      </para>
                    </listitem>
                  </orderedlist>
                </para>
              </listitem>

            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">AddCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">ReplaceCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAssignedCertPathValidationPoliciesResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">RemoveCertPathValidationPolicyAssignmentResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">DeleteCertPathValidationPolicyResponse</emphasis> message.
                </para>
              </listitem>

            </itemizedlist>
          </para>

        </section>
      </section>
    </section>
    <!--Referential Integrity-->
    <section xml:id="tc.advanced_security.referential_integrity" xreflabel="Section 5.4">
      <title>Referential Integrity</title>
      <!--ADVANCED_SECURITY-4-1-1-->
      <section xml:id="tc.ADVANCED_SECURITY-4-1-1">
        <title>TLS Server Certificate - self-signed</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-4-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification), Certificate Management (ONVIF Security Configuration Service Specification), TLS Server (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteKey, DeleteCertificate. DeleteCertificationPath
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To test the referential integrity of certificate assigned to a TLS server.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment.
         Network Configuration is supported by the DUT.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds server certification assignment and creates related certification path (out <emphasis role="italic">certPathID</emphasis>), the self-signed certificate (out <emphasis role="italic">certID</emphasis>) and the RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_SSCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">RemoveServerCertificateAssignment</emphasis> .
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send the env:Receiver/ter:Action/ter:NoMatchingPrivateKey SOAP 1.2 fault message(s).
              </para>
            </listitem>


          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-4-1-2-->
      <section xml:id="tc.ADVANCED_SECURITY-4-1-2">
        <title>TLS Server Certificate – CA</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-4-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification), Certificate Management (ONVIF Security Configuration Service Specification), TLS Server (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteKey, DeleteCertificate. DeleteCertificationPath
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis>To test the referential integrity of certificate assigned to a TLS server.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional server certificate assignment. Current time of the DUT shall be at least Jan 01, 1970.
         Network Configuration is supported by the DUT.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client disables HTTPS and removes Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperPreparationRemoveServerCertificateAssignment"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and a corresponding CA certificate (out <emphasis role="italic">certID2</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_CACertificates"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID := <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">RemoveServerCertificateAssignment</emphasis> .
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificateID =: <emphasis role="italic">certID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      KeyID =: <emphasis role="italic">keyID2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns env:Sender/ter:InvalidArgVal/ter:ReferenceExists SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID1</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID2</emphasis>) and related RSA key pair (in <emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client restores HTTPS and Server Certificate Assignment if required by following the procedure mentioned in <xref linkend="Annex_HelperRestoreServerCertificateAssignment"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialHTTPSState</emphasis> - initial HTTPS State
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">certPathID</emphasis> - removed Server Certificate Assignment
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send the env:Receiver/ter:Action/ter:NoMatchingPrivateKey SOAP 1.2 fault message(s).
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
    </section>
    <!--Capabilities-->
    <section xml:id="tc.advanced_security.capabilities" xreflabel="Section 5.5">
      <title>Capabilities</title>
      <!--ADVANCED_SECURITY-5-1-1-->
      <section xml:id="tc.ADVANCED_SECURITY-5-1-1">
        <title>Security Configuration Service Capabilities</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-5-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Capabilities (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetServiceCapabilities (for Security Configuration Service)
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify DUT Security Configuration Service Capabilities.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>

        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetServiceCapabilities</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Capabilities =: <emphasis role="italic">cap</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificates > 0:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfKeys &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificationPaths > 0:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificates &lt; 2 or skipped, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.RSAKeyPairGeneration = true:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.RSAKeyLenghts is empty or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfKeys &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS8RSAKeyPairUpload = true:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfPassphrases &lt; 1 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfKeys &lt; 1 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.RSAKeyLenghts is empty or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PasswordBasedEncryptionAlgorithms is empty or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PasswordBasedEncryptionAlgorithms does not contain "pbeWithSHAAnd3-KeyTripleDES-CBC" item, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS12CertificateWithRSAPrivateKeyUpload = true:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfPassphrases &lt; 1 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfKeys &lt; 2 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificates &lt; 2 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificationPaths &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list is empty, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.RSAKeyLenghts is empty or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PasswordBasedEncryptionAlgorithms is empty or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PasswordBasedEncryptionAlgorithms does not contain "pbeWithSHAAnd3-KeyTripleDES-CBC" item, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PasswordBasedMACAlgorithms is empty or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PasswordBasedMACAlgorithms does not contain "hmacWithSHA256" item, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.X509Versions is empty or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.X509Versions does not contain "3" item, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list does not contain item with algorithm = "1.2.840.113549.1.1.5" (OID of SHA-1 with RSA Encryption algorithm), FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list does not contain item with algorithm = "1.2.840.113549.1.1.11" (OID of SHA-256 with RSA Encryption algorithm), FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS10ExternalCertificationWithRSA = true:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.RSAKeyPairGeneration = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS8RSAKeyPairUpload = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS12CertificateWithRSAPrivateKeyUpload = false or skipped), FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list is empty, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfKeys &lt; 2 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificates &lt; 2 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificationPaths &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list does not contain item with algorithm = "1.2.840.113549.1.1.5" (OID of SHA-1 with RSA Encryption algorithm), FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list does not contain item with algorithm = "1.2.840.113549.1.1.11" (OID of SHA-256 with RSA Encryption algorithm), FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SelfSignedCertificateCreationWithRSA = true:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.RSAKeyPairGeneration = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS8RSAKeyPairUpload = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS12CertificateWithRSAPrivateKeyUpload = false or skipped), FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificates &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list is empty, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list does not contain item with algorithm = "1.2.840.113549.1.1.5" (OID of SHA-1 with RSA Encryption algorithm), FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SignatureAlgorithms list does not contain item with algorithm = "1.2.840.113549.1.1.11" (OID of SHA-256 with RSA Encryption algorithm), FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificationPathValidationPolicies > 0:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SelfSignedCertificateCreationWithRSA = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS10ExternalCertificationWithRSA = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS12CertificateWithRSAPrivateKeyUpload = false or skipped), FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported is not empty:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported does not contain at least one value, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificationPaths &lt; 2 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.MaximumNumberOfTLSCertificationPaths &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS10ExternalCertificationWithRSA = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SelfSignedCertificateCreationWithRSA = false or skipped), FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSClientAuthSupported = true:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported is empty, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificationPathValidationPolicies &lt; 2 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.MaximumNumberOfTLSCertificationPathValidationPolicies &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCRLs &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.MaximumNumberOfTLSCertificationPathValidationPolicies > 0:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificationPathValidationPolicies &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported is not empty and <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS10ExternalCertificationWithRSA = true:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificates &lt; 3 or skipped, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.MaximumNumberOfTLSCertificationPaths > 0:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.MaximumNumberOfCertificationPaths &lt;= 0 or skipped, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>



          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-5-1-2-->
      <section xml:id="tc.ADVANCED_SECURITY-5-1-2">
        <title>Get Services and Get Security Configuration Service Capabilities Consistency</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-5-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Capability exchange (ONVIF Core Specification), Capabilities (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetServices, GetServiceCapabilities (for Security Configuration Service)
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> devicemgmt.wsdl, security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Services and Security Configuration Service Capabilities consistency.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>

        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetServices</emphasis>.
                <itemizedlist>
                  <listitem>
                    <para>
                      IncludeCapability =: true
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Services list =: <emphasis role="italic">servicesList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects Service with Service.Namespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl":
                <itemizedlist>
                  <listitem>
                    <para>
                      Services list [Namespace = "http://www.onvif.org/ver10/advancedsecurity/wsdl"] =: <emphasis role="italic">securityConfigurationService</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetServiceCapabilities</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Capabilities =: <emphasis role="italic">cap</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If cap differs from <emphasis role="italic">securityConfigurationService</emphasis>.Capabilities.Capabilities, FAIL the test.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step 8:
          <itemizedlist>
            <listitem>
              <para>
                KeystoreCapabilities:
                <itemizedlist>
                  <listitem>
                    <para>
                      SignatureAlgorithms
                      <itemizedlist>
                        <listitem>
                          <para>
                            algorithm
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            parameters
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaximumNumberOfKeys
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaximumNumberOfCertificates
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaximumNumberOfCertificationPaths
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RSAKeyPairGeneration
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RSAKeyLengths
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PKCS10ExternalCertificationWithRSA
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SelfSignedCertificateCreationWithRSA
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      X509Versions
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaximumNumberOfPassphrases
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PKCS8RSAKeyPairUpload
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PKCS12CertificateWithRSAPrivateKeyUpload
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PasswordBasedEncryptionAlgorithms
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PasswordBasedMACAlgorithms
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaximumNumberOfCRLs
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaximumNumberOfCertificationPathValidationPolicies
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EnforceTLSWebClientAuthExtKeyUsage
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <listitem>
              <para>
                TLSServerCapabilities
                <itemizedlist>
                  <listitem>
                    <para>
                      TLSServerSupported
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaximumNumberOfTLSCertificationPaths
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TLSClientAuthSupported
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MaximumNumberOfTLSCertificationPathValidationPolicies
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <!--Off-Device Key Generation Operations-->
    <section xml:id="tc.advanced_security.offdevice_key_generation_operations" xreflabel="Section 5.6">
      <title>Off-Device Key Generation Operations</title>
      <!--Passphrase Management-->
      <section xml:id="tc.advanced_security.offdevice_key_generation_operations.passphrase_management">
        <title>Passphrase Management</title>
        <!--ADVANCED_SECURITY-6-1-1-->
        <section xml:id="tc.ADVANCED_SECURITY-6-1-1">
          <title>Upload Passphrase</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-6-1-1
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> Passphrase Management (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> UploadPassphrase (for Security Configuration Service)
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To verify whether passphrases can be uploaded correctly.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Passphrase handling is supported by the DUT as indicated by the MaximumNumberOfPassphrases > 0 capability. The DUT shall have enough free storage capacity for one additional passphrase.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client generates an encryption passphrase <emphasis role="italic">passphrase1</emphasis> (see <xref linkend="Annex_PassphrasesForTestCases"/>).
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadPassphrase</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        Passphrase =: <emphasis role="italic">passphrase1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Passphrase_Test"
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">UploadPassphraseResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        PassphraseID =: <emphasis role="italic">passphraseID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAllPassphrases</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAllPassphrasesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        PassphraseAttribute list =: <emphasis role="italic">passphraseAttributeList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">passphraseAttributeList</emphasis> does not contain passphrase with PassphraseID equal to <emphasis role="italic">passphraseID</emphasis>, FAIL the test, and go to the step 10.
                </para>
              </listitem>
              <listitem>
                <para>
                  If passphrase with PassphraseID equal to <emphasis role="italic">passphraseID</emphasis> from <emphasis role="italic">passphraseAttributeList</emphasis> has Alias skipped or other than "ONVIF_Passphrase_Test", FAIL the test, and go to the step 10.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the passphrase (in <emphasis role="italic">passphraseID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeletePassphrase"/> to restore DUT configuration.
                </para>
              </listitem>

            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">UploadPassphraseResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAllPassphrasesResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

        </section>
        <!--ADVANCED_SECURITY-6-1-2-->
        <section xml:id="tc.ADVANCED_SECURITY-6-1-2">
          <title>Delete Passphrase</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-6-1-2
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> Passphrase Management (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> DeletePassphrase
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To verify that a passphrase can be deleted correctly.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Passphrase handling is supported by the DUT as indicated by the MaximumNumberOfPassphrases > 0 capability. The DUT shall have enough free storage capacity for one additional passphrase.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client generates an encryption passphrase <emphasis role="italic">passphrase1</emphasis> (see <xref linkend="Annex_PassphrasesForTestCases"/>).
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadPassphrase</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        Passphrase =: <emphasis role="italic">passphrase1</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Passphrase_Test"
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">UploadPassphraseResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        PassphraseID =: <emphasis role="italic">passphraseID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">DeletePassphrase</emphasis> with parameters
                </para>
                <itemizedlist>
                  <listitem>
                    <para>
                      PassphraseID =: <emphasis role="italic">passphraseID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">DeletePassphraseResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAllPassphrases</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAllPassphrasesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        PassphraseAttribute list =: <emphasis role="italic">passphraseAttributeList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">passphraseAttributeList</emphasis> contains passphrase with PassphraseID equal to <emphasis role="italic">passphraseID</emphasis>, FAIL the test.
                </para>
              </listitem>


            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">UploadPassphraseResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAllPassphrasesResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">DeletePassphraseResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

        </section>
      </section>
      <!--Key Management-->
      <section xml:id="tc.advanced_security.offdevice_key_generation_operations.key_management">
        <title>Key Management</title>
        <!--ADVANCED_SECURITY-6-2-1-->
        <section xml:id="tc.ADVANCED_SECURITY-6-2-1">
          <title>Upload PKCS8 – no key pair exists</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-6-2-1
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> UploadKeyPairInPKCS8
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To verify that a PKCS#8 data structure with new public key and private key can be uploaded correctly.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. RSA key pair in a PKCS#8 data structure upload is supported by the DUT as indicated by the PKCS8RSAKeyPairUpload capability. The DUT shall have enough free storage capacity for one additional RSA key pair.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client generates a PKCS#8 data structure (out <emphasis role="italic">keyPairInPKCS8</emphasis>) with new RSA key pair (pubic key (out <emphasis role="italic">publicKey</emphasis>) and private key (out <emphasis role="italic">privateKey</emphasis>)) by following the procedure mentioned in <xref linkend="Annex_HelperCreatePKCS8WithNewKeyPair"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadKeyPairInPKCS8</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        KeyPair := <emphasis role="italic">keyPairInPKCS8</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Alias := "ONVIF_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        EncryptionPassphraseID skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">UploadKeyPairInPKCS8Response</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        KeyID =: <emphasis role="italic">keyID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        KeyAttribute list =: <emphasis role="italic">keyList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">keyList</emphasis> does not contain KeyAttribute.KeyID =: <emphasis role="italic">keyID</emphasis>, FAIL the test, and go to the step 11.
                </para>
              </listitem>
              <listitem>
                <para>
                  If KeyAttribute from <emphasis role="italic">keyList</emphasis> with KeyAttribute.KeyID =: <emphasis role="italic">keyID</emphasis> has KeyAttribute.hasPrivateKey element that is not equal to <emphasis role="italic">true</emphasis> or missed, FAIL the test, and go to the step 11.
                </para>
              </listitem>
              <listitem>
                <para>
                  If KeyAttribute from <emphasis role="italic">keyList</emphasis> with KeyAttribute.KeyID =: <emphasis role="italic">keyID</emphasis> has KeyAttribute.KeyStatus value other than "ok", FAIL the test, and go to the step 11.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
                </para>
              </listitem>

            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">UploadKeyPairInPKCS8Response</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAllKeysResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>


        </section>
        <!--ADVANCED_SECURITY-6-2-2-->
        <section xml:id="tc.ADVANCED_SECURITY-6-2-2">
          <title>Upload PKCS8 – decryption fails</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-6-2-2
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> Key Management (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> UploadKeyPairInPKCS8
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To verify that a DecryptionFailed fault is produced when wrong decryption passphrase is used.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. RSA key pair in a PKCS#8 data structure upload is supported by the DUT as indicated by the PKCS8RSAKeyPairUpload capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional passphrase.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client generates an encryption passphrases <emphasis role="italic">passphrase1</emphasis> and <emphasis role="italic">passphrase2</emphasis> (see <xref linkend="Annex_PassphrasesForTestCases"/>)
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client generates a PKCS#8 data structure (out <emphasis role="italic">keyPairInPKCS8</emphasis>) with new RSA key pair (pubic key (out <emphasis role="italic">publicKey</emphasis>) and private key (out <emphasis role="italic">privateKey</emphasis>)) with encryption passphrase (in <emphasis role="italic">passphrase1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreatePKCS8WithNewKeyPairWithPassphrase"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadPassphrase</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        Passphrase := <emphasis role="italic">passphrase2</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Passphrase_Test"
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">UploadPassphraseResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        PassphraseID =: <emphasis role="italic">passphraseID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadKeyPairInPKCS8</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        KeyPair := <emphasis role="italic">keyPairInPKCS8</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        Alias := "ONVIF_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        EncryptionPassphraseID := <emphasis role="italic">passphraseID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT returns env:Sender/ter:InvalidArgVal/ter:DecryptionFailed SOAP 1.2 fault.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the passphrase (in <emphasis role="italic">passphraseID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeletePassphrase"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  If the DUT responds with an <emphasis role="bold">UploadKeyPairInPKCS8Response</emphasis> message with KeyID =: <emphasis role="italic">keyID</emphasis>, delete the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
                </para>
              </listitem>

            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">UploadPassphrase</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did send <emphasis role="bold">UploadKeyPairInPKCS8</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT did not send the env:Sender/ter:InvalidArgVal/ter:DecryptionFailed SOAP 1.2 fault message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

        </section>
      </section>
      <!--Certificate Management-->
      <section xml:id="tc.advanced_security.offdevice_key_generation_operations.certificate_management">
        <title>Certificate Management</title>
        <!--ADVANCED_SECURITY-6-3-1-->
        <section xml:id="tc.ADVANCED_SECURITY-6-3-1">
          <title>Upload PKCS12 – no key pair exists</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-6-3-1
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> UploadCertificateWithPrivateKeyInPKCS12
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To verify that a PKCS#12 data structure with new public key and private key can be uploaded correctly.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT as indicated by the PKCS12CertificateWithRSAPrivateKeyUpload capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreatePKCS12WithNewCACert"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertWithPrivateKey := <emphasis role="italic">PKCS12data</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertificationPathAlias := "ONVIF_Certification_Path_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Key_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IgnoreAdditionalCertificates := false
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IntegrityPassphraseID skipped
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        EncryptionPassphraseID skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyID =: <emphasis role="italic">keyID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAllKeys</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAllKeysResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        KeyAttribute list =: <emphasis role="italic">keyList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">keyList</emphasis> does not contain key with KeyID equal to <emphasis role="italic">keyID</emphasis>, FAIL the test, and go to the step 19.
                </para>
              </listitem>
              <listitem>
                <para>
                  If key with KeyID equal to <emphasis role="italic">keyID</emphasis> from <emphasis role="italic">keyList</emphasis> has hasPrivateKey equal to false or has skipped hasPrivateKey, FAIL the test, and go to the step 19.
                </para>
              </listitem>
              <listitem>
                <para>
                  If key with KeyID equal to <emphasis role="italic">keyID</emphasis> from <emphasis role="italic">keyList</emphasis> has Alias skipped or other than "ONVIF_Key_Test", FAIL the test, and go to the step 19.
                </para>
              </listitem>
              <listitem>
                <para>
                  If key with KeyID equal to <emphasis role="italic">keyID</emphasis> from <emphasis role="italic">keyList</emphasis> has KeyStatus other than "ok", FAIL the test, and go to the step 19.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAllCertificationPaths</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID list =: <emphasis role="italic">certPathList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certPathList</emphasis> does not contain certification path with CertificationPathID equal to <emphasis role="italic">certPathID</emphasis>, FAIL the test, and go to the step 19.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetCertificationPath</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetCertificationPathResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPath.CertificateID[0] =: <emphasis role="italic">certID</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertificationPath.Alias =: <emphasis role="italic">CertPathAlias</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">CertPathAlias</emphasis> Alias skipped or other than "ONVIF_CertificationPath_Test", FAIL the test, and go to the step 20.
                </para>
              </listitem>
              <listitem>
                <para>
                  If received CertificationPath contains more than one CertificateID item, FAIL the test, and go to the step 20.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration and finish the test.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>) and related CA certificate (in <emphasis role="italic">certID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/> to restore DUT configuration.
                </para>
              </listitem>

            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAllKeysResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAllCertificationPathsResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetCertificationPathResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>

        </section>
        <!--ADVANCED_SECURITY-6-3-2-->
        <section xml:id="tc.ADVANCED_SECURITY-6-3-2">
          <title>Upload PKCS12 – decryption fails</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-6-3-2
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> UploadCertificateWithPrivateKeyInPKCS12
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> To verify that a DecryptionFailed fault is produced when wrong decryption passphrase is used.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT as indicated by the PKCS12CertificateWithRSAPrivateKeyUpload capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional passphrase.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client generates an encryption passphrases <emphasis role="italic">passphrase1</emphasis> and <emphasis role="italic">passphrase2</emphasis> (see <xref linkend="Annex_PassphrasesForTestCases"/>)
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) encrypted with passphrase (in <emphasis role="italic">passphrase1</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreatePKCS12WithNewCACertWithPassphrase"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadPassphrase</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        Passphrase =: <emphasis role="italic">passphrase2</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Passphrase_Test"
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">UploadPassphraseResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        PassphraseID =: <emphasis role="italic">passphraseID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertWithPrivateKey := <emphasis role="italic">PKCS12data</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertificationPathAlias := "ONVIF_CertificationPath_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Key_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IgnoreAdditionalCertificates := false
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IntegrityPassphraseID skipped
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        EncryptionPassphraseID =: <emphasis role="italic">passphraseID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT returns env:Sender\ter:InvalidArgVal\ter:DecryptionFailed SOAP 1.2 fault.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the passphrase (in <emphasis role="italic">passphraseID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeletePassphrase"/> to restore DUT configuration.
                </para>
              </listitem>
              <listitem>
                <para>
                  If the DUT responds with an <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message. (CertificationPathID =: <emphasis role="italic">certPathID</emphasis>, KeyID =: <emphasis role="italic">keyID</emphasis>), ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration and finish the test.
                </para>
              </listitem>

            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">UploadPassphrase</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did send <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:DecryptionFailed</emphasis> SOAP 1.2 fault.
                </para>
              </listitem>
            </itemizedlist>
          </para>


        </section>
        <!--ADVANCED_SECURITY-6-3-4-->
        <section xml:id="tc.ADVANCED_SECURITY-6-3-4">
          <title>Upload PKCS12 - verify key and certificate</title>
          <para>
            <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-6-3-4
          </para>
          <para>
            <emphasis role="bold">Specification Coverage:</emphasis> Certificate Management (ONVIF Security Configuration Service Specification)
          </para>
          <para>
            <emphasis role="bold">Feature under test:</emphasis> UploadCertificateWithPrivateKeyInPKCS12, GetKeyStatus, GetCertificate, GetAllCertificates
          </para>
          <para>
            <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
          </para>
          <para>
            <emphasis role="bold">Test Purpose:</emphasis> Verify that the DUT correctly integrates keys and certificates, which have been uploaded in a PKCS#12 data structure, into the keystore.
          </para>
          <para>
            <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT as indicated by the PKCS12CertificateWithRSAPrivateKeyUpload capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path.
          </para>
          <para>
            <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
          </para>
          <para>
            <emphasis role="bold">Test Procedure:</emphasis>
          </para>
          <para>
            <orderedlist>
              <?dbfo label-width="1.5em"?>
              <listitem>
                <para>
                  Start an ONVIF Client.
                </para>
              </listitem>
              <listitem>
                <para>
                  Start the DUT.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreatePKCS12WithNewCACert"/>.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertWithPrivateKey := <emphasis role="italic">PKCS12data</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertificationPathAlias := "ONVIF_Certification_Path_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyAlias := "ONVIF_Key_Test"
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IgnoreAdditionalCertificates := false
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        IntegrityPassphraseID skipped
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        EncryptionPassphraseID skipped
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        KeyID =: <emphasis role="italic">keyID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetKeyStatus</emphasis> with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        KeyID := <emphasis role="italic">keyID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with <emphasis role="bold">GetKeyStatusResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        KeyStatus =: <emphasis role="italic">keyStatus</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">keyStatus</emphasis> is not equal to "ok", FAIL the test, and go to the step 23.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetCertificationPath</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetCertificationPathResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificationPath.CertificateID list =: <emphasis role="italic">certIDList</emphasis>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        CertificationPath.Alias
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certIDList</emphasis> contains more item than one, FAIL the test and go to the step 23.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetAllCertificates</emphasis>.
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetAllCertificatesResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificateID list =: <emphasis role="italic">certificateList</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">certificateList</emphasis> does not contain certificate with Certificate.CertificateID equal to <emphasis role="italic">certIDList</emphasis>[0], FAIL the test and go to the step 23.
                </para>
              </listitem>
              <listitem>
                <para>
                  Set:
                  <itemizedlist>
                    <listitem>
                      <para>
                        <emphasis role="italic">certificateList</emphasis>.Certificate[CertificateID = <emphasis role="italic">certIDList</emphasis>[0]] =: <emphasis role="italic">X509Cert</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">X509Cert</emphasis>.KeyID is not equal to <emphasis role="italic">keyID</emphasis>, FAIL the test and go to the step 23.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">X509Cert</emphasis>.CertificateContent is not equal to <emphasis role="italic">CAcert</emphasis>, FAIL the test and go to the step 23.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        CertificateID := <emphasis role="italic">certIDList</emphasis>[0]
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                  <itemizedlist>
                    <listitem>
                      <para>
                        Certificate =: <emphasis role="italic">X509Cert</emphasis>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">X509Cert</emphasis>.CertificateID is not equal to <emphasis role="italic">certIDList</emphasis>[0], FAIL the test and go to the step 23.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">X509Cert</emphasis>.KeyID is not equal to <emphasis role="italic">keyID</emphasis>, FAIL the test and go to the step 23.
                </para>
              </listitem>
              <listitem>
                <para>
                  If <emphasis role="italic">X509Cert</emphasis>.CertificateContent is not equal to <emphasis role="italic">CAcert</emphasis>, FAIL the test and go to the step 23.
                </para>
              </listitem>
              <listitem>
                <para>
                  ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration and skip other steps.
                </para>
              </listitem>


            </orderedlist>
          </para>
          <para>
            <emphasis role="bold">Test Result:</emphasis>
          </para>
          <para>
            <emphasis role="bold">PASS –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT passes all assertions.
                </para>
              </listitem>
            </itemizedlist>
          </para>
          <para>
            <emphasis role="bold">FAIL –</emphasis>
            <itemizedlist>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetKeyStatusResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetCertificationPathResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetAllCertificatesResponse</emphasis> message.
                </para>
              </listitem>
              <listitem>
                <para>
                  DUT did not send <emphasis role="bold">GetCertificateResponse</emphasis> message.
                </para>
              </listitem>
            </itemizedlist>
          </para>


        </section>
      </section>
    </section>
    <!--Certificate-based Client Authentication-->
    <section xml:id="tc.advanced_security.certificatebased_client_authentication" xreflabel="Section 5.7">
      <title>Certificate-based Client Authentication</title>
      <!--ADVANCED_SECURITY-8-1-1-->
      <section xml:id="tc.ADVANCED_SECURITY-8-1-1">
        <title>Upload CRL</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-8-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CRL Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> UploadCRL, GetAllCRLs
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that CRLs can be uploaded to the DUT.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. CRLs supported by the DUT as indicated by the MaximumNumberOfCRLs capability. The DUT shall have enough free storage capacity for one additional CRL.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CRL (out <emphasis role="italic">crl</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCRL"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">UploadCRL</emphasis> with parameter
                <itemizedlist>
                  <listitem>
                    <para>
                      Crl =: <emphasis role="italic">crl</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Alias := "ONVIF_CRL_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      anyParameters skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">UploadCRLResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CrlID =: <emphasis role="italic">crlID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCRLs</emphasis>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCRLsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CrlID list =: <emphasis role="italic">crlList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">crlList</emphasis> does not contain <emphasis role="italic">crlID</emphasis>, FAIL the test, and go to the step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">crlList</emphasis>[CRLID = <emphasis role="italic">crlID</emphasis>].Alias is not equal to "ONVIF_CRL_Test", FAIL the test, and go to the step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">crlList</emphasis>[CRLID = <emphasis role="italic">crlID</emphasis>].CRLContent is not equal to <emphasis role="italic">crl</emphasis>, FAIL the test, and go to the step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CRL (in <emphasis role="italic">crlID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCRL"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">UploadCRLResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCRLsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>


      </section>
      <!--ADVANCED_SECURITY-8-1-2-->
      <section xml:id="tc.ADVANCED_SECURITY-8-1-2">
        <title>Delete CRL</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-8-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CRL Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteCRL, GetAllCRLs
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that CRLs can be deleted from the DUT.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. CRLs supported by the DUT as indicated by the MaximumNumberOfCRLs capability. The DUT shall have enough free storage capacity for one additional CRL.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CRL (out <emphasis role="italic">crl</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCRL"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client uploads a CRL (in <emphasis role="italic">crl</emphasis>) with alias (in "ONVIF_CRL_Test") identifier (out <emphasis role="italic">crlID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCRL"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCRL</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CrlID =: <emphasis role="italic">crlID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCRLResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCRLs</emphasis>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCRLsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CrlID list =: <emphasis role="italic">crlList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">crlList</emphasis> contains <emphasis role="italic">crlID</emphasis>, FAIL the test
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCRLResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCRLsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>


      </section>
      <!--ADVANCED_SECURITY-8-1-3-->
      <section xml:id="tc.ADVANCED_SECURITY-8-1-3">
        <title>Get CRL</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-8-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CRL Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> GetCRL
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that CRLs can be retrieved from the DUT.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. CRLs supported by the DUT as indicated by the MaximumNumberOfCRLs capability. The DUT shall have enough free storage capacity for one additional CRL.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates a CRL (out <emphasis role="italic">crl</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCRL"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client uploads a CRL (in <emphasis role="italic">crl</emphasis>) with alias (in "ONVIF_CRL_Test") identifier (out <emphasis role="italic">crlID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCRL"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetCRL</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CrlID =: <emphasis role="italic">crlID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetCRLResponse</emphasis> message with parameters
              </para>
              <itemizedlist>
                <listitem>
                  <para>
                    Crl =: <emphasis role="italic">crl</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">crl</emphasis>.CRLID is not equal to <emphasis role="italic">crlID</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">crl</emphasis>.Alias is not equal to "ONVIF_CRL_Test", FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">crl</emphasis>.CRLContent is not equal to <emphasis role="italic">crl</emphasis>, FAIL the test, and go to the step 10.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the CRL (in <emphasis role="italic">crlID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCRL"/> to restore DUT configuration.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCRLResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-8-1-4-->
      <section xml:id="tc.ADVANCED_SECURITY-8-1-4">
        <title>Create certification path validation policy</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-8-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certification Path Validation Policy Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreateCertPathValidationPolicy, GetAllCertPathValidationPolicies
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that a certification path validation policy can be created on the DUT.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Certification path validation policy supported by the DUT as indicated by the MaximumNumberOfCertificationPathValidationPolicies capability. The DUT shall have enough free storage capacity for one additional certification path validation policy. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client prepares certificate (out <emphasis role="italic">certID</emphasis>), related RSA key pair (out <emphasis role="italic">keyID</emphasis>) and certification path if any (out <emphasis role="italic">certificationPathID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperPrepareCertificate"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreateCertPathValidationPolicy</emphasis> with parameter
                <itemizedlist>
                  <listitem>
                    <para>
                      Alias := "ONVIF_CertPathValidationPolicy_Test"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Parameters.RequireTLSWWWClientAuthExtendedKeyUsage skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Parameters.UseDeltaCRLs = true
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Parameters.anyParameters skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TrustAnchor[0].CertificateID := <emphasis role="italic">certID</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      anyParameters skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">CreateCertPathValidationPolicyResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertPathValidationPolicyID =: <emphasis role="italic">certPathValidationPolicyID</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertPathValidationPolicies</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertPathValidationPoliciesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertPathValidationPolicy list =: <emphasis role="italic">certPathValidationPolicyList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicyList</emphasis> does not contain <emphasis role="italic">certPathValidationPolicyID</emphasis>, FAIL the test, and go to the step 13.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicyList</emphasis>[CertPathValidationPolicyID = <emphasis role="italic">certPathValidationPolicyID</emphasis>].Alias is not equal to "ONVIF_CertPathValidationPolicy_Test", FAIL the test, and go to the step 13.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicyList</emphasis>[CertPathValidationPolicyID = <emphasis role="italic">certPathValidationPolicyID</emphasis>].Parameters.RequireTLSWWWClientAuthExtendedKeyUsage is equal to true, FAIL the test, and go to the step 13.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicyList</emphasis>[CertPathValidationPolicyID = <emphasis role="italic">certPathValidationPolicyID</emphasis>].Parameters.UseDeltaCRLs is not equal to true, FAIL the test, and go to the step 13.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicyList</emphasis>[CertPathValidationPolicyID = <emphasis role="italic">certPathValidationPolicyID</emphasis>]. TrustAnchor does not contain one and only one element with CertificateID equal to <emphasis role="italic">certID</emphasis>, FAIL the test, and go to the step 13.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path validation policy (in <emphasis role="italic">certPathValidationPolicyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertPathValidationPolicy"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certificationPathID</emphasis> is null:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certificationPathID</emphasis> is not null:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client deletes the certification path (in <emphasis role="italic">certificationPathID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreateCertPathValidationPolicyResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertPathValidationPoliciesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-8-1-5-->
      <section xml:id="tc.ADVANCED_SECURITY-8-1-5">
        <title>Get certification path validation policy</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-8-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certification Path Validation Policy Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> CreateCertPathValidationPolicy, GetCertPathValidationPolicy
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that certification path validation policies can be retrieved from the DUT.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Certification path validation policy supported by the DUT as indicated by the MaximumNumberOfCertificationPathValidationPolicies capability. The DUT shall have enough free storage capacity for one additional certification path validation policy. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates certification path validation policy identifier (out <emphasis role="italic">certPathValidationPolicyID</emphasis>) with specified alias (in "Test CertPathValidationPolicy Alias"), related certificate (out <emphasis role="italic">certID</emphasis>), RSA key pair (out <emphasis role="italic">keyID</emphasis>) and certification path if any (out <emphasis role="italic">certificationPathID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertPathValidationPolicy"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetCertPathValidationPolicy</emphasis> with parameters
              </para>
              <itemizedlist>
                <listitem>
                  <para>
                    CertPathValidationPolicyID =: <emphasis role="italic">certPathValidationPolicyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetCertPathValidationPolicyResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertPathValidationPolicy =: <emphasis role="italic">certPathValidationPolicy</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicy</emphasis>.CertPathValidationPolicyID is not equal to <emphasis role="italic">certPathValidationPolicyID</emphasis>, FAIL the test, and go to the step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicy</emphasis>.Alias is not equal to "Test CertPathValidationPolicy Alias", FAIL the test, and go to the step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicy</emphasis>.Parameters.RequireTLSWWWClientAuthExtendedKeyUsage is equal to true, FAIL the test, and go to the step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicy</emphasis>.Parameters.UseDeltaCRLs is not equal to true, FAIL the test, and go to the step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicy</emphasis>.TrustAnchor does not contain one and only one element with CertificateID equal to <emphasis role="italic">certID</emphasis>, FAIL the test, and go to the step 11.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the certification path validation policy (in <emphasis role="italic">certPathValidationPolicyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertPathValidationPolicy"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certificationPathID</emphasis> is null:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certificationPathID</emphasis> is not null:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client deletes the certification path (in <emphasis role="italic">certificationPathID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCertPathValidationPolicyResponse</emphasis> message.
              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>
      <!--ADVANCED_SECURITY-8-1-6-->
      <section xml:id="tc.ADVANCED_SECURITY-8-1-6">
        <title>Delete certification path validation policy</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-8-1-6
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Certification Path Validation Policy Management (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> DeleteCertPathValidationPolicy, GetAllCertPathValidationPolicies
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that a certification path validation policy can be deleted from DUT.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Certification path validation policy supported by the DUT as indicated by the MaximumNumberOfCertificationPathValidationPolicies capability. The DUT shall have enough free storage capacity for one additional certification path validation policy. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates certification path validation policy identifier (out <emphasis role="italic">certPathValidationPolicyID</emphasis>) with specified alias (in "Test CertPathValidationPolicy Alias"), related certificate (out <emphasis role="italic">certID</emphasis>), RSA key pair (out <emphasis role="italic">keyID</emphasis>) and certification path if any (out <emphasis role="italic">certificationPathID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertPathValidationPolicy"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCertPathValidationPolicy</emphasis> with parameters
              </para>
              <itemizedlist>
                <listitem>
                  <para>
                    CertPathValidationPolicyID =: <emphasis role="italic">certPathValidationPolicyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">DeleteCertPathValidationPolicyResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetAllCertPathValidationPolicies</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetAllCertPathValidationPoliciesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CertPathValidationPolicy list =: <emphasis role="italic">certPathValidationPolicyList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certPathValidationPolicyList</emphasis> contains <emphasis role="italic">certPathValidationPolicyID</emphasis>, FAIL the test, and go to the step 9.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certificationPathID</emphasis> is null:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">certificationPathID</emphasis> is not null:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client deletes the certification path (in <emphasis role="italic">certificationPathID</emphasis>) and RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath3"/> to restore DUT configuration.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCertPathValidationPolicyResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetAllCertPathValidationPoliciesResponse</emphasis> .
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
    </section>
    <!--TLS Versions-->
    <section xml:id="tc.advanced_security.tls_versions" xreflabel="Section 5.8">
      <title>TLS Versions</title>
      <!--ADVANCED_SECURITY-9-1-1-->
      <section xml:id="tc.ADVANCED_SECURITY-9-1-1">
        <title>TLS Version Management</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-9-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> SetEnabledTLSVersions (ONVIF Security Configuration Service Specification), GetEnabledTLSVersions (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis> SetEnabledTLSVersions, GetServiceCapabilities (Security Configuration), GetEnabledTLSVersions
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that TLS Versions settings could be changes by SetEnabledTLSVersions request and recieved by GetEnabledTLSVersions request. Verify that TLS Versions settings are consistant with capabilities.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. Enabling  and  disabling  specific TLS versions supported by the DUT as indicated by the EnabledVersionsSupported capability.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves Security Configuration Service Capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Security Configuration Service Capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEnabledTLSVersions</emphasis> request.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetEnabledTLSVersionsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Versions list =: <emphasis role="italic">initialVersionList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
                        <listitem>
              <para>
                If <emphasis role="italic">initialVersionList</emphasis> does not contains any items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported does not contains all items from <emphasis role="italic">initialVersionList</emphasis> list, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">SetEnabledTLSVersions</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Versions list := <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.ADVANCED_SECURITY-9-1-1.8">
              <para>
                The DUT responds with <emphasis role="bold">SetEnabledTLSVersionsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEnabledTLSVersions</emphasis> request.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetEnabledTLSVersionsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Versions list =: <emphasis role="italic">updatedVersionList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedVersionList1</emphasis> is not equal to <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list (the order of the items shall be ignored during comparition), FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">SetEnabledTLSVersions</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Versions list := empty list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.ADVANCED_SECURITY-9-1-1.13">
              <para>
                The DUT returns <emphasis role="bold">env:Sender/ter:InvalidArgVal/ter:EmptyList</emphasis> SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEnabledTLSVersions</emphasis> request.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetEnabledTLSVersionsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Versions list =: <emphasis role="italic">updatedVersionList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedVersionList2</emphasis> is not equal to <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list (the order of the items shall be ignored during comparition), FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list contains more than one item:
                <orderedlist numeration="arabic" inheritnum="inherit">
                  <?dbfo label-width="3.0em"?>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">SetEnabledTLSVersions</emphasis> request with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Versions list := first item from <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem xml:id="tc.ADVANCED_SECURITY-9-1-1.17.2" xreflabel="17.2">
                    <para>
                      The DUT responds with <emphasis role="bold">SetEnabledTLSVersionsResponse</emphasis> message.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">GetEnabledTLSVersions</emphasis> request.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetEnabledTLSVersionsResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Versions list =: <emphasis role="italic">updatedVersionList3</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">updatedVersionList3</emphasis> contains more than one item, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">updatedVersionList3</emphasis> does not contain first item from <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">SetEnabledTLSVersions</emphasis> request with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Versions list := last item from <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem xml:id="tc.ADVANCED_SECURITY-9-1-1.17.8" xreflabel="17.8">
                    <para>
                      The DUT responds with <emphasis role="bold">SetEnabledTLSVersionsResponse</emphasis> message.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">GetEnabledTLSVersions</emphasis> request.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetEnabledTLSVersionsResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Versions list =: <emphasis role="italic">updatedVersionList4</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">updatedVersionList4</emphasis> contains more than one item, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">updatedVersionList4</emphasis> does not contain last item from <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Restore the DUT state.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetEnabledTLSVersionsResponse</emphasis> message at steps <xref linkend="tc.ADVANCED_SECURITY-9-1-1.8"/>, <xref linkend="tc.ADVANCED_SECURITY-9-1-1.17.2"/>, <xref linkend="tc.ADVANCED_SECURITY-9-1-1.17.8"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">SetEnabledTLSVersionsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT did not send the <emphasis role="bold">env:Sender/ter:InvalidArgVal/ter:EmptyList</emphasis> SOAP 1.2 fault message at step <xref linkend="tc.ADVANCED_SECURITY-9-1-1.13"/>.
              </para>
            </listitem>
          </itemizedlist>
        </para>


      </section>
      <!--ADVANCED_SECURITY-9-1-2-->
      <section xml:id="tc.ADVANCED_SECURITY-9-1-2">
        <title>Disable TLS Version</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> ADVANCED_SECURITY-9-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> SetEnabledTLSVersions (ONVIF Security Configuration Service Specification), GetEnabledTLSVersions (ONVIF Security Configuration Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature under test:</emphasis>  SetEnabledTLSVersions, GetEnabledTLSVersions
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> security.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> Verify that TLS Versions settings were applied.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Security Configuration Service is received from the DUT. CRLs supported by the DUT as indicated by the MaximumNumberOfCRLs capability. Network Configuration is supported by the DUT.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves Security Configuration Service Capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Security Configuration Service Capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported contains only one item, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client configures HTTPS if required by following the procedure mentioned in <xref linkend="Annex_HelperCheckAndConfigureHTTPS"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">SetEnabledTLSVersions</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Versions list := all items from <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list except lowest version
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">SetEnabledTLSVersionsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client verifies basic TLS handshake by following the procedure mentioned in <xref linkend="Annex_HelperBasicTLSHandshakeProtocolVersionAlert"/>  with the following input and output parameters.
                <itemizedlist>
                  <listitem>
                    <para>
                      in lowest version from <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.TLSServerSupported list - disabled TLS version
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client verifies basic TLS handshake by following the procedure mentioned in <xref linkend="Annex_HelperBasicTLSHandshakeCheck"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Restore the DUT state.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">SetEnabledTLSVersionsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
  </chapter>
  <appendix>
    <title>Helper Procedures and Additional Notes</title>
    <!--A.1-->
    <section xml:id="Annex_HelperDeleteRSAKeyPair" xreflabel="Annex A.1">
      <title>Delete an RSA key pair </title>
      <para>
        <emphasis role="bold">Name:</emphasis>HelperDeleteRSAKeyPair
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete an RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. On-board RSA key pair generation is supported by the DUT as indicated by the RSAKeyPairGeneration capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of the key pair (<emphasis role="italic">keyID</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteKey</emphasis> with parameters
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  KeyID := <emphasis role="italic">keyID</emphasis>
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              DUT responds with a <emphasis role="bold">DeleteKeyResponse</emphasis> message.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeleteKeyResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.2-->
    <section xml:id="Annex_SubjectForAServerCertificate" xreflabel="Annex A.2">
      <title>Subject for a server certificate</title>
      <para>
        Use the following subject for test cases:
        <itemizedlist>
          <listitem>
            <para>
              Subject.Country := "US"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.CommonName := &lt;DUT IP-address&gt;
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>
    <!--A.3-->
    <section xml:id="Annex_HelperCreateCertificateFromPKCS10CSR" xreflabel="Annex A.3">
      <title>Creating a certificate from a PCKS#10 request</title>
      <para>
        <emphasis role="bold"> Name:</emphasis> HelperCreateCertificateFromPKCS10CSR
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis>Helper procedure to create an X.509 certificate from a PKCS#10 certification request.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>) and associated CA certificate (<emphasis role="italic">CAcert</emphasis>) and a corresponding private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> An [RFC 5280] compliant X.509 certificate (<emphasis role="italic">certResult</emphasis>) from the PKCS#10 request signed with the public key in the CA certificate.
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Create an [RFC 5280] compliant X.509 certificate (<emphasis role="italic">certResult</emphasis>) from the PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>) with the following properties:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  version:= v3
                </para>
              </listitem>
              <listitem>
                <para>
                  signature := sha1-WithRSAEncryption
                </para>
              </listitem>
              <listitem>
                <para>
                  subject := subject from the PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>)
                </para>
              </listitem>
              <listitem>
                <para>
                  subject public key := subject public key in the PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>)
                </para>
              </listitem>
              <listitem>
                <para>
                  validity := not before 19700101000000Z and not after 99991231235959Z
                </para>
              </listitem>
              <listitem>
                <para>
                  certificate signature is generated with the private key (<emphasis role="italic">privateKey</emphasis>) in the CA certificate (<emphasis role="italic">CAcert</emphasis>)
                </para>
              </listitem>
              <listitem>
                <para>
                  certificate extensions := the X.509v3 extensions from the PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>)
                </para>
              </listitem>
            </itemizedlist>
          </listitem>

        </orderedlist>
      </para>

    </section>
    <!--A.4-->
    <section xml:id="Annex_HelperCreateCACertificate" xreflabel="Annex A.4">
      <title>Provide CA certificate</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCACertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create an X.509 CA certificate.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The subject (<emphasis role="italic">subject</emphasis>) of certificate (optional input parameter, could be skipped).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> An X.509 CA certificate (<emphasis role="italic">CAcert</emphasis>) that is compliant to [RFC 5280] and a corresponding private key (<emphasis role="italic">privateKey</emphasis>) and public key (<emphasis role="italic">publicKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client determines the length of the key to generate (out <emphasis role="italic">length</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDetermineRSAKeyLength"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">subject</emphasis> is skipped set:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  <emphasis role="italic">subject</emphasis> := "CN=ONVIF TT,C=US"
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates an X.509 self-signed CA certificate that is compliant to [RFC 5280] and has the following properties:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  version := v3
                </para>
              </listitem>
              <listitem>
                <para>
                  signature := sha1-WithRSAEncryption
                </para>
              </listitem>
              <listitem>
                <para>
                  validity := not before 19700101000000Z and not after 99991231235959Z
                </para>
              </listitem>
              <listitem>
                <para>
                  subject := <emphasis role="italic">subject</emphasis>
                </para>
              </listitem>
              <listitem>
                <para>
                  length of the key to be used := <emphasis role="italic">length</emphasis>
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
      </para>

      <para>
        <emphasis role="bold">Note:</emphasis> ONVIF Client may return the same CA certificate in subsequent invocations of this procedure for the same subject.
      </para>
    </section>
    <!--A.5-->
    <section xml:id="Annex_HelperDeleteCertificationPath" xreflabel="Annex A.5">
      <title>Delete a certification path with corresponding certificate and RSA key pair</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteCertificationPath
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete certification path and related certificate and RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate by the DUT as indicated by the SelfSignedCertificateCreationWithRSA or PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSAcapability. TLS is supported by the DUT as indicated by the TLSServerSupported capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of the certification path (<emphasis role="italic">certPathID</emphasis>), certificate (<emphasis role="italic">certID</emphasis>) and RSA key pair (<emphasis role="italic">keyID</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID := <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with a <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client deletes the self-signed certificate (in <emphasis role="italic">certID</emphasis>) and related the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/>.
            </para>
          </listitem>

        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
            </para>
          </listitem>

        </itemizedlist>
      </para>
    </section>
    <!--A.6-->
    <section xml:id="Annex_HelperDetermineRSAKeyLength" xreflabel="Annex A.6">
      <title>Determine RSA key length</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDetermineRSAKeyLength
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to determine the RSA key length to use during testing.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. On-board RSA key pair generation is supported by the DUT as indicated by the RSAKeyPairGeneration capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The smallest supported RSA key length (<emphasis role="italic">keyLength</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by the following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client loops through the supported Key length list (<emphasis role="italic">cap</emphasis>.RSAKeyLengths) and selects the smallest supported key length (<emphasis role="italic">keyLength</emphasis>).
            </para>
          </listitem>

        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              No supported key length was found at step 2.
            </para>
          </listitem>

        </itemizedlist>
      </para>
    </section>
    <!--A.7-->
    <section xml:id="Annex_HelperCreateRSAKeyPair" xreflabel="Annex A.7">
      <title>Create an RSA key pair</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateRSAKeyPair
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create an RSA key pair
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. On-board RSA key pair generation is supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifier of the new key pair (<emphasis role="italic">keyID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client determines the length of the key to generate (out <emphasis role="italic">length</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDetermineRSAKeyLength"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreateRSAKeyPair</emphasis> with parameter
              <itemizedlist>
                <listitem>
                  <para>
                    KeyLength := <emphasis role="italic">length</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateRSAKeyPairResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    KeyID =: <emphasis role="italic">keyID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    EstimatedCreationTime =: <emphasis role="italic">duration</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperCreateRSAKeyPair.4">
            <para>
              Until <emphasis role="italic">operationDelay</emphasis> + <emphasis role="italic">duration</emphasis> expires repeat the following steps:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client waits for 5 seconds.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">GetKeyStatus</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          KeyID := <emphasis role="italic">keyID</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetKeyStatusResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          KeyStatus =: <emphasis role="italic">keyStatus</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If <emphasis role="italic">keyStatus</emphasis> is equal to "ok", <emphasis role="italic">keyID</emphasis> will be return as a result of the procedure, other steps will be skipped.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If <emphasis role="italic">keyStatus</emphasis> is equal to "corrupt", FAIL the procedure and deletes the RSA key pair (<emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">operationDelay</emphasis> + <emphasis role="italic">duration</emphasis> expires for step <xref linkend="Annex_HelperCreateRSAKeyPair.4"/> and the last <emphasis role="italic">keyStatus</emphasis> is other than "ok", FAIL the procedure and deletes the RSA key pair (<emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/>.
            </para>
          </listitem>



        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreateRSAKeyPairResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">GetKeyStatusResponse</emphasis> message(s).
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
      </para>
    </section>
    <!--A.8-->
    <section xml:id="Annex_HelperCreateSelfSignedCertificate" xreflabel="Annex A.8">
      <title>Create a self-signed certificate </title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateSelfSignedCertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a self-signed certificate.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifier of the new certificate (<emphasis role="italic">certID</emphasis>) and RSA key pair (<emphasis role="italic">keyID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates an RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateRSAKeyPair"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreateSelfSignedCertificate</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    X509Version skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    KeyID := <emphasis role="italic">keyID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Subject := subject (see <xref linkend="Annex_SubjectForAServerCertificate"/>)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Alias skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    notValidBefore skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    notValidAfter skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    SignatureAlgorithm.algorithm := 1.2.840.113549.1.1.5 (OID of SHA-1 with RSA Encryption algorithm)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    SignatureAlgorithm.parameters skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    SignatureAlgorithm.anyParameters skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Extension skipped

                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateSelfSignedCertificateResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificateID =: <emphasis role="italic">certID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreateSelfSignedCertificateResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.9-->
    <section xml:id="Annex_HelperDeleteCertWithKey" xreflabel="Annex A.9">
      <title>Delete a certificate with corresponding RSA key pair </title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteCertWithKey
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete a certificate and related RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate by the DUT as indicated by the SelfSignedCertificateCreationWithRSA or PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSAcapability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of the certificate (<emphasis role="italic">certID</emphasis>) and RSA key pair (<emphasis role="italic">keyID</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificateID := <emphasis role="italic">certID</emphasis>
                  </para>
                </listitem>

              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">DeleteCertificateResponse</emphasis> message.

            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.10-->
    <section xml:id="Annex_HelperGetServiceCapabilities" xreflabel="Annex A.10">
      <title>Get service capabilities</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetServiceCapabilities
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get service capabilities.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The service capabilities (<emphasis role="italic">cap</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetServiceCapabilities</emphasis>

            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Capabilities =: <emphasis role="italic">cap</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>


        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message.
            </para>
          </listitem>

        </itemizedlist>
      </para>
    </section>
    <!--A.11-->
    <section xml:id="Annex_HelperCreateCertificationPath_SelfSigned" xreflabel="Annex A.11">
      <title>Create a certification path based on self-signed certificate </title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCertificationPath_SelfSigned
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a certification path based on self-signed certificate.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifier of the new certification path (<emphasis role="italic">certPathID</emphasis>), certificate (<emphasis role="italic">certID</emphasis>) and RSA key pair (<emphasis role="italic">keyID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates a self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateSelfSignedCertificate"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreateCertificationPath</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertficateIDs.CertificateID[0] := <emphasis role="italic">certID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Alias := "ONVIF_Test"
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateCertificationPathResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>

        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreateCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.12-->
    <section xml:id="Annex_HelperRemoveServerCertificateAssignment" xreflabel="Annex A.12">
      <title>Remove server certificate assignment with corresponding certification path, certificate and RSA key pair</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperRemoveServerCertificateAssignment
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to remove server certificate assignment with corresponding certification path, certificate and RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate by the DUT as indicated by the SelfSignedCertificateCreationWithRSA or PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSAcapability. TLS supported by the DUT as indicated by the TLSServerSupported capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of certification path (<emphasis role="italic">certPathID</emphasis>), certificate (<emphasis role="italic">certID</emphasis>) and RSA key pair (<emphasis role="italic">keyID</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">RemoveServerCertificateAssignment</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID := <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.

            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>) and related certificate (in <emphasis role="italic">certID</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.13-->
    <section xml:id="Annex_HelperAddServerCertAssign_SSCertificate" xreflabel="Annex A.13">
      <title>Add server certificate assignment with corresponding certification path, self-signed certificate and RSA key pair</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperAddServerCertAssign_SSCertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to add server certificate assignment with corresponding certification path, self-signed certificate and RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifiers of the new certification path (<emphasis role="italic">certPathID</emphasis>), certificate (<emphasis role="italic">certID</emphasis>) and RSA key pair (<emphasis role="italic">keyID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates a certification path (out <emphasis role="italic">certPathID</emphasis>) based on self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertificationPath_SelfSigned"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID := <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.14-->
    <section xml:id="Annex_HelperCreateCASignedCertificate" xreflabel="Annex A.14">
      <title>Create a CA-signed certificate for RSA key pair</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCASignedCertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a CA-signed certificate for RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. Current time of the DUT shall be at least Jan 01, 1970.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> CA certificate (<emphasis role="italic">CAcert</emphasis>) and a corresponding private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifier of the new key pair (<emphasis role="italic">keyID</emphasis>), a CA-signed certificate (<emphasis role="italic">cert</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates an RSA key pair (<emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateRSAKeyPair"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreatePKCS10CSR</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Subject := <emphasis role="italic">subject</emphasis> (see <xref linkend="Annex_SubjectForAServerCertificate"/>)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    KeyID := <emphasis role="italic">keyID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CSRAttribute skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    SignatureAlgorithm.algorithm := 1.2.840.113549.1.1.5 (OID of SHA-1 with RSA Encryption algorithm)

                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    PKCS10CSR =: <emphasis role="italic">PKCS10request</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates a certificate (out <emphasis role="italic">cert</emphasis>) from the PKCS#10 request (in <emphasis role="italic">PKCS10request</emphasis>) and an associated CA certificate (in <emphasis role="italic">CAcert</emphasis>) with related private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCertificateFromPKCS10CSR"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>
    <!--A.15-->
    <section xml:id="Annex_HelperUploadCertificate" xreflabel="Annex A.15">
      <title>Upload a certificate without Private Key Assignment</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperUploadCertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to upload a certificate without private key assignment.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Certificate (<emphasis role="italic">cert</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifier of the new RSA key pair (<emphasis role="italic">keyID</emphasis>) and a certificate identifier (<emphasis role="italic">certID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  Certificate := <emphasis role="italic">cert</emphasis>
                </para>
              </listitem>
              <listitem>
                <para>
                  Alias := "ONVIF_Test"
                </para>
              </listitem>
              <listitem>
                <para>
                  PrivateKeyRequired : = false

                </para>
              </listitem>
            </itemizedlist>
          </listitem>
          <listitem>
            <para>
              DUT responds with a <emphasis role="bold">UploadCertificateResponse</emphasis> message.
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  Certificate := <emphasis role="italic">certID</emphasis>
                </para>
              </listitem>
              <listitem>
                <para>
                  KeyID := <emphasis role="italic">keyID</emphasis>
                </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>
    <!--A.16-->
    <section xml:id="Annex_HelperUploadCASignedCertificate" xreflabel="Annex A.16">
      <title>Create and upload a CA-signed certificate for private key</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperUploadCASignedCertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create and upload a CA-signed certificate for private key
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. Current time of the DUT shall be at least Jan 01, 1970.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> CA certificate (<emphasis role="italic">CAcert</emphasis>) and a corresponding private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifier of the new RSA key pair (<emphasis role="italic">keyID</emphasis>), a certificate identifier (<emphasis role="italic">certID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates a certificate (out <emphasis role="italic">cert</emphasis>) from the PKCS#10 request with RSA key pair (out <emphasis role="italic">keyID</emphasis>) and associated CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCASignedCertificate"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Certificate := <emphasis role="italic">cert</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Alias := "ONVIF_Test1"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    PrivateKeyRequired := true
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">UploadCertificateResponse</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificateID =: <emphasis role="italic">certID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    KeyID =: <emphasis role="italic">keyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>

        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.17-->
    <section xml:id="Annex_HelperDeleteCertificationPath2" xreflabel="Annex A.17">
      <title>Delete a certification path with corresponding two certificates and RSA key pairs</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteCertificationPath2
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete certification path and related certificates and RSA key pairs.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate by the DUT as indicated by the SelfSignedCertificateCreationWithRSA or PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSAcapability. TLS is supported by the DUT as indicated by the TLSServerSupported capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of the certification path (<emphasis role="italic">certPathID</emphasis>), certificate (<emphasis role="italic">certID1</emphasis>) and RSA key pair (<emphasis role="italic">keyID1</emphasis>), certificate (<emphasis role="italic">certID2</emphasis>) and RSA key pair (<emphasis role="italic">keyID2</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID := <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client deletes the CA certificate (<emphasis role="italic">certID2</emphasis>) and related RSA key pair (<emphasis role="italic">keyID2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client deletes the CA certificate (<emphasis role="italic">certID1</emphasis>) and related RSA key pair (<emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertWithKey"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.18-->
    <section xml:id="Annex_HelperCreateCertificationPath_CACertificates" xreflabel="Annex A.18">
      <title>Create certification path with CA-signed certificate and associated CA certificate</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCertificationPath_CACertificates
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a certification path based on CA-signed certificate and associated CA certificate.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability. RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability. TLS is supported by the DUT as indicated by the TLSServerSupported capability. The DUT shall have enough free storage capacity for two additional RSA key pairs. The DUT shall have enough free storage capacity for two additional certificates. The DUT shall have enough free storage capacity for one additional certification path. Current time of the DUT shall be at least Jan 01, 1970.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifier of the new certification path (<emphasis role="italic">certPathID</emphasis>) and two related certificates: CA-signed certificate (<emphasis role="italic">certID1</emphasis>) and related key (<emphasis role="italic">keyID1</emphasis>) and associated CA certificate (<emphasis role="italic">certID2</emphasis>) and related key (<emphasis role="italic">keyID2</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates and uploads a CA-signed certificate (out <emphasis role="italic">certID1</emphasis>) for RSA key pair (out <emphasis role="italic">keyID1</emphasis>) and associated CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCASignedCertificate"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID2</emphasis>, in <emphasis role="italic">CAcert</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID2</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreateCertificationPath</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertficateIDs.CertificateID[0] =: <emphasis role="italic">certID1</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CertficateIDs.CertificateID[1] =: <emphasis role="italic">certID2</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Alias := "ONVIF_Test2"
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateCertificationPathResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>

        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreateCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.19-->
    <section xml:id="Annex_HelperValidateDEREncoding" xreflabel="Annex A.19">
      <title>Validate DER encoding</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperValidateDEREncoding
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to validate DER encoding.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> DER encoded data (<emphasis role="italic">dataDER</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client tries to decode DER encoded data <emphasis role="italic">dataDER</emphasis>. If decoding was failed, then <emphasis role="italic">dataDER</emphasis> is not valid encoded, FAIL the procedure and skip other steps.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client DER encodes the result from previous step (<emphasis role="italic">dataDER2</emphasis>).
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client compares <emphasis role="italic">dataDER</emphasis> and <emphasis role="italic">dataDER2</emphasis>. If they are not equal, then dataDER is not valid encoded, FAIL the procedure.
            </para>
          </listitem>

        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.20-->
    <section xml:id="Annex_HelperRemoveServerCertificateAssignment2" xreflabel="Annex A.20">
      <title>Remove server certificate assignment with corresponding certification path, certificates and RSA key pairs</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperRemoveServerCertificateAssignment2
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to remove server certificate assignment with corresponding certification path, certificates and RSA key pairs.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate by the DUT as indicated by the SelfSignedCertificateCreationWithRSA or PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSAcapability. TLS is supported by the DUT as indicated by the TLSServerSupported capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of certification path (<emphasis role="italic">certPathID</emphasis>), certificate (<emphasis role="italic">certID1</emphasis>) and RSA key pair (<emphasis role="italic">keyID1</emphasis>), certificate (<emphasis role="italic">certID2</emphasis>) and RSA key pair (<emphasis role="italic">keyID2</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">RemoveServerCertificateAssignment</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>

          <listitem>
            <para>
              ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client deletes the certification path (in <emphasis role="italic">certPathID</emphasis>), related the CA certificate (in <emphasis role="italic">certID2</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID2</emphasis>) and related the CA-signed certificate (in <emphasis role="italic">certID1</emphasis>) and the RSA key pair (in <emphasis role="italic">keyID1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCertificationPath2"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.21-->
    <section xml:id="Annex_HelperBasicTLSHandshakeCheck" xreflabel="Annex A.21">
      <title>Basic TLS handshake</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperBasicTLSHandshakeCheck
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to verify basic TLS handshake.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> TLS is supported by the DUT as indicated by the TLSServerSupported capability. TLS is configured. HTTPS protocol is enabled.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> TLS server certification path ID (<emphasis role="italic">certPathID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">ClientHello</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    ClientVersion := 3,1
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Random number := <emphasis role="italic">ClientRandom[32]</emphasis>, that is 4-byte number that consists of the client’s date and time plus a 28-byte randomly generated number
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CipherSuites := list of common CipherSuites used by TLS 1.0, SSL 2.0 and 3.0
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Compression methods list := NONE
                  </para>
                </listitem>
                <listitem>
                  <para>
                    &lt;SessionID&gt; skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server responds with a <emphasis role="bold">ServerHello</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Version =: the highest version number supported by both sides
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Random number =: <emphasis role="italic">ServerRandom[32]</emphasis>, that is 4-byte number that consists of the client’s date and time plus a 28-byte randomly generated number
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CipherSuite =: the strongest cipher that both the client and server support
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Compression method =: NONE
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Session ID =: <emphasis role="italic">SessionID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server responds <emphasis role="bold">Certificate</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Certificate.CertificateID =: <emphasis role="italic">CertificateID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Certificate.KeyID =: <emphasis role="italic">KeyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server responds a <emphasis role="bold">ServerHelloDone</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">ClientKeyExchange</emphasis> message with parameter
              <itemizedlist>
                <listitem>
                  <para>
                    Premaster Secret := <emphasis role="italic">PreMasterSecret</emphasis> encrypted with <emphasis role="italic">KeyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client computes <emphasis role="italic">MasterSecret</emphasis> using <emphasis role="italic">ClientRandom[32]</emphasis>, <emphasis role="italic">ServerRandom[32]</emphasis> and <emphasis role="italic">PreMasterSecret</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server computes <emphasis role="italic">MasterSecret</emphasis> using <emphasis role="italic">ClientRandom[32]</emphasis>, <emphasis role="italic">ServerRandom[32]</emphasis> and <emphasis role="italic">PreMasterSecret</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">ChangeCipherSpec</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes encrypted <emphasis role="bold">Finished</emphasis> message, containing a hash := <emphasis role="italic">hash1</emphasis> and MAC := <emphasis role="italic">MAC1</emphasis> over the previous handshake messages.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server decrypts the client's <emphasis role="italic">Finished</emphasis> message and verify the hash and MAC.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server responds <emphasis role="bold">ChangeCipherSpec</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server responds its encrypted <emphasis role="bold">Finished</emphasis> message, containing a hash =: <emphasis role="italic">hash2</emphasis> and MAC =: <emphasis role="italic">MAC2</emphasis> over the previous handshake messages.
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">hash1</emphasis> is not equal to <emphasis role="italic">hash2</emphasis>, FAIL the test.
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">MAC1</emphasis> is not equal to <emphasis role="italic">MAC2</emphasis>, FAIL the test.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">ServerHello</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">Certificate</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">ServerHelloDone</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">ChangeCipherSpec</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">Finished</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server sends Alert Message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.22-->
    <section xml:id="Annex_HelperCreateExpiredCACertificate" xreflabel="Annex A.22">
      <title>Provide expired CA certificate</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateExpiredCACertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create an expired X.509 CA certificate.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> An X.509 CA certificate (<emphasis role="italic">CAcert</emphasis>) that is compliant to [RFC 5280] and a corresponding private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client determines the length of the key to generate (out <emphasis role="italic">length</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDetermineRSAKeyLength"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetSystemDateAndTimeRequest</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetSystemDateAndTimeResponse</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    UTCDateTime =: <emphasis role="italic">DUTCurrentTime</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates an X.509 self-signed CA certificate that is compliant to [RFC 5280] and has the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    version := v3
                  </para>
                </listitem>
                <listitem>
                  <para>
                    signature := sha1-WithRSAEncryption
                  </para>
                </listitem>
                <listitem>
                  <para>
                    validity := not before 19700101000000Z and not after [<emphasis role="italic">DUTCurrentTime</emphasis> - 1 day]
                  </para>
                </listitem>
                <listitem>
                  <para>
                    length of the key to be used := <emphasis role="italic">length</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>

      <para>
        <emphasis role="bold">Note:</emphasis> ONVIF Client may return the same CA certificate in subsequent invocations of this procedure.
      </para>
    </section>
    <!--A.23-->
    <section xml:id="Annex_HelperDeletePassphrase" xreflabel="Annex A.23">
      <title>Delete a passphrase </title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeletePassphrase
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete a passphrase.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Passphrase handling is supported by the DUT as indicated by the MaximumNumberOfPassphrases > 0 capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of the passphrase (<emphasis role="italic">passphraseID</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeletePassphrase</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    PassphraseID := <emphasis role="italic">passphraseID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperWaitingReboot.3">
            <para>
              The DUT responds with a <emphasis role="bold">DeletePassphraseResponse</emphasis> message.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeletePassphraseResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.24-->
    <section xml:id="Annex_PassphrasesForTestCases" xreflabel="Annex A.24">
      <title>Passphrases for test cases</title>
      <para>
        Use the following passphrases for test cases (20 ASCII characters):
        <itemizedlist>
          <listitem>
            <para>
              <emphasis role="italic">passphrase1</emphasis> := "Passphrase for ONVIF"
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="italic">passphrase2</emphasis> := "AdditionalPassphrase"
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>
    <!--A.25-->
    <section xml:id="Annex_HelperCreatePKCS8WithNewKeyPair" xreflabel="Annex A.25">
      <title>Creating a PKCS#8 data structure with new public key and private key without passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePKCS8WithNewKeyPair
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a PKCS#8 data structure with new public key and private key without passphrase.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [RFC 5958, RFC 5959] compliant PKCS#8 data structure (<emphasis role="italic">keyPairInPKCS8</emphasis>) with new public key (<emphasis role="italic">publicKey</emphasis>) and private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client generates RSA key pair with public key (out <emphasis role="italic">publicKey</emphasis>) and private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGenerateRSAKeyPair"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client generates a PKCS#8 data structure (out <emphasis role="italic">keyPairInPKCS8</emphasis>) with existing pubic key (in <emphasis role="italic">publicKey</emphasis>) and private key (in <emphasis role="italic">privateKey</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreatePKCS8WithExistingKeyPair"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>

    </section>
    <!--A.26-->
    <section xml:id="Annex_HelperGenerateRSAKeyPair" xreflabel="Annex A.26">
      <title>Generating an RSA key pair</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGenerateRSAKeyPair
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to generate an RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [RFC 3447] compliant RSA key pair with new public key (<emphasis role="italic">publicKey</emphasis>) and private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client determines the length of the key to generate (out <emphasis role="italic">length</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDetermineRSAKeyLength"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              Create an [RFC 3447] compliant RSA key pair with new public key (out <emphasis role="italic">publicKey</emphasis>) and private key (out <emphasis role="italic">privateKey</emphasis>) with the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    KeyLength := <emphasis role="italic">length</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <!--A.27-->
    <section xml:id="Annex_HelperCreatePKCS8WithExistingKeyPair" xreflabel="Annex A.27">
      <title>Creating a PKCS#8 data structure with existing public key and private key without passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePKCS8WithExistingKeyPair
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a PKCS#8 data structure with existing public key and private key without passphrase.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> A [RFC 3447] compliant RSA key pair with public key (<emphasis role="italic">publicKey</emphasis>) and private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [RFC 5958, RFC 5959] compliant PKCS#8 data structure (<emphasis role="italic">keyPairInPKCS8</emphasis>) for provided RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Create an [RFC 5958, RFC 5959] compliant PKCS#8 data structure (<emphasis role="italic">keyPairInPKCS8</emphasis>) with the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    PrivateKeyInfo
                    <itemizedlist>
                      <listitem>
                        <para>
                          version:= v2
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          privateKeyAlgorithm := rsaEncryption
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          privateKey := <emphasis role="italic">privateKey</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          attributes
                          <itemizedlist>
                            <listitem>
                              <para>
                                publicKey := <emphasis role="italic">publicKey</emphasis>
                              </para>
                            </listitem>
                          </itemizedlist>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>

        </orderedlist>

      </para>

    </section>
    <!--A.28-->
    <section xml:id="Annex_HelperCreatePKCS8WithNewKeyPairWithPassphrase" xreflabel="Annex A.28">
      <title>Creating a PKCS#8 data structure with new public key and private key with passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePKCS8WithNewKeyPairWithPassphrase
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a PKCS#8 data structure with new public key and private key with passphrase.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The passphrase (<emphasis role="italic">passphrase</emphasis>) to use in encryption.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [RFC 5958, RFC 5959] compliant PKCS#8 data structure (<emphasis role="italic">keyPairInPKCS8</emphasis>) with new public key (<emphasis role="italic">publicKey</emphasis>) and private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client generates RSA key pair with public key (out <emphasis role="italic">publicKey</emphasis>) and private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGenerateRSAKeyPair"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client generates a PKCS#8 data structure (out <emphasis role="italic">keyPairInPKCS8</emphasis>) with existing pubic key (in <emphasis role="italic">publicKey</emphasis>) and private key (in <emphasis role="italic">privateKey</emphasis>) with encryption passphrase (in <emphasis role="italic">passphrase</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreatePKCS8WithExistingKeyPairWithPassphrase"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>

    </section>
    <!--A.29-->
    <section xml:id="Annex_HelperCreatePKCS8WithExistingKeyPairWithPassphrase" xreflabel="Annex A.29">
      <title>Creating a PKCS#8 data structure with existing public key and private key with passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePKCS8WithExistingKeyPairWithPassphrase
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a PKCS#8 data structure with existing public key and private key with passphrase.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> A [RFC 3447] compliant RSA key pair with public key (<emphasis role="italic">publicKey</emphasis>) and private key (<emphasis role="italic">privateKey</emphasis>). The passphrase (<emphasis role="italic">passphrase</emphasis>) to use in encryption.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [RFC 5958, RFC 5959] compliant PKCS#8 data structure (<emphasis role="italic">keyPairInPKCS8</emphasis>) for provided RSA key pair.
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Use the current PrivateKeyInfo data:
              <itemizedlist>
                <listitem>
                  <para>
                    PrivateKeyInfo
                    <itemizedlist>
                      <listitem>
                        <para>
                          version := v2
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          privateKeyAlgorithm := rsaEncryption
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          privateKey := <emphasis role="italic">privateKey</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          attributes
                          <itemizedlist>
                            <listitem>
                              <para>
                                publicKey := <emphasis role="italic">publicKey</emphasis>
                              </para>
                            </listitem>
                          </itemizedlist>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Create an [RFC 5958, RFC 5959] compliant PKCS#8 data structure (<emphasis role="italic">keyPairInPKCS8</emphasis>) with the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    EncryptedPrivateKeyInfo
                    <itemizedlist>
                      <listitem>
                        <para>
                          encryptionAlgorithm := pbeWithSHAAnd3-KeyTripleDES-CBC
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          encryptedData := encrypted with <emphasis role="italic">passphrase</emphasis> PrivateKeyInfo data
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <!--A.30-->
    <section xml:id="Annex_HelperCreatePKCS12WithNewCACert" xreflabel="Annex A.30">
      <title>Creating a PKCS#12 data structure with new CA-signed certificate signed by new public key and private key without passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePKCS12WithNewCACert
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create CA certificate and a corresponding public key in the certificate along with the corresponding private key in the form of a PKCS#12 file.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The subject (<emphasis role="italic">subject</emphasis>) of certificate (optional input parameter, could be skipped).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [PKCS#12] compliant PKCS#12 data structure (<emphasis role="italic">PKCS12data</emphasis>) with CA certificate (<emphasis role="italic">CAcert</emphasis>) and a corresponding public key (<emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              If <emphasis role="italic">subject</emphasis> is skipped, set:
              <itemizedlist>
                <listitem>
                  <para>
                    <emphasis role="italic">subject</emphasis> := "CN=ONVIF TT,C=US"
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) with subject (in <emphasis role="italic">subject</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates a CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (in <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (in <emphasis role="italic">privateKey</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreatePKCS12WithExistingCACert"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <!--A.31-->
    <section xml:id="Annex_HelperCreatePKCS12WithNewCACertWithPassphrase" xreflabel="Annex A.31">
      <title>Creating a PKCS#12 data structure with new CA-signed certificate signed by new public key and private key with passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePKCS12WithNewCACertWithPassphrase
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create CA certificate and a corresponding public key in the certificate along with the corresponding private key and encryption passphrase in the form of a PKCS#12 file.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The passphrase (<emphasis role="italic">passphrase</emphasis>) to use in encryption.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [PKCS#12] compliant PKCS#12 data structure (<emphasis role="italic">PKCS12data</emphasis>) with CA certificate (<emphasis role="italic">CAcert</emphasis>) and a corresponding public key (<emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (<emphasis role="italic">privateKey</emphasis>) encrypted with passphrase (<emphasis role="italic">passphrase</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates a CA certificate (in <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (in <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (in <emphasis role="italic">privateKey</emphasis>) encrypted with passphrase (in <emphasis role="italic">passphrase</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreatePKCS12WithPassphrase"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <!--A.32-->
    <section xml:id="Annex_HelperCreatePKCS12WithExistingCACert" xreflabel="Annex A.32">
      <title>Creating a PKCS#12 data structure with existing CA-signed certificate and a corresponding public key and private key without passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePKCS12WithExistingCACert
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a PKCS#12 data structure with existing CA-signed certificate and a corresponding public key and private key without passphrase.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> An X.509 CA certificate (<emphasis role="italic">CAcert</emphasis>) that is compliant to [RFC 5280] and a corresponding private key (<emphasis role="italic">privateKey</emphasis>) and public key (<emphasis role="italic">publicKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [PKCS#12] compliant PKCS#12 data structure (<emphasis role="italic">PKCS12data</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Use the current PrivateKeyInfo data:
              <itemizedlist>
                <listitem>
                  <para>
                    PrivateKeyInfo
                    <itemizedlist>
                      <listitem>
                        <para>
                          version := v2
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          privateKeyAlgorithm := rsaEncryption
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          privateKey := <emphasis role="italic">privateKey</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          publicKey := <emphasis role="italic">publicKey</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Create an [PKCS#12] compliant PKCS#12 data structure <emphasis role="italic">PKCS12data</emphasis>) with the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    EncryptedPrivateKeyInfo
                    <itemizedlist>
                      <listitem>
                        <para>
                          PrivateKeyInfo
                          <itemizedlist>
                            <listitem>
                              <para>
                                version := v3
                              </para>
                            </listitem>
                            <listitem>
                              <para>
                                authSafe
                                <itemizedlist>
                                  <listitem>
                                    <para>
                                      SafeBag
                                      <itemizedlist>
                                        <listitem>
                                          <para>
                                            Pkcs-12-KeyBag := PrivateKeyInfo
                                          </para>
                                        </listitem>
                                        <listitem>
                                          <para>
                                            PKCS12AttrSet
                                            <itemizedlist>
                                              <listitem>
                                                <para>
                                                  friendlyName := "testAlias"
                                                </para>
                                              </listitem>
                                            </itemizedlist>
                                          </para>
                                        </listitem>
                                      </itemizedlist>
                                    </para>
                                  </listitem>
                                  <listitem>
                                    <para>
                                      SafeBag
                                      <itemizedlist>
                                        <listitem>
                                          <para>
                                            Pkcs-12-CertBag := <emphasis role="italic">CAcert</emphasis>
                                          </para>
                                        </listitem>
                                        <listitem>
                                          <para>
                                            PKCS12AttrSet
                                            <itemizedlist>
                                              <listitem>
                                                <para>
                                                  friendlyName := "testAlias"
                                                </para>
                                              </listitem>
                                            </itemizedlist>
                                          </para>
                                        </listitem>
                                      </itemizedlist>
                                    </para>
                                  </listitem>
                                </itemizedlist>
                              </para>
                            </listitem>
                          </itemizedlist>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <!--A.33-->
    <section xml:id="Annex_HelperCreatePKCS12WithPassphrase" xreflabel="Annex A.33">
      <title>Creating a PKCS#12 data structure with existing CA-signed certificate and a corresponding public key and private key with passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePKCS12WithPassphrase
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a PKCS#12 data structure with existing CA-signed certificate and a corresponding public key and private key with passphrase.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> An X.509 CA certificate (<emphasis role="italic">CAcert</emphasis>) that is compliant to [RFC 5280] and a corresponding private key (<emphasis role="italic">privateKey</emphasis>) and public key (<emphasis role="italic">publicKey</emphasis>), and passphrase (<emphasis role="italic">passphrase</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [PKCS#12] compliant PKCS#12 data structure (<emphasis role="italic">PKCS12data</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Use the current PrivateKeyInfo data:
              <itemizedlist>
                <listitem>
                  <para>
                    PrivateKeyInfo
                    <itemizedlist>
                      <listitem>
                        <para>
                          version := v2
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          privateKeyAlgorithm := rsaEncryption
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          privateKey := <emphasis role="italic">privateKey</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          publicKey := <emphasis role="italic">publicKey</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Create an EncryptedPrivateKeyInf data structure with the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    EncryptedPrivateKeyInfo
                    <itemizedlist>
                      <listitem>
                        <para>
                          encryptionAlgorithm := pbeWithSHAAnd3-KeyTripleDES-CBC
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          encryptedData := encrypted with <emphasis role="italic">passphrase</emphasis> PrivateKeyInfo data
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Create an [PKCS#12] compliant PKCS#12 data structure <emphasis role="italic">PKCS12data</emphasis>) with the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    version := v3
                  </para>
                </listitem>
                <listitem>
                  <para>
                    authSafe
                    <itemizedlist>
                      <listitem>
                        <para>
                          SafeBag
                          <itemizedlist>
                            <listitem>
                              <para>
                                Pkcs-12-PKCS9ShroudedKeyBag := EncryptedPrivateKeyInfo
                              </para>
                            </listitem>
                            <listitem>
                              <para>
                                PKCS12AttrSet
                                <itemizedlist>
                                  <listitem>
                                    <para>
                                      friendlyName := "testAlias"
                                    </para>
                                  </listitem>
                                </itemizedlist>
                              </para>
                            </listitem>
                          </itemizedlist>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          SafeBag
                          <itemizedlist>
                            <listitem>
                              <para>
                                Pkcs-12-CertBag := <emphasis role="italic">CAcert</emphasis>
                              </para>
                            </listitem>
                            <listitem>
                              <para>
                                PKCS12AttrSet
                                <itemizedlist>
                                  <listitem>
                                    <para>
                                      friendlyName := "testAlias"
                                    </para>
                                  </listitem>
                                </itemizedlist>
                              </para>
                            </listitem>
                          </itemizedlist>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>


              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
    </section>
    <!--A.34-->
    <section xml:id="Annex_SubjectForAServerCertificateAllDNattributes" xreflabel="Annex A.34">
      <title>Subject for a server certificate (all DN-attributes)</title>
      <para>
        Use the following subject for test cases:
        <itemizedlist>
          <listitem>
            <para>
              Subject.Country := "US"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.Organization := "ONVIF Test"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.OrganizationalUnit := "Unit test"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.DistinguishedNameQualifier := "DN Qualifier Test"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.StateOrProvinceName := "State Name Test"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.CommonName := "Common Name Test"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.SerialNumber := "000000000000"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.Locality := "LA"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.Title := "Mr"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.Surname := "SurnameTest"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.GivenName := "GivenNameTest"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.Initials := "AS"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.Pseudonym := "Pseudonym Test"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.GenerationQualifier := "GenerationQualifier Test"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.GenericAttribute.Type := "string"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.GenericAttribute.Value := "Test GenericAttribute"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.MultyValueRDN.Attribute.Type := "string"
            </para>
          </listitem>
          <listitem>
            <para>
              Subject.MultyValueRDN.Attribute.Value := "Test MultyValueRDN"
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>
    <!--A.35-->
    <section xml:id="Annex_HelperDeleteCertificationPath3" xreflabel="Annex A.35">
      <title>Delete a certification path with corresponding certificate and RSA key pair when CertificateID is unknown</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteCertificationPath3
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete certification path and related certificate and RSA key pair when CertificateID is unknown.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate by the DUT as indicated by the SelfSignedCertificateCreationWithRSA or PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSAcapability. TLS is supported by the DUT as indicated by the TLSServerSupported capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of the certification path (<emphasis role="italic">certPathID</emphasis>) and RSA key pair (<emphasis role="italic">keyID</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetCertificationPath</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>

              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetCertificationPathResponse</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPath.CertificateID list =: <emphasis role="italic">certificateIDList</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CertificationPath.Alias =: <emphasis role="italic">CertPathAlias</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If the DUT did not send a <emphasis role="bold">GetCertificationPathResponse</emphasis> message, FAIL the test and go to step 9.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteCertificationPath</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with empty <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              If the DUT did not send a <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message, FAIL the test and go to step 8.
            </para>
          </listitem>
          <listitem>
            <para>
              For each CertificateID (<emphasis role="italic">certificateID</emphasis>) in <emphasis role="italic">certificateIDList</emphasis>:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">GetCertificate</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CertificateID := <emphasis role="italic">certID</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with a <emphasis role="bold">GetCertificateResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Certificate =: <emphasis role="italic">X509Cert</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">DeleteCertificate</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CertificateID =: <emphasis role="italic">certificateID</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with a <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client deletes the RSA key pair (in <emphasis role="italic">X509Cert</emphasis>.KeyID) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Skip other steps.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client deletes the RSA key pair (in <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteRSAKeyPair"/> to restore DUT configuration.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">GetCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeleteCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeleteCertificateResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">GetCertificateResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.36-->
    <section xml:id="Annex_HelperUploadPKCS12" xreflabel="Annex A.36">
      <title>Upload PKCS#12 – no key pair exists</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperUploadPKCS12
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create and upload PKCS#12 data structure with new public key and private key.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT as indicated by the PKCS12CertificateWithRSAPrivateKeyUpload capability. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate. The DUT shall have enough free storage capacity for one additional certification path.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A [PKCS#12] compliant PKCS#12 data structure (<emphasis role="italic">PKCS12data</emphasis>) with CA certificate (<emphasis role="italic">CAcert</emphasis>) and a corresponding public key (<emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (<emphasis role="italic">privateKey</emphasis>) and certification path ID (<emphasis role="italic">certificationPathID</emphasis>) with corresponding key pair ID (<emphasis role="italic">keyID</emphasis>) for uploaded PKCS#12 data structure.
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreatePKCS12WithNewCACert"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertWithPrivateKey := <emphasis role="italic">PKCS12data</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CertificationPathAlias := "ONVIF_Certification_Path_Test"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    KeyAlias := "ONVIF_Key_Test"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    IgnoreAdditionalCertificates := false
                  </para>
                </listitem>
                <listitem>
                  <para>
                    IntegrityPassphraseID skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    EncryptionPassphraseID skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with a <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID =: <emphasis role="italic">certificationPathID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    KeyID =: <emphasis role="italic">keyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">UploadCertificateWithPrivateKeyInPKCS12Response</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.37-->
    <section xml:id="Annex_HelperCreateCRL" xreflabel="Annex A.37">
      <title>Provide CRL</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCRL
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create CRL.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A CRL (<emphasis role="italic">crl</emphasis>) that is compliant to [RFC 5280].
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates a CRL that is compliant to [RFC 5280] and has the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    tbsCertList[0].version := v2
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].signature.algorithm := sha1-WithRSAEncryption
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].issuer := "CN=ONVIF TT,C=US"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].thisUpdate := [current time]
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].nextUpdate skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].revokedCertificates[0].userCertificate := [any certificate number]
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].revokedCertificates[0].revocationDate := [current time]
                  </para>
                </listitem>
                <listitem>
                  <para>
                    signatureAlgorithm.algorithm := sha1-WithRSAEncryption
                  </para>
                </listitem>
                <listitem>
                  <para>
                    signatureValue := sha1-WithRSAEncryption signature
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> ONVIF Client may return the same CRL in subsequent invocations of this procedure.
      </para>
    </section>
    <!--A.38-->
    <section xml:id="Annex_HelperDeleteCRL" xreflabel="Annex A.38">
      <title>Delete a CRL </title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteCRL
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete a CRL.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. CRLs supported by the DUT as indicated by the MaximumNumberOfCRLs capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of CRL (<emphasis role="italic">crlID</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteCRL</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CrlID =: <emphasis role="italic">crlID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">DeleteCRLResponse</emphasis> message.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeleteCRLResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.39-->
    <section xml:id="Annex_HelperUploadCRL" xreflabel="Annex A.39">
      <title>Upload a CRL</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperUploadCRL
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to upload a CRL.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. CRLs supported by the DUT as indicated by the MaximumNumberOfCRLs capability. The DUT shall have enough free storage capacity for one additional CRL.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The CRL alias (<emphasis role="italic">alias</emphasis>) and the CRL (<emphasis role="italic">crl</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The CRL identifier (<emphasis role="italic">crlID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">UploadCRL</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Crl =: <emphasis role="italic">crl</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Alias := "Test CRL Alias"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    anyParameters skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">UploadCRLResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CrlID =: <emphasis role="italic">crlID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">UploadCRLResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.40-->
    <section xml:id="Annex_HelperDeleteCertPathValidationPolicy" xreflabel="Annex A.40">
      <title>Delete a certification path validation policy</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteCertPathValidationPolicy
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete a certification path validation policy.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Certification path validation policy supported by the DUT as indicated by the MaximumNumberOfCertificationPathValidationPolicies capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The identifier of certification path validation policy (<emphasis role="italic">certPathValidationPolicyID</emphasis>) to delete.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteCertPathValidationPolicy</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertPathValidationPolicyID =: <emphasis role="italic">certPathValidationPolicyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">DeleteCertPathValidationPolicyResponse</emphasis> message.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">DeleteCertPathValidationPolicyResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.41-->
    <section xml:id="Annex_HelperPrepareCertificate" xreflabel="Annex A.41">
      <title>Prepare certificate on the DUT</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperPrepareCertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create or upload certificate on the DUT.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Create self-signed certificate supported by the DUT as indicated by the SelfSignedCertificateCreationWithRSA capability and RSA key pair generation supported by the DUT as indicated by the RSAKeyPairGeneration capability or create PCKS#10 supported by the DUT as indicated by the PKCS10ExternalCertificationWithRSA capability or certificate along with an RSA private key in a PKCS#12 data structure upload is supported by the DUT as indicated by the PKCS12CertificateWithRSAPrivateKeyUpload capability. The DUT shall have enough free storage capacity for one additional certification path. The DUT shall have enough free storage capacity for one additional RSA key pair. The DUT shall have enough free storage capacity for one additional certificate.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifier of the new certificate (<emphasis role="italic">certID</emphasis>), RSA key pair (<emphasis role="italic">keyID</emphasis>) and certification path if any (<emphasis role="italic">certificationPathID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS10ExternalCertificationWithRSA:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding private key (out <emphasis role="italic">privateKey</emphasis>) by following the procedure described in <xref linkend="Annex_HelperCreateCACertificate"/>.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client uploads a CA certificate (out <emphasis role="italic">certID</emphasis>, in <emphasis role="italic">CAcert</emphasis>) and new RSA key pair with the public key from the CA certificate (out <emphasis role="italic">keyID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadCertificate"/>.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set:
                    <itemizedlist>
                      <listitem>
                        <para>
                          <emphasis role="italic">certificationPathID</emphasis> := null
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Skip other steps.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SelfSignedCertificateCreationWithRSA and <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.RSAKeyPairGeneration:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client creates a self-signed certificate (out <emphasis role="italic">certID</emphasis>) and related RSA key pair (out <emphasis role="italic">keyID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateSelfSignedCertificate"/>.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set:
                    <itemizedlist>
                      <listitem>
                        <para>
                          <emphasis role="italic">certificationPathID</emphasis> := null
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Skip other steps.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS12CertificateWithRSAPrivateKeyUpload:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client creates a CA certificate (out <emphasis role="italic">CAcert</emphasis>) and a corresponding public key (out <emphasis role="italic">publicKey</emphasis>) in the certificate along with the corresponding private key (out <emphasis role="italic">privateKey</emphasis>) in the form of a PKCS#12 file (out <emphasis role="italic">PKCS12data</emphasis>) and uploads it with certification path ID (out <emphasis role="italic">certificationPathID</emphasis>) and key pair ID (out <emphasis role="italic">keyID</emphasis>) by following the procedure described in <xref linkend="Annex_HelperUploadPKCS12"/>.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">GetCertificationPath</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CertificationPathID =: <emphasis role="italic">certificationPathID</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with a <emphasis role="bold">GetCertificationPathResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CertificationPath.CertificateID[0] =: <emphasis role="italic">certID</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          •CertificationPath.Alias
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS10ExternalCertificationWithRSA = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.SelfSignedCertificateCreationWithRSA = false or skipped or <emphasis role="italic">cap</emphasis>.KeystoreCapabilities.RSAKeyPairGeneration = false or skipped) and (<emphasis role="italic">cap</emphasis>.KeystoreCapabilities.PKCS12CertificateWithRSAPrivateKeyUpload = false or skipped), FAIL the test and skip other steps.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">GetCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.42-->
    <section xml:id="Annex_HelperCreateCertPathValidationPolicy" xreflabel="Annex A.42">
      <title>Create a certification path validation policy</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCertPathValidationPolicy
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a certification path validation policy.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Certification path validation policy supported by the DUT as indicated by the MaximumNumberOfCertificationPathValidationPolicies capability. The DUT shall have enough free storage capacity for one additional certification path validation policy.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The certification path validation policy alias (<emphasis role="italic">alias</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The certification path validation policy identifier (<emphasis role="italic">certPathValidationPolicyID</emphasis>), related certificate (<emphasis role="italic">certID</emphasis>), RSA key pair (<emphasis role="italic">keyID</emphasis>) and certification path if any (out <emphasis role="italic">certificationPathID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client prepares certificate (out <emphasis role="italic">certID</emphasis>), related RSA key pair (out <emphasis role="italic">keyID</emphasis>) and certification path if any (out <emphasis role="italic">certificationPathID</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperPrepareCertificate"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates certification path validation policy identifier (out <emphasis role="italic">certPathValidationPolicyID</emphasis>) with specified alias (in <emphasis role="italic">alias</emphasis>) and the certificate identifier (in <emphasis role="italic">certID</emphasis>) for trust anchor by following the procedure mentioned in <xref linkend="Annex_HelperCreateCertPathValidationPolicyWithCertID"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>
    <!--A.43-->
    <section xml:id="Annex_HelperCreateSignedCertificate" xreflabel="Annex A.43">
      <title>Provide certificate signed by private key of other certificate</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateSignedCertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create an X.509 certificate signed by private key of other certificate.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The subject (<emphasis role="italic">subject</emphasis>) of certificate and private key (<emphasis role="italic">inputPrivateKey</emphasis>) of the CA-certificate (<emphasis role="italic">cert</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> An X.509 certificate (<emphasis role="italic">cert</emphasis>) signed by input private key that is compliant to [RFC 5280] and a corresponding private key (<emphasis role="italic">privateKey</emphasis>) and public key (<emphasis role="italic">publicKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates an X.509 certificate signed by <emphasis role="italic">inputPrivateKey</emphasis> that is compliant to [RFC 5280] and has the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    version:= v3
                  </para>
                </listitem>
                <listitem>
                  <para>
                    signature := sha1-WithRSAEncryption
                  </para>
                </listitem>
                <listitem>
                  <para>
                    validity := validity from <emphasis role="italic">cert</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    subject := <emphasis role="italic">subject</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    issuerDN := subjectDN from <emphasis role="italic">cert</emphasis>
                  </para>
                </listitem>
              </itemizedlist>


            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> ONVIF Client may return the same certificate in subsequent invocations of this procedure for the same subject and private key.
      </para>
    </section>
    <!--A.44-->
    <section xml:id="Annex_HelperCreateCertPathValidationPolicyWithCertID" xreflabel="Annex A.44">
      <title>Create a certification path validation policy with provided certificate identifier</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCertPathValidationPolicyWithCertID
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create a certification path validation policy with provided certificate identifier.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Certification path validation policy supported by the DUT as indicated by the MaximumNumberOfCertificationPathValidationPolicies capability. The DUT shall have enough free storage capacity for one additional certification path validation policy.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The certification path validation policy alias (<emphasis role="italic">alias</emphasis>) and the certificate identifier (<emphasis role="italic">certID</emphasis>) for trust anchor.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The certification path validation policy identifier (<emphasis role="italic">certPathValidationPolicyID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreateCertPathValidationPolicy</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Alias := <emphasis role="italic">alias</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Parameters.RequireTLSWWWClientAuthExtendedKeyUsage skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Parameters.UseDeltaCRLs = true
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Parameters.anyParameters skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    TrustAnchor[0].CertificateID := <emphasis role="italic">certID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    anyParameters skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateCertPathValidationPolicyResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertPathValidationPolicyID := <emphasis role="italic">certPathValidationPolicyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>


            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreateCertPathValidationPolicyResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.45-->
    <section xml:id="Annex_HelperCreateCRLForCertificate" xreflabel="Annex A.45">
      <title>Provide CRL for specified certificate</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCRLForCertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create CRL for specified certificate signed with specified key.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The certificate for revocation (<emphasis role="italic">cert</emphasis>) and private key for signature (<emphasis role="italic">privateKey</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> A CRL (<emphasis role="italic">crl</emphasis>) that is compliant to [RFC 5280].
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates a CRL that is compliant to [RFC 5280] signed signed by private key <emphasis role="italic">privateKey</emphasis> and has the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    tbsCertList[0].version := v2
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].signature.algorithm := sha1-WithRSAEncryption
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].issuer := "ONVIF_DTT"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].thisUpdate := [current time] - 1 day
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].nextUpdate skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].revokedCertificates[0].userCertificate := <emphasis role="italic">cert</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    tbsCertList[0].revokedCertificates[0].revocationDate := [current time] - 1 day - 1 hour
                  </para>
                </listitem>
                <listitem>
                  <para>
                    signatureAlgorithm.algorithm := sha1-WithRSAEncryption
                  </para>
                </listitem>
                <listitem>
                  <para>
                    signatureValue := sha1-WithRSAEncryption signature
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> ONVIF Client may return the same CRL in subsequent invocations of this procedure.
      </para>
    </section>
    <!--A.46-->
    <section xml:id="Annex_HelperUploadPassphrase" xreflabel="Annex A.46">
      <title>Upload a passphrase</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperUploadPassphrase
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to upload a passphrase.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. Passphrase handling is supported by the DUT as indicated by the MaximumNumberOfPassphrases capability. The DUT shall have enough free storage capacity for one additional passphrase.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The passphrase (<emphasis role="italic">passphrase</emphasis>) and passphrase alias (<emphasis role="italic">alias</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The passphrase identifier (<emphasis role="italic">passphraseID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">UploadPassphrase</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Passphrase := <emphasis role="italic">passphrase</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    PassphraseAlias := <emphasis role="italic">alias</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">UploadPassphraseResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    PassphraseID =: <emphasis role="italic">passphraseID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">UploadPassphraseResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.47-->
    <section xml:id="Annex_HelperPreparationRemoveServerCertificateAssignment" xreflabel="Annex A.47">
      <title>Remove Server Certificate Assignment</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperPreparationRemoveServerCertificateAssignment
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper to disable HTTPS and remove Server Certificate Assignment if required.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. TLS is supported by the DUT as indicated by the TLSServerSupported capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Initial HTTPS State (<emphasis role="italic">initialHTTPSState</emphasis>). Removed Server Certificate Assignment (<emphasis role="italic">certPathID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetNetworkProtocols</emphasis> to retrieve configured network protocols of the DUT.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with a <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NetworkProtocols list =: <emphasis role="italic">networkProtocolsList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">networkProtocolsList</emphasis> does not contain network protocol with NetworkProtocols.Name is equal to HTTPS, FAIL the test and skip other steps.
            </para>
          </listitem>
          <listitem>
            <para>
              If HTTPS protocol with NetworkProtocols.Name is equal to HTTPS from <emphasis role="italic">networkProtocolsList</emphasis> has NetworkProtocols.Enabled equal to true:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    Set <emphasis role="italic">initialHTTPSState</emphasis> := NetworkProtocols value for HTTPS from <emphasis role="italic">networkProtocolsList</emphasis>.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          NetworkProtocols[0].Name := HTTPS
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          NetworkProtocols[0].Enabled := false
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          NetworkProtocols[0].Port := <emphasis role="italic">initialHTTPSState</emphasis>.Port
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          NetworkProtocols[0].Extension skipped
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set <emphasis role="italic">HTTPSStateChangedFlag</emphasis> := true.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    out <emphasis role="italic">cap</emphasis> - Security Configuration Service Capabilities
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If number of items in <emphasis role="italic">initialCertificationPathList</emphasis> = <emphasis role="italic">cap</emphasis>.TLSServerCapabilities.MaximumNumberOfTLSCertificationPaths:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    Set <emphasis role="italic">certPathID</emphasis> := <emphasis role="italic">initialCertificationPathList</emphasis>[0].
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">RemoveServerCertificateAssignment</emphasis> .
                    <itemizedlist>
                      <listitem>
                        <para>
                          CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with a <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">RemoveServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
      </para>
    </section>
    <!--A.48-->
    <section xml:id="Annex_HelperRestoreServerCertificateAssignment" xreflabel="Annex A.48">
      <title>Restore Server Certificate Assignment</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperRestoreServerCertificateAssignment
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper to restore HTTPS and Server Certificate Assignment if required.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. TLS is supported by the DUT as indicated by the TLSServerSupported capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Initial HTTPS State (<emphasis role="italic">initialHTTPSState</emphasis>). Removed Server Certificate Assignment (<emphasis role="italic">certPathID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              If <emphasis role="italic">certPathID</emphasis> specified:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">initialHTTPSState</emphasis> specified:
              <orderedlist numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          NetworkProtocols[0] := <emphasis role="italic">initialHTTPSState</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with a <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
      </para>
    </section>
    <!--A.49-->
    <!--copy from RTSS for Media2-->
    <section xml:id="Annex_HelperCheckAndConfigureHTTPS" xreflabel="Annex A.49">
      <title>Configuring HTTPS if Required</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCheckAndConfigureHTTPS
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper Procedure to check and configure HTTPS using Security Configuration Service if required.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> RTP/RTSP/HTTPS feature is supported by DUT. HTTPS is configured on the DUT, if TLS Server is not supported by DUT. Security Configuration Service is received from the DUT, if TLS Server is supported by DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetNetworkProtocols</emphasis> request.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NetworkProtocols list =: <emphasis role="italic">networkProtocolsList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">networkProtocolsList</emphasis> contains item with Name = HTTPS and Enabled = true, return to the test and skip other procedure steps.
            </para>
          </listitem>
          <listitem>
            <para>
              If the DUT does not support TLS Server, FAIL the test and skip other steps.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client configures HTTPS by following the procedure mentioned in <xref linkend="Annex_HelperConfigureHTTPS"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">GetNetworkProtocolsResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.50-->
    <!--copy from RTSS for Media2-->
    <section xml:id="Annex_HelperConfigureHTTPS" xreflabel="Annex A.50">
      <title>Configuring HTTPS using Security Configuration Service</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperConfigureHTTPS
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper Procedure to configure HTTPS using Security Configuration Service.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. TLS Server is supported by the DUT.
        The DUT shall have enough free storage capacity for one additional RSA key pair.
        The DUT shall have enough free storage capacity for one additional certificate.
        The DUT shall have enough free storage capacity for one additional certification path.
        The DUT shall have enough free storage capacity for one additional server certificate assignment.
        Current time of the DUT shall be at least Jan 01, 1970.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetAssignedServerCertificates</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with a <emphasis role="bold">GetAssignedServerCertificatesResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID list =: <emphasis role="italic">initialCertificationPathList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If number of items in <emphasis role="italic">initialCertificationPathList</emphasis> >= 1, go to the step <xref linkend="Annex_HelperConfigureHTTPS.3"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              If Create self-signed certificate is supported by the DUT:
              <orderedlist  numeration="arabic" inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client adds server certification assignment and creates related certification path, the self-signed certificate and the RSA key pair by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_SSCertificate"/>.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Go to the step <xref linkend="Annex_HelperConfigureHTTPS.3"/>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates a certification path based on CA-signed certificate and related RSA key pair and a corresponding CA certificate and related RSA key pair by following the procedure mentioned in <xref linkend="Annex_HelperAddServerCertAssign_CACertificate"/>.
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperConfigureHTTPS.3">
            <para>
              ONVIF Client invokes <emphasis role="bold">SetNetworkProtocols</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NetworkProtocols[0].Name := HTTPS
                  </para>
                </listitem>
                <listitem>
                  <para>
                    NetworkProtocols[0].Enabled := true
                  </para>
                </listitem>
                <listitem>
                  <para>
                    NetworkProtocols[0].Port := 443
                  </para>
                </listitem>
                <listitem>
                  <para>
                    NetworkProtocols[0].Extension skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client waits until <emphasis role="italic">operationDelay</emphasis> timeout expires.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client checks that HTTPS protocol Port 443 is open. If HTTPS protocol port 443 is not open, FAIL the test and skip other steps.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">SetNetworkProtocolsResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
      </para>
    </section>
    <!--A.51-->
    <!--copy from RTSS for Media2-->
    <section xml:id="Annex_HelperAddServerCertAssign_CACertificate" xreflabel="Annex A.51">
      <title>Add server certificate assignment with corresponding certification path, CA certificate and RSA key pair</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperAddServerCertAssign_CACertificate
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper Procedure to configure HTTPS using Security Configuration Service.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Security Configuration Service is received from the DUT. TLS Server is supported by the DUT.
        Create PCKS#10 supported by the DUT. RSA key pair generation is supported by the DUT.
        The DUT shall have enough free storage capacity for one additional RSA key pair.
        The DUT shall have enough free storage capacity for one additional certificate.
        The DUT shall have enough free storage capacity for one additional certification path.
        The DUT shall have enough free storage capacity for one additional server certificate assignment.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The identifiers of the new certification path (<emphasis role="italic">certPathID</emphasis>), certificate (<emphasis role="italic">certID</emphasis>) and RSA key pair (<emphasis role="italic">keyID</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client creates an RSA key pair by following the procedure mentioned in <xref linkend="Annex_HelperCreateRSAKeyPair"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    out <emphasis role="italic">keyID</emphasis> - RSA key pair
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreatePKCS10CSR</emphasis> with parameter
              <itemizedlist>
                <listitem>
                  <para>
                    Subject := subject (see <xref linkend="Annex_SubjectForAServerCertificate"/>)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    KeyID := <emphasis role="italic">keyID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CSRAttribute skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    SignatureAlgorithm.algorithm := 1.2.840.113549.1.1.5 (OID of SHA-1 with RSA Encryption algorithm)
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    PKCS10CSR =: <emphasis role="italic">pkcs10</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client creates an CA certificate by following the procedure mentioned in <xref linkend="Annex_HelperCreateCACertificate"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    out <emphasis role="italic">CAcert</emphasis> - CA certificate
                  </para>
                </listitem>
                <listitem>
                  <para>
                    out <emphasis role="italic">privateKey</emphasis> - private key for the CA certificate
                  </para>
                </listitem>
                <listitem>
                  <para>
                    out <emphasis role="italic">publicKey</emphasis> - public key for the CA certificate
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Create an [RFC5280] compliant X.509 certificate (<emphasis role="italic">cert</emphasis>) from the PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>) with the following properties:
              <itemizedlist>
                <listitem>
                  <para>
                    version:= v3
                  </para>
                </listitem>
                <listitem>
                  <para>
                    signature := sha1-WithRSAEncryption
                  </para>
                </listitem>
                <listitem>
                  <para>
                    subject := subject from the PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    subject public key := subject public key in the PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    validity := not before 19700101000000Z and not after 99991231235959Z
                  </para>
                </listitem>
                <listitem>
                  <para>
                    certificate signature is generated with the private key (<emphasis role="italic">privateKey</emphasis>) in the CA certificate (<emphasis role="italic">CAcert</emphasis>)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    certificate extensions := the X.509v3 extensions from the PKCS#10 request (<emphasis role="italic">pkcs10</emphasis>)
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">UploadCertificate</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Certificate := <emphasis role="italic">cert</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Alias := "ONVIF_Test1"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    PrivateKeyRequired := true
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with a <emphasis role="bold">UploadCertificateResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificateID =: <emphasis role="italic">certID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    KeyID =: <emphasis role="italic">keyID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreateCertificationPath</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertficateIDs.CertificateID[0] := <emphasis role="italic">certID</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Alias := "ONVIF_Test2"
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with a <emphasis role="bold">CreateCertificationPathResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID =: <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">AddServerCertificateAssignment</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CertificationPathID := <emphasis role="italic">certPathID</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with an <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client waits for time <emphasis role="italic">operationDelay</emphasis>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreatePKCS10CSRResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">UploadCertificateResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreateCertificationPathResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">AddServerCertificateAssignmentResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
      </para>
    </section>
    <!--A.52-->
    <section xml:id="Annex_HelperBasicTLSHandshakeProtocolVersionAlert" xreflabel="Annex A.52">
      <title>Basic TLS Handshake With Protocol Version Alert</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperBasicTLSHandshakeProtocolVersionAlert
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to verify basic TLS handshake in case of "protocol_version" alert message.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> TLS is supported by the DUT as indicated by the TLSServerSupported capability. TLS is configured. HTTPS protocol is enabled.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Disabled TLS version (<emphasis role="italic">disabledTLSVersion</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">ClientHello</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    ClientVersion := <emphasis role="italic">disabledTLSVersion</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Random number := <emphasis role="italic">ClientRandom[32]</emphasis>, that is 4-byte number that consists of the client’s date and time plus a 28-byte randomly generated number
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CipherSuites := list of common CipherSuites used by TLS 1.0, SSL 2.0 and 3.0
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Compression methods list := NONE
                  </para>
                </listitem>
                <listitem>
                  <para>
                    &lt;SessionID&gt; skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT TLS server responds with a <emphasis role="bold">protocol_version</emphasis> alert message and close connection.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">protocol_version</emphasis> alert message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </appendix>
</book>
