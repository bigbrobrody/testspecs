<?xml version="1.0" encoding="UTF-8"?>
<!--For PDF version (standard)-->
<!-- <?xml-stylesheet href="docbook/xsl/fo/docbook.xsl" type="text/xsl" ?>-->
<!--For PDF version-->
<!-- <?xml-stylesheet href="ONVIF-stylesheets/onvif-specification-fo-us.xsl" type="text/xsl" ?>-->
<!--For online version-->
<?xml-stylesheet href="docbook-css/docbook.xsl" type="text/xsl" ?>
<!--For PDF version - New ONVIF-->
<!--<?xml-stylesheet href="../ONVIFNew-stylesheets/onvif-specification-fo-us.xsl" type="text/xsl" ?>-->
<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:xml="http://www.w3.org/XML/1998/namespace"
      xsi:schemaLocation="http://docbook.org/ns/docbook http://docbook.org/xml/5.0/xsd/docbook.xsd"
      version="0.1"
      xml:id="ONVIF_Profile_Imaging_Client_TS">
  <info>
    <orgname>
      <phrase>
        <trademark class="registered">ONVIF</trademark>
      </phrase>
    </orgname>
    <title>Credential Device Test Specification</title>
    <subtitle>Version 20.12</subtitle>
    <date>December 2020</date>
    <copyright>
      <year>2020</year>
      <holder>ONVIF, Inc. All rights reserved.</holder>
    </copyright>
    <address>
      <uri>www.onvif.org</uri>
    </address>
    <legalnotice role="notices">
      <para>
        Recipients of this document may copy, distribute, publish, or display this
        document so long as this copyright notice, license and disclaimer are retained with
        all copies of the document. No license is granted to modify this document.
      </para>
      <para>
        THIS DOCUMENT IS PROVIDED "AS IS," AND THE CORPORATION AND ITS MEMBERS AND THEIR
        AFFILIATES, MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
        NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
        NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THIS DOCUMENT ARE SUITABLE FOR ANY
        PURPOSE; OR THAT THE IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY PATENTS,
        COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
      </para>
      <para>
        IN NO EVENT WILL THE CORPORATION OR ITS MEMBERS OR THEIR AFFILIATES BE LIABLE FOR
        ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, PUNITIVE OR CONSEQUENTIAL DAMAGES,
        ARISING OUT OF OR RELATING TO ANY USE OR DISTRIBUTION OF THIS DOCUMENT, WHETHER OR
        NOT (1) THE CORPORATION, MEMBERS OR THEIR AFFILIATES HAVE BEEN ADVISED OF THE
        POSSIBILITY OF SUCH DAMAGES, OR (2) SUCH DAMAGES WERE REASONABLY FORESEEABLE, AND
        ARISING OUT OF OR RELATING TO ANY USE OR DISTRIBUTION OF THIS DOCUMENT. THE
        FOREGOING DISCLAIMER AND LIMITATION ON LIABILITY DO NOT APPLY TO, INVALIDATE, OR
        LIMIT REPRESENTATIONS AND WARRANTIES MADE BY THE MEMBERS AND THEIR RESPECTIVE
        AFFILIATES TO THE CORPORATION AND OTHER MEMBERS IN CERTAIN WRITTEN POLICIES OF THE
        CORPORATION.
      </para>
    </legalnotice>
    <revhistory>
      <revision>
        <revnumber>15.06</revnumber>
        <date>Jul, 2015</date>
        <revdescription>
          <para>
            First issue of Credentials Test Specification
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>17.06</revnumber>
        <date>Feb 21, 2017</date>
        <revdescription>
          <para>
            CREATE CREDENTIAL - NOT EMPTY CREDENTIAL TOKEN updated according to #1357
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>17.06</revnumber>
        <date>Mar 15, 2017</date>
        <revdescription>
          <para>Note added into the following tests according to #1366:</para>
          <para>
            CREATE CREDENTIAL - VALIDITY VALUES
          </para>
          <para>
            MODIFY CREDENTIAL - VALIDITY VALUES
          </para>
          <para>
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>17.06</revnumber>
        <date>Apr 27, 2017</date>
        <revdescription>
          <para>The following test cases were updated according to #1385:</para>
          <para>
            CREDENTIAL-3-1-6 CREATE CREDENTIAL (DISABLED)
          </para>
          <para>
            CREDENTIAL-3-1-5 CREATE CREDENTIAL (ENABLED)
          </para>
          <para>
            CREDENTIAL-3-1-7 MODIFY CREDENTIAL
          </para>
          <para>
            CREDENTIAL-5-1-2 SET CREDENTIAL IDENTIFIER – ADDING NEW TYPE
          </para>
          <para>
            CREDENTIAL-5-1-3 SET CREDENTIAL IDENTIFIER – REPLACE OF THE SAME TYPE
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>17.12</revnumber>
        <date>Aug 17, 2017</date>
        <revdescription>
          <para>
            Current document name was changed from Credential Test Specification to Credential Device Test Specification.
          </para>
          <para>
            The document formatting was updated.
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.06</revnumber>
        <date>Jun 21, 2018</date>
        <revdescription>
          <para>Reformatting document using new template</para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.12</revnumber>
        <date>Oct 12, 2018</date>
        <revdescription>
          <para>
            The following were updated in the scope of #1672:
          </para>
          <para>
            Scope\Credential (updated with SetCredential)
          </para>
          <para>
            Test Policy\Credential (updated with SetCredential)
          </para>
          <para>
            CREDENTIAL-3-1-16 SET NEW CREDENTIAL (ENABLED) (added)
          </para>
          <para>
            CREDENTIAL-3-1-17 SET NEW CREDENTIAL (DISABLED) (added)
          </para>
          <para>
            CREDENTIAL-3-1-18 SET CREDENTIAL (added)
          </para>
          <para>
            Annex A.21 Create Pull Point Subscription (added)
          </para>
          <para>
            Annex A.22 Delete Subscription (added)
          </para>
          <para>
            Annex A.23 Retrieve Credential Changed Event by PullPoint (added)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>18.12</revnumber>
        <date>Dec 21, 2018</date>
        <revdescription>
          <para>Switching Hub description in 'Network Configuration for DUT' section was updated according to #1737</para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.06</revnumber>
        <date>Jan 17, 2019</date>
        <revdescription>
          <para>
            The following were updated in the scope of #1679:
          </para>
          <para>
            CREDENTIAL-1-1-2 GET SERVICES AND GET CREDENTIAL SERVICE CAPABILITIES CONSISTENCY (DefaultCredentialSuspensionDuration was added to the Note)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.12</revnumber>
        <date>Aug 07, 2019</date>
        <revdescription>
          <para>
            The following were added in the scope of #1880:
          </para>
          <para>
            Scope\Whitelist Management
          </para>
          <para>
            Test Policy\Whitelist Management
          </para>
          <para>
            Whitelist Management section
          </para>
          <para>
            CREDENTIAL-10-1-1 GET WHITELIST - START REFERENCE AND LIMIT
          </para>
          <para>
            CREDENTIAL-10-1-2 GET WHITELIST - FILTERS
          </para>
          <para>
            CREDENTIAL-10-1-3 ADD IDENTIFIER TO WHITELIST
          </para>
          <para>
            CREDENTIAL-10-1-4 REMOVE IDENTIFIER FROM WHITELIST
          </para>
          <para>
            CREDENTIAL-10-1-5 DELETE WHITELIST
          </para>
          <para>
            Annex A.24 Add Number of Credential Identifiers to Whitelist
          </para>
          <para>
            Annex A.25 Get Whitelist
          </para>
          <para>
            Annex A.26 Add Identifiers to Blacklist
          </para>
          <para>
            Annex A.27 Get Blacklist
          </para>
          <para>
            Annex A.28 Add Identifiers to Whitelist
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.12</revnumber>
        <date>Aug 08 2019</date>
        <revdescription>
          <para>
            The following were updated in the scope of #1880 and #1882:
          </para>
          <para>
            CREDENTIAL-1-1-2 GET SERVICES AND GET CREDENTIAL SERVICE CAPABILITIES CONSISTENCY (ClientSuppliedTokenSupported, SupportedExemptionType, MaxWhitelistedItems, and MaxBlacklistedItems were added to the Note)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.12</revnumber>
        <date>Aug 08, 2019</date>
        <revdescription>
          <para>
            The following were added in the scope of #1882:
          </para>
          <para>
            Scope\Blacklist Management
          </para>
          <para>
            Test Policy\Blacklist Management
          </para>
          <para>
            Blacklist Management section
          </para>
          <para>
            CREDENTIAL-11-1-1 GET BLACKLIST - START REFERENCE AND LIMIT
          </para>
          <para>
            CREDENTIAL-11-1-2 GET BLACKLIST - FILTERS
          </para>
          <para>
            CREDENTIAL-11-1-3 ADD IDENTIFIER TO BLACKLIST
          </para>
          <para>
            CREDENTIAL-11-1-4 REMOVE IDENTIFIER FROM BLACKLIST
          </para>
          <para>
            CREDENTIAL-11-1-5 DELETE BLACKLIST
          </para>
          <para>
            Annex A.29 Add Number of Credential Identifiers to Blacklist
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.12</revnumber>
        <date>Oct 15, 2019</date>
        <revdescription>
          <para>
            The following were added in the scope of #1898:
          </para>
          <para>
            Test Policy\Whitelist Management (updated with check for adding the same credential identifier to the list)
          </para>
          <para>
            Test Policy\Blacklist Management (updated with check for adding the same credential identifier to the list)
          </para>
          <para>
            CREDENTIAL-10-1-3 ADD IDENTIFIER TO WHITELIST (updated with check for adding the same credential identifier to the list, steps 17-20)
          </para>
          <para>
            CREDENTIAL-11-1-3 ADD IDENTIFIER TO BLACKLIST (updated with check for adding the same credential identifier to the list, steps 17-20)
          </para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>19.12</revnumber>
        <date>Oct 23, 2019</date>
        <revdescription>
          <para>
            The following were added in the scope of #1880 and #1882:
          </para>
          <para>
            Annex A.30 Generate Number of Credential Identifiers (was added)
          </para>
          <para>
            Annex A.24 Add Number of Credential Identifiers to Whitelist (was updated to use A.30)
          </para>
          <para>
            Annex A.29 Add Number of Credential Identifiers to Blacklist (was updated to use A.30)
          </para>
          <para>
            Annex A.26 Add Identifiers to Blacklist (was updated to add list of credential identifiers)
          </para>
          <para>
            Annex A.28 Add Identifiers to Whitelist (was updated to add list of credential identifiers)
          </para>
          <para>
            CREDENTIAL-10-1-3 ADD IDENTIFIER TO WHITELIST (was updated to use A.30)
          </para>
          <para>
            CREDENTIAL-10-1-4 REMOVE IDENTIFIER FROM WHITELIST (was updated to use A.30)
          </para>
          <para>
            CREDENTIAL-10-1-5 DELETE WHITELIST (was updated to use A.30)
          </para>
          <para>
            CREDENTIAL-11-1-3 ADD IDENTIFIER TO BLACKLIST (was updated to use A.30)
          </para>
          <para>
            CREDENTIAL-11-1-4 REMOVE IDENTIFIER FROM BLACKLIST (was updated to use A.30)
          </para>
          <para>
            CREDENTIAL-11-1-5 DELETE BLACKLIST (was updated to use A.30)
          </para>
        </revdescription>
      </revision>
     <revision>
        <revnumber>20.06</revnumber>
        <date>May 13, 2020</date>
        <revdescription>
          <para>Pre-Requisite of the following test cases updated with adding of Pull-Point Notification feature according to #1999:</para>
        <para>CREDENTIAL-3-1-5	CREATE CREDENTIAL (ENABLED)</para>
<para>CREDENTIAL-3-1-6	CREATE CREDENTIAL (DISABLED)</para>
<para>CREDENTIAL-3-1-7	MODIFY CREDENTIAL</para>
<para>CREDENTIAL-3-1-8	DELETE CREDENTIAL</para>
<para>CREDENTIAL-3-1-16	SET NEW CREDENTIAL (ENABLED)</para>
<para>CREDENTIAL-3-1-17	SET NEW CREDENTIAL (DISABLED)</para>
<para>CREDENTIAL-3-1-18	SET CREDENTIAL</para>
<para>CREDENTIAL-4-1-2	CHANGE CREDENTIAL STATE</para>
<para>CREDENTIAL-5-1-2	SET CREDENTIAL IDENTIFIER – ADDING NEW TYPE</para>
<para>CREDENTIAL-5-1-3	SET CREDENTIAL IDENTIFIER – REPLACE OF THE SAME TYPE</para>
<para>CREDENTIAL-5-1-4	DELETE CREDENTIAL IDENTIFIER</para>
<para>CREDENTIAL-6-1-2	SET CREDENTIAL ACCESS PROFILES - ADDING NEW ACCESS PROFILE</para>
<para>CREDENTIAL-6-1-3	SET CREDENTIAL ACCESS PROFILES - UPDATING ACCESS PROFILE</para>
<para>CREDENTIAL-6-1-4	DELETE CREDENTIAL ACCESS PROFILES</para>
<para>CREDENTIAL-7-1-1	RESET ANTIPASSBACK VIOLATIONS</para>
        </revdescription>
      </revision>
      <revision>
        <revnumber>20.06</revnumber>
        <date>May 18, 2020</date>
        <revdescription>
          <para>Pre-Requisite of the following test cases updated with adding of Event Service according to #1999:</para>        
<para>CREDENTIAL-8-1-2	CONFIGURATION CREDENTIAL CHANGED EVENT</para>
<para>CREDENTIAL-8-1-3	CONFIGURATION CREDENTIAL REMOVED EVENT</para>
<para>CREDENTIAL-8-1-4	CREDENTIAL STATE ENABLED EVENT</para>
<para>CREDENTIAL-8-1-5	CREDENTIAL STATE ANTIPASSBACK VIOLATION EVENT (PROPERTY EVENT)</para>
        </revdescription>
      </revision>
    <revision>
        <revnumber>20.12</revnumber>
        <date>Oct 28, 2020</date>
        <revdescription>
          <para>Pre-Requisite of the following test cases updated with adding of Credential Entity according to #1866:</para>        
<para>CREDENTIAL-2-1-1	GET CREDENTIAL INFO</para>
<para>CREDENTIAL-2-1-2	GET CREDENTIAL INFO LIST - LIMIT</para>
<para>CREDENTIAL-2-1-3	GET CREDENTIAL INFO LIST - START REFERENCE AND LIMIT</para>
<para>CREDENTIAL-2-1-4	GET CREDENTIAL INFO LIST - NO LIMIT</para>
<para>CREDENTIAL-2-1-5	GET CREDENTIAL INFO WITH INVALID TOKEN</para>
<para>CREDENTIAL-2-1-6	GET CREDENTIAL INFO - TOO MANY ITEMS</para>
<para>CREDENTIAL-3-1-1	GET CREDENTIALS</para>
<para>CREDENTIAL-3-1-2	GET CREDENTIAL LIST - LIMIT</para>
<para>CREDENTIAL-3-1-3	GET CREDENTIAL LIST - START REFERENCE AND LIMIT</para>
<para>CREDENTIAL-3-1-4	GET CREDENTIAL LIST - NO LIMIT</para>
<para>CREDENTIAL-3-1-5	CREATE CREDENTIAL (ENABLED)</para>
<para>CREDENTIAL-3-1-6	CREATE CREDENTIAL (DISABLED)</para>
<para>CREDENTIAL-3-1-7	MODIFY CREDENTIAL</para>
<para>CREDENTIAL-3-1-8	DELETE CREDENTIAL</para>
<para>CREDENTIAL-3-1-9	GET CREDENTIALS WITH INVALID TOKEN</para>
<para>CREDENTIAL-3-1-10	GET CREDENTIALS - TOO MANY ITEMS</para>
<para>CREDENTIAL-3-1-11	CREATE CREDENTIAL - NOT EMPTY CREDENTIAL TOKEN</para>
<para>CREDENTIAL-3-1-12	MODIFY CREDENTIAL WITH INVALID TOKEN</para>
<para>CREDENTIAL-3-1-13	DELETE CREDENTIAL WITH INVALID TOKEN</para>
<para>CREDENTIAL-3-1-14	CREATE CREDENTIAL - VALIDITY VALUES</para>
<para>CREDENTIAL-3-1-15	MODIFY CREDENTIAL - VALIDITY VALUES</para>
<para>CREDENTIAL-3-1-16	SET NEW CREDENTIAL (ENABLED)</para>
<para>CREDENTIAL-3-1-17	SET NEW CREDENTIAL (DISABLED)</para>
<para>CREDENTIAL-3-1-18	SET CREDENTIAL </para>
<para>CREDENTIAL-4-1-1	GET CREDENTIAL STATE</para>
<para>CREDENTIAL-4-1-2	CHANGE CREDENTIAL STATE</para>
<para>CREDENTIAL-4-1-3	GET CREDENTIAL STATE WITH INVALID TOKEN</para>
<para>CREDENTIAL-4-1-4	ENABLE CREDENTIAL WITH INVALID TOKEN</para>
<para>CREDENTIAL-4-1-5	DISABLE CREDENTIAL WITH INVALID TOKEN</para>
<para>CREDENTIAL-5-1-1	GET CREDENTIAL IDENTIFIER</para>
<para>CREDENTIAL-5-1-2	SET CREDENTIAL IDENTIFIER – ADDING NEW TYPE</para>
<para>CREDENTIAL-5-1-3	SET CREDENTIAL IDENTIFIER – REPLACE OF THE SAME TYPE</para>
<para>CREDENTIAL-5-1-4	DELETE CREDENTIAL IDENTIFIER</para>
<para>CREDENTIAL-5-1-6	GET CREDENTIAL IDENTIFIERS WITH INVALID TOKEN</para>
<para>CREDENTIAL-5-1-7	SET CREDENTIAL IDENTIFIER WITH INVALID TOKEN</para>
<para>CREDENTIAL-5-1-8	DELETE CREDENTIAL IDENTIFIER WITH INVALID CREDENTIAL TOKEN</para>
<para>CREDENTIAL-5-1-9	DELETE CREDENTIAL IDENTIFIER WITH INVALID IDENTIFIER TYPE</para>
<para>CREDENTIAL-5-1-10	DELETE CREDENTIAL IDENTIFIER - MIN IDENTIFIERS PER CREDENTIAL</para>
<para>CREDENTIAL-6-1-1	GET CREDENTIAL ACCESS PROFILES</para>
<para>CREDENTIAL-6-1-2	SET CREDENTIAL ACCESS PROFILES - ADDING NEW ACCESS PROFILE</para>
<para>CREDENTIAL-6-1-3	SET CREDENTIAL ACCESS PROFILES - UPDATING ACCESS PROFILE</para>
<para>CREDENTIAL-6-1-4	DELETE CREDENTIAL ACCESS PROFILES</para>
<para>CREDENTIAL-6-1-5	GET CREDENTIAL ACCESS PROFILES WITH INVALID TOKEN</para>
<para>CREDENTIAL-6-1-6	SET CREDENTIAL ACCESS PROFILES WITH INVALID CREDENTIAL TOKEN</para>
<para>CREDENTIAL-6-1-7	DELETE CREDENTIAL ACCESS PROFILES WITH INVALID CREDENTIAL TOKEN</para>
<para>CREDENTIAL-7-1-1	RESET ANTIPASSBACK VIOLATIONS</para>
<para>CREDENTIAL-7-1-2	RESET ANTIPASSBACK VIOLATIONS WITH INVALID TOKEN</para>
<para>CREDENTIAL-8-1-2	CONFIGURATION CREDENTIAL CHANGED EVENT</para>
<para>CREDENTIAL-8-1-3	CONFIGURATION CREDENTIAL REMOVED EVENT</para>
<para>CREDENTIAL-8-1-4	CREDENTIAL STATE ENABLED EVENT</para>
<para>CREDENTIAL-8-1-5	CREDENTIAL STATE ANTIPASSBACK VIOLATION EVENT (PROPERTY EVENT)</para>
<para>CREDENTIAL-9-1-1	GET CREDENTIAL AND GET ACCESS PROFILE INFO LIST CONSISTENCY</para>
        </revdescription>
      </revision>
    </revhistory>
  </info>
  <chapter xml:id="s.intro">
    <title>Introduction</title>
    <para>
      The goal of the ONVIF test specification set is to make it possible to realize fully interoperable IP physical security implementation from different vendors. The set of ONVIF test specification describes the test cases need to verify the [ONVIF Core Specs] and [ONVIF Conformance] requirements. In addition, the test cases are to be basic inputs for some Profile specification requirements. It also describes the test framework, test setup, pre-requisites, test policies needed for the execution of the described test cases.
    </para>
    <para>
      This ONVIF Credential Test Specification acts as a supplementary document to the [ONVIF Core Specs], illustrating test cases need to be executed and passed. In addition, this specification acts as an input document to the development of test tool that will be used to test the ONVIF device implementation conformance towards ONVIF standard. This test tool is referred as ONVIF Client hereafter.
    </para>
    <section xml:id="s.intro.scope">
      <title>Scope</title>
      <para>
        This ONVIF Credential Test Specification defines and regulates the conformance testing procedure for the ONVIF conformant devices. Conformance testing is meant to be functional black-box testing. The objective of this specification is to provide test cases to test individual requirements of ONVIF devices according to the ONVIF Credential Security Service, which is defined in [ONVIF Credential Security Service].
      </para>
      <para>
        The principal intended purposes are:
        <itemizedlist>
          <listitem>
            <para>Provide self-assessment tool for implementations.</para>
          </listitem>
          <listitem>
            <para>
              Provide comprehensive test suite coverage for [ONVIF Core Specs].
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        This specification does not address the following:
        <itemizedlist>
          <listitem>
            <para>
              Product use cases and non-functional (performance and regression) testing.
            </para>
          </listitem>
          <listitem>
            <para>
              SOAP Implementation Interoperability test i.e. Web Service Interoperability Basic Profile version 2.0 (WS-I BP 2.0).
            </para>
          </listitem>
          <listitem>
            <para>
              Full coverage of network protocol implementation test for HTTP, HTTPS, RTP, RTSP, and TLS protocols.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        The set of ONVIF Test Specification will not cover the complete set of requirements as defined in [ONVIF Core Specs]; instead, it will cover its subset.
      </para>
      <para>
        This ONVIF Credential Test Specification covers the ONVIF Credential Service, which is a functional block of [ONVIF Core Specs]. The following section gives a brief overview of each functional block and its scope.
      </para>

      <section xml:id="s.intro.scope.capabilities">
        <title>Capabilities</title>
        <para>
          The Capabilities section covers the test cases needed for getting capabilities from an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:

          <itemizedlist>
            <listitem>
              <para>
                Getting Credential service address with GetServices command via Device service
              </para>
            </listitem>
            <listitem>
              <para>
                Getting capabilities with GetServiceCapabilities command
              </para>
            </listitem>
            <listitem>
              <para>
                Getting capabilities with GetServices command via Device service
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.credential_info">
        <title>Credential Info</title>
        <para>
          The Credential Info section covers the test cases needed for getting credential list and information from an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>
                Getting credential information with GetCredentialInfo command
              </para>
            </listitem>
            <listitem>
              <para>
                Getting credential information list with GetCredentialInfoList command

              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.credential">
        <title>Credential</title>
        <para>
          The Credential section covers the test cases needed for getting credential from an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>
                Getting credential with GetCredentials command
              </para>
            </listitem>
            <listitem>
              <para>
                Getting credential list with GetCredentialList command
              </para>
            </listitem>
            <listitem>
              <para>
                Creating credential with CreateCredential command
              </para>
            </listitem>
            <listitem>
              <para>
                Modifying credential with ModifyCredential command
              </para>
            </listitem>
            <listitem>
              <para>
                Deleting credential with DeleteCredential command

              </para>
            </listitem>
            <listitem>
              <para>
                Creating and modifying credential with SetCredential command
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.credential_states">
        <title>Credential States</title>
        <para>
          The Credential States section covers the test cases needed for getting credential states from an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>
                Getting credential states with GetCredentialStates command
              </para>
            </listitem>
            <listitem>
              <para>
                Changing credential states with EnableCredential and DisableCredential commands

              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.credential_identifiers">
        <title>Credential Identifiers</title>
        <para>
          The Credential Identifiers section covers the test cases needed for getting credential identifiers for specified credential from an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>

                Getting credential identifiers with GetCredentialIdentifiers command
              </para>
            </listitem>
            <listitem>
              <para>
                Adding credential identifiers with SetCredentialIdentifier command
              </para>
            </listitem>
            <listitem>
              <para>
                Updating credential identifiers with SetCredentialIdentifier command
              </para>
            </listitem>
            <listitem>
              <para>
                Deleting credential identifiers with DeleteCredentialIdentifier command

              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.credential_access_profiles">
        <title>Credential Access Profiles</title>
        <para>
          The Credential Access Profiles section covers the test cases needed for getting credential access profiles for specified credential from an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>

                Getting credential access profiles with GetCredentialAccessProfiles command
              </para>
            </listitem>
            <listitem>
              <para>
                Adding credential access profiles with SetCredentialAccessProfile command
              </para>
            </listitem>
            <listitem>
              <para>
                Updating credential access profiles with SetCredentialAccessProfile command
              </para>
            </listitem>
            <listitem>
              <para>
                Deleting credential access profiles with DeleteCredentialAccessProfile command

              </para>
            </listitem>

          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.reset_antipassback_violations">
        <title>Reset Antipassback Violations</title>
        <para>
          The Reset Antipassback Violations section covers the test cases needed for resetting antipassback violations for specified credential from an ONVIF device.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>
                Resetting antipassback violations with ResetAntipassbackViolation command
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.credential_events">
        <title>Credential Events</title>
        <para>
          The Credential Events section covers the test cases needed for checking specified events format.
        </para>
        <para>
          The scope of this specification section is to cover the following functions:
          <itemizedlist>
            <listitem>
              <para>
                Getting event properties with GetEventProperties command
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.consistency">
        <title>Consistency</title>
        <para>
          Consistency test cases cover verification of consistency between different entities and commands.
        </para>
        <para>
          Consistency between the following entities is covered by the following test case:
          <itemizedlist>
            <listitem>
              <para>
                Credential and Access Profile Info
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>

      <section xml:id="s.intro.scope.whitelist_management">
        <title>Whitelist Management</title>
        <para>
          The Whitelist Management section covers the test cases required for managing whitelisted credential identifiers on ONVIF device.
        </para>
        <para>
          This section contains test cases for the following functionality:
          <itemizedlist>
            <listitem>
              <para>Getting whitelisted credential identifiers list with GetWhitelist command</para>
            </listitem>
            <listitem>
              <para>Adding credential identifiers to whitelist with AddToWhitelist command</para>
            </listitem>
            <listitem>
              <para>Removing credential identifiers from whitelist with RemoveFromWhitelist command</para>
            </listitem>
            <listitem>
              <para>Removing all credential identifiers from whitelist with DeleteWhitelist command</para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <section xml:id="s.intro.scope.blacklist_management">
        <title>Blacklist Management</title>
        <para>
          The Blacklist Management section covers the test cases required for managing blacklisted credential identifiers on ONVIF device.
        </para>
        <para>
          This section contains test cases for the following functionality:
          <itemizedlist>
            <listitem>
              <para>Getting blacklisted credential identifiers list with GetBlacklist command</para>
            </listitem>
            <listitem>
              <para>Adding credential identifiers to blacklist with AddToBlacklist command</para>
            </listitem>
            <listitem>
              <para>Removing credential identifiers from blacklist with RemoveFromBlacklist command</para>
            </listitem>
            <listitem>
              <para>Removing all credential identifiers from blacklist with DeleteBlacklist command</para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
  </chapter>
  <chapter xml:id="additions">
    <title>Terms and Definitions</title>
    <section xml:id="additions.definitions">
      <title>Definitions</title>
      <para>This section defines terms that are specific to the ONVIF Credential Service and tests. For a list of applicable general terms and definitions, please see [ONVIF Base Test].</para>
      <variablelist>

        <varlistentry>
          <term>Credential</term>
          <listitem>
            <para>
              A physical/tangible object, a piece of knowledge, or a facet of a person's physical being, that enables an individual access to a given physical facility or computer-based information system.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Credential Number</term>
          <listitem>
            <para>
              A sequence of bytes uniquely identifying a credential at an access point.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Credential Identifier</term>
          <listitem>
            <para>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Credential State</term>
          <listitem>
            <para>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Validity Period</term>
          <listitem>
            <para>
              From a certain point in time, to a later point in time. If a validity period is set on several entities (such as credentials, access profile and the association between them), the resulting validity period is the intersection of the three period.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Duress</term>
          <listitem>
            <para>
              Forcing a person to provide access to a secure area against that person's wishes.
            </para>
          </listitem>
        </varlistentry>

      </variablelist>
    </section>
    <section xml:id="additions.abbreviations">
      <title>Abbreviations</title>
      <para>This section describes abbreviations used in this document.</para>
      <variablelist>
        <varlistentry>
          <term>DUT</term>
          <listitem>
            <para>Device Under Test</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>HTTP</term>
          <listitem>
            <para>Hyper Text Transport Protocol</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>PACS</term>
          <listitem>
            <para>Physical Access Control System</para>
          </listitem>
        </varlistentry>

      </variablelist>
    </section>
  </chapter>
  <chapter xml:id="overview">
    <title>Test Overview</title>
    <para>
      This section provides information the test setup procedure and required prerequisites, and the test policies that should be followed for test case execution.
    </para>
    <section xml:id="overview.test_setup">
      <title>Test Setup</title>
      <section xml:id="overview.test_setup.network_configuration">
        <title>Network Configuration for DUT</title>
        <para>
          The generic test configuration for the execution of test cases defined in this document is as shown below (Figure 4.1).
        </para>
        <para>
          Based on the individual test case requirements, some of the entities in the below setup may not be needed for the execution of those corresponding test cases.
        </para>
        <figure>
          <title>Test Configuration for DUT</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="test_network.png"
                         format="PNG"
                         scalefit="0"/>
            </imageobject>
            <textobject>
              <phrase>Test Configuration for DUT</phrase>
            </textobject>
          </mediaobject>
        </figure>
        <para>
          <emphasis role="bold">DUT:</emphasis> ONVIF device to be tested. Hereafter, this is referred to as DUT (Device Under Test).
        </para>
        <para>
          <emphasis role="bold">ONVIF Client (Test Tool):</emphasis> Tests are executed by this system and it controls the behavior of the DUT. It handles both expected and unexpected behavior.
        </para>
        <para>
          <emphasis role="bold">HTTP Proxy:</emphasis> provides facilitation in case of RTP and RTSP tunneling over HTTP.
        </para>
        <para>
          <emphasis role="bold">Wireless Access Point:</emphasis> provides wireless connectivity to the devices that support wireless connection.
        </para>
        <para>
          <emphasis role="bold">DNS Server:</emphasis> provides DNS related information to the connected devices.
        </para>
        <para>
          <emphasis role="bold">DHCP Server:</emphasis> provides IPv4 Address to the connected devices.
        </para>
        <para>
          <emphasis role="bold">NTP Server:</emphasis> provides time synchronization between ONVIF Client and DUT.
        </para>
        <para>
          <emphasis role="bold">Switching Hub:</emphasis> provides network connectivity among all the test equipments in the test environment. All devices should be connected to the Switching Hub.
          When running multiple test instances in parallel on the same network, the Switching Hub should be configured to use filtering in order to avoid multicast traffic being flooded to all ports, because this may affect test stability.
        </para>
        <para>
          <emphasis role="bold">Router:</emphasis> provides router advertisements for IPv6 configuration.
        </para>
      </section>
    </section>
    <section xml:id="overview.prerequisites">
      <title>Prerequisites</title>
      <para>
        The pre-requisites for executing the test cases described in this Test Specification are:
        <itemizedlist>
          <listitem>
            <para>
              The DUT shall be configured with an IPv4 address.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be IP reachable [in the test configuration].
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be able to be discovered by the Test Tool.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT shall be configured with the time, i.e. manual configuration of UTC time and if NTP is supported by DUT then NTP time shall be synchronized with NTP Server.
            </para>
          </listitem>

        </itemizedlist>
      </para>

    </section>
    <section xml:id="overview.test_policy">
      <title>Test Policy</title>
      <para>
        This section describes the test policies specific to the test case execution of each functional block.
      </para>
      <para>
        The DUT shall adhere to the test policies defined in this section.
      </para>
      <section xml:id="overview.test_policy.capabilities">
        <title>Capabilities</title>
        <para>
          The test policies specific to the test case execution of Capabilities functional block:
          <itemizedlist>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetServiceCapabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      Getting capabilities with GetServiceCapabilities command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting capabilities with GetServices command
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please, refer to <xref linkend="tc.credential.capabilities"/> for Capabilities Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.credential_info">
        <title>Credential Info</title>
        <para>
          The test policies specific to the test case execution of Credential Info functional block:
          <itemizedlist>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetServiceCapabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialInfo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialInfoList
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetCredentialInfo and GetCredentialInfoList responses than specified in service capabilities by MaxLimit.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetCredentialInfoList response than specified by Limit parameter in a request.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return items with the same tokens in GetCredentialInfoList responses for one credential info list receiving.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more CredentialInfo items in GetCredentialInfoList responses than specified in service capabilities by MaxCredentials.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return any fault if GetCredentialInfo was invoked for non-exciting Credential token. Such tokens shall be ignored.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return SOAP 1.2 fault message (InvalidArgs/TooManyItems) if more items than MaxLimit was requested by GetCredentialInfo command.
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      Getting credential info with GetCredentialInfo command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credential info list with GetCredentialInfoList command with using different Limit and NextReference values
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credential info with invalid credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credential info with number of requested items is greater than MaxLimit
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please refer to <xref linkend="tc.credential.credential_info"/> for Credential Info Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.credential">
        <title>Credential</title>
        <para>
          The test policies specific to the test case execution of Credential functional block:
          <itemizedlist>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetServiceCapabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentials
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialList
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialInfoList
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CreateCredential
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ModifyCredential
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      DeleteCredential
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If DUT supports Client Supplied Token as indicated by Capabilities.ClientSuppliedTokenSupported = true, DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      SetCredential
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return only requested items in GetCredentials response that specified in GetCredentials request.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return all requested items in GetCredentials response that specified in GetCredentials request.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetCredentials responses than specified in service capabilities by MaxLimit.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return the same information in GetCredentials responses and in GetCredentialInfoList responses for the items with the same token.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetCredentialList response than specified by Limit parameter in a request.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return items with the same tokens in GetCredentialList responses for one credential list receiving.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return the same information in GetCredentials responses and in GetCredentialList responses for the items with the same token.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return the same information in GetCredentialList responses and in GetCredentialInfoList responses for the items with the same token.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return the credentials in GetCredentialList responses and in GetCredentialInfoList responses.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return SOAP 1.2 fault message (InvalidArgs/TooManyItems) if more items than MaxLimit was requested by GetCredentials command.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support creating of credential.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support modifying of credential.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support deleting of credential.
              </para>
            </listitem>
            <listitem>
              <para>
                If DUT supports Client Supplied Token as indicated by Capabilities.ClientSuppliedTokenSupported = true, creating and modifying of schedule using SetCredential command.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support time value for validity of the credential if ValiditySupportsTimeValue is supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return SOAP 1.2 fault message (InvalidArgs) if credential token is specified in CreateCredential request.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT should return SOAP 1.2 fault message (InvalidArgVal/NotFound) if ModifyCredential or DeleteCredential command was invoked for non-exciting credential token.
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      Getting credential with GetCredential command and test that it includes the same information with GetCredentialInfoList command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credential info list with GetCredentialList command with using different Limit and NextReference values and test that it includes the same information with GetCredentialInfoList command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Creating credential with CreateCredential command and test that corresponding notification message is received
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Modifying credential with ModifyCredential command and test that corresponding notification message is received
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Deleting credential with DeleteCredential command and test that corresponding notification message is received
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credentials with invalid credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credentials with number of requested items is greater than MaxLimit
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Creating credential with CreateCredential command with specified token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Modifying credential with ModifyCredential command with invalid token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Deleting credential with DeleteCredential command with invalid token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Creating credential with validity values
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Modifying credential with validity values
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If DUT supports Client Supplied Token as indicated by Capabilities.ClientSuppliedTokenSupported = true:
                      <itemizedlist>
                        <listitem>
                          <para>
                            Creating schedule with SetCredential command with empty token and test that corresponding notification message is received
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Modifying schedule with SetCredential command and test that corresponding notification message is received
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please refer to <xref linkend="tc.credential.credential"/> for Credential Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.credential_state">
        <title>Credential State</title>
        <para>
          The test policies specific to the test case execution of Credential functional block:
          <itemizedlist>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialState
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialInfoList
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      EnableCredential
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      DisableCredential
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                DUT should return SOAP 1.2 fault message (InvalidArgVal\NotFound) if GetCredentialState or EnableCredential or DisableCredential command was invoked for non-exciting credential token.
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      Getting credential state with GetCredentialState command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Changing credential states with EnableCredential and DisableCredential commands
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credential state with GetCredentialState command with invalid token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Changing credential states with EnableCredential and DisableCredential commands with invalid token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please refer to <xref linkend="tc.credential.credential_state"/> for Credential State Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.credential_identifiers">
        <title>Credential Identifiers</title>
        <para>
          The test policies specific to the test case execution of Credential Identifiers functional block:
          <itemizedlist>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>

                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialIdentifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialList
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SetCredentialIdentifier
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      DeleteCredentialIdentifier
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return the same credential identifiers information in GetCredentialList responses and in GetCredentialIdentifiers responses for the credentials with the same token.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return items with the same type name in GetCredentialIdentifiers responses.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return items in GetCredentials responses with Type.Name other than specified in service capabilities by SupportedIdentifierTypes.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT should return SOAP 1.2 fault message (InvalidArgVal\NotFound) if GetCredentialIdentifiers or SetCredentialIdentifier or DeleteCredentialIdentifier command was invoked for non-exciting credential token.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT should return SOAP 1.2 fault message (InvalidArgVal\NotFound) if DeleteCredentialIdentifiers command was invoked for non-exciting identifier type.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT should return SOAP 1.2 fault message (ConstraintViolated\MinIdentifiersPerCredential) if DeleteCredentialIdentifiers command was invoked when credential contains only one Credential Identifier.
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      Getting credential identifiers with GetCredentialIdentifiers command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Adding credential identifiers with SetCredentialIdentifier command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Updating credential identifiers with SetCredentialIdentifier command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Deleting credential identifiers with DeleteCredentialIdentifier command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credential identifiers with GetCredentialIdentifiers command with invalid token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Adding credential identifiers with SetCredentialIdentifier command with invalid token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Deleting credential identifiers with DeleteCredentialIdentifier command with invalid credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Deleting credential identifiers with DeleteCredentialIdentifier command with invalid identifier type
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Deleting the last credential identifier with DeleteCredentialIdentifier command
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please refer to <xref linkend="tc.credential.credential_identifiers"/> for Credential Identifiers Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.credential_access_profiles">
        <title>Credential Access Profiles</title>
        <para>
          The test policies specific to the test case execution of Credential Access Profiles functional block:
          <itemizedlist>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialAccessProfiles
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentialList
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      SetCredentialAccessProfile
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      DeleteCredentialAccessProfile
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return the same credential access profiles information in GetCredentialList responses and in GetCredentialAccessProfiles responses for the credentials with the same token.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return items with the same access profile token in GetCredentialAccessProfiles responses.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetCredentialAccessProfiles responses than specified in service capabilities by MaxAccessProfilesPerCredential.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support time value for of the validity for the association between the credential and the access profile if ValiditySupportsTimeValue is supported by the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT should return SOAP 1.2 fault message (InvalidArgVal\NotFound) if GetCredentialAccessProfiles or SetCredentialAccessProfile or DeleteCredentialAccessProfile command was invoked for non-exciting credential token.
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      Getting credential access profiles with GetCredentialAccessProfiles command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Adding credential access profiles with SetCredentialAccessProfile command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Updating credential access profiles with SetCredentialAccessProfile command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Deleting credential access profiles with DeleteCredentialAccessProfile command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting credential access profiles with GetCredentialAccessProfiles command with invalid token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Adding credential access profiles with SetCredentialAccessProfile command with invalid token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Deleting credential access profiles with DeleteCredentialAccessProfile command with invalid token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please refer to <xref linkend="tc.credential.credential_access_profiles"/> for Credential Access Profiles Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.reset_antipassback_violations">
        <title>Reset Antipassback Violations</title>
        <para>
          The test policies specific to the test case execution of Reset Antipassback Violations functional block:
          <itemizedlist>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                If DUT returns Reset Antipassback Violations capability as supported, then DUT shall support ResetAntipassbackViolation command. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CreateCredential
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                DUT should return SOAP 1.2 fault message (InvalidArgVal\NotFound) if ResetAntipassbackViolation command was invoked for non-exciting credential token.
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed:
                <itemizedlist>
                  <listitem>
                    <para>
                      Resetting antipassback violations with ResetAntipassbackViolation command
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Resetting antipassback violations with ResetAntipassbackViolation command with invalid credential token.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please refer to <xref linkend="tc.credential.reset_antipassback_violations"/> for Reset Antipassback Violations Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.credential_events">
        <title>Credential Events</title>
        <para>
          The test policies specific to the test case execution of Credential Events functional block:
          <itemizedlist>
            <listitem>
              <para>

                DUT shall give the Credential Service and Event Service entry points by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetEventProperties
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      Getting event properties with GetEventProperties command
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please refer to <xref linkend="tc.credential.credential_events"/> for Credential Events Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.consistency">
        <title>Consistency</title>
        <para>
          The test policies specific to the test case execution of Consistency functional block:
          <itemizedlist>
            <listitem>
              <para>
                DUT shall give the Credential Service and Access Rules Service entry points by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetAccessProfileInfo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetCredentials
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential and Access Profile Info
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          Please refer to <xref linkend="tc.credential.consistency"/> for Consistency Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.whitelist_management">
        <title>Whitelist Management</title>
        <para>
          The test policies specific to the test case execution of Whitelist Management functional block:
          <itemizedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall have capability MaxWhitelistedItems greater than zero, if DUT supports whitelist functionality. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands and notification topics:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetWhitelist
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      AddToWhitelist
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RemoveFromWhitelist
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      DeleteWhitelist
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      tns1:AccessControl/AccessGranted/Identifier
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Additionally, DUT shall support the following commands which will be used as supplementary during the testing:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetServiceCapabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CreatePullPointSubscription
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      PullMessages
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Unsubscribe
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetSupportedFormatTypes
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      AddToBlacklist (if Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability)
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return only requested items in GetWhitelist response as specified in GetWhitelist request by IdentifierType, FormatType, and Value fields.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetWhitelist responses than specified in service capabilities by MaxLimit.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetWhitelist response than specified by Limit parameter in a request.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return same credential identifiers in GetWhitelist responses for one whitelist list receiving.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support adding of credential identifiers to whitelist.
              </para>
            </listitem>
            <listitem>
              <para>
                If Client sends request with credential identifier with is already in whitelist, the DUT shall return no fault and shall not add provided identifier to the whitelist.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support removing of specified credential identifiers from whitelist.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support removing of all credential identifiers from whitelist.
              </para>
            </listitem>
            <listitem>
              <para>
                If DUT supports blacklist functionality as indicated by MaxBlacklistedItems greater than zero capability:
                <itemizedlist>
                  <listitem>
                    <para>
                      The DUT shall remove credential identifiers from blacklist if it was added to whitelist.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      (TODO: #1899)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting whitelist with GetWhitelist command using different Limit and NextReference values and test that:
                      <itemizedlist>
                        <listitem>
                          <para>
                            the lists contains the same items independently from Limit value;
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            the GetWhitelistResponse contains not more items that specified in Limit value;
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            the GetWhitelistResponse contains not more items that specified in MaxLimit capability.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Adding credential identifiers to whitelist with AddToWhitelist command and test that:
                      <itemizedlist>
                        <listitem>
                          <para>
                            each credential identifier was added to whitelist;
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            credential identifiers that were in blacklist was removed from it after addition to whitelist.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Adding credential identifiers which is already in whitelist to whitelist with AddToWhitelist command and test that:
                      <itemizedlist>
                        <listitem>
                          <para>
                            no duplicated credential identifier was added to whitelist.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Removing credential identifiers from whitelist with RemoveFromWhitelist command and test that credential identifiers were removed from whitelist.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Removing credential identifiers that are not in whitelist from whitelist with RemoveFromWhitelist command and test that no faults were returned.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Delete all credential identifiers from whitelist with DeleteWhitelist command and test that all credential identifiers were removed from whitelist.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Delete all credential identifiers from empty whitelist with DeleteWhitelist command and test that no faults were returned.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
          Please refer to <xref linkend="tc.credential.whitelist_management"/> for Whitelist Management Test Cases.
        </para>
      </section>
      <section xml:id="overview.test_policy.blacklist_management">
        <title>Blacklist Management</title>
        <para>
          The test policies specific to the test case execution of Blacklist Management functional block:
          <itemizedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                DUT shall give the Credential Service entry point by GetServices command, if DUT supports this service. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall have capability MaxBlacklistedItems greater than zero, if DUT supports blacklist functionality. Otherwise, these test cases will be skipped.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall support the following commands and notification topics:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetBlacklist
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      AddToBlacklist
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      RemoveFromBlacklist
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      DeleteBlacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Additionally, DUT shall support the following commands which will be used as supplementary during the testing:
                <itemizedlist>
                  <listitem>
                    <para>
                      GetServices
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetServiceCapabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      GetSupportedFormatTypes
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      AddToBlacklist (if Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability)
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall return only requested items in GetBlacklist response as specified in GetBlacklist request by IdentifierType, FormatType, and Value fields.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetBlacklist responses than specified in service capabilities by MaxLimit.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return more items in GetBlacklist response than specified by Limit parameter in a request.
              </para>
            </listitem>
            <listitem>
              <para>
                DUT shall not return same credential identifiers in GetBlacklist responses for one blacklist list receiving.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support adding of credential identifiers to blacklist.
              </para>
            </listitem>
            <listitem>
              <para>
                If Client sends request with credential identifier with is already in blacklist, the DUT shall return no fault and shall not add provided identifier to the blacklist.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support removing of specified credential identifiers from blacklist.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT shall support removing of all credential identifiers from blacklist.
              </para>
            </listitem>
            <listitem>
              <para>
                If DUT supports whitelist functionality as indicated by MaxWhitelistedItems greater than zero capability:
                <itemizedlist>
                  <listitem>
                    <para>
                      The DUT shall remove credential identifiers from whitelist if it was added to blacklist.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The following tests are performed
                <itemizedlist>
                  <listitem>
                    <para>
                      (TODO: #1899)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Getting blacklist with GetBlacklist command using different Limit and NextReference values and test that:
                      <itemizedlist>
                        <listitem>
                          <para>
                            the lists contains the same items independently from Limit value;
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            the GetBlacklistResponse contains not more items that specified in Limit value;
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            the GetBlacklistResponse contains not more items that specified in MaxLimit capability.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Adding credential identifiers to blacklist with AddToBlacklist command and test that:
                      <itemizedlist>
                        <listitem>
                          <para>
                            each credential identifier was added to blacklist;
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            credential identifiers that were in blacklist was removed from it after addition to blacklist.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Adding credential identifiers which is already in blacklist to blacklist with AddToBlacklist command and test that:
                      <itemizedlist>
                        <listitem>
                          <para>
                            no duplicated credential identifier was added to blacklist.
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Removing credential identifiers from blacklist with RemoveFromBlacklist command and test that credential identifiers were removed from blacklist.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Removing credential identifiers that are not in blacklist from blacklist with RemoveFromBlacklist command and test that no faults were returned.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Delete all credential identifiers from blacklist with DeleteBlacklist command and test that all credential identifiers were removed from blacklist.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Delete all credential identifiers from empty blacklist with DeleteBlacklist command and test that no faults were returned.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
          Please refer to <xref linkend="tc.credential.blacklist_management"/> for Blacklist Management Test Cases.
        </para>
      </section>
    </section>
  </chapter>
  <!--Credential Test Cases-->
  <chapter xml:id="tc.credential">
    <title>Credential Test Cases</title>
    <!--Capabilities-->
    <section xml:id="tc.credential.capabilities"
             xreflabel="Section 4.1">
      <title>Capabilities</title>
      <!--CREDENTIAL-1-1-1-->
      <section xml:id="tc.CREDENTIAL-1-1-1">
        <title>CREDENTIAL SERVICE CAPABILITIES</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-1-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> ServiceCapabilities (ONVIF Credential Service Specification), GetServiceCapabilities command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetServiceCapabilities (for Credential Service)
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify DUT Credential Service Capabilities.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. 

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetServiceCapabilities</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message with parameters<itemizedlist>
                  <listitem>
                    <para>
                      Capabilities =: <emphasis role="italic">cap</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-1-1-2-->
      <section xml:id="tc.CREDENTIAL-1-1-2">
        <title>GET SERVICES AND GET CREDENTIAL SERVICE CAPABILITIES CONSISTENCY</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-1-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Capability exchange (ONVIF Core Specification), ServiceCapabilities (ONVIF Credential Service Specification), GetServiceCapabilities command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetServices, GetServiceCapabilities (for Credential Service)
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> devicemgmt.wsdl, credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Services and Credential Service Capabilities consistency.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> None.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetServices</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      IncludeCapability := true
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetServicesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Services list =: <emphasis role="italic">servicesList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client selects Service with Service.Namespace = "http://www.onvif.org/ver10/credential/wsdl":
                <itemizedlist>
                  <listitem>
                    <para>
                      Services list [Namespace = "http://www.onvif.org/ver10/credential/wsdl"] =: <emphasis role="italic">credentialService</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetServiceCapabilities</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Capabilities =: <emphasis role="italic">cap</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-1-1-2.8">
              <para>
                If <emphasis role="italic">cap</emphasis> differs from <emphasis role="italic">credentialService</emphasis>.Capabilities.Capabilities, FAIL the test.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetServicesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step <xref linkend="tc.CREDENTIAL-1-1-2.8"/>:
          <itemizedlist>
            <listitem>
              <para>
                SupportedIdentifierType list
              </para>
            </listitem>
            <listitem>
              <para>
                MaxLimit
              </para>
            </listitem>
            <listitem>
              <para>
                CredentialValiditySupported
              </para>
            </listitem>
            <listitem>
              <para>
                CredentialAccessProfileValiditySupported
              </para>
            </listitem>
            <listitem>
              <para>
                MaxCredentials
              </para>
            </listitem>
            <listitem>
              <para>
                MaxAccessProfilesPerCredential
              </para>
            </listitem>
            <listitem>
              <para>
                ResetAntipassbackSupported
              </para>
            </listitem>
            <listitem>
              <para>
                ValiditySupportsTimeValue
              </para>
            </listitem>
            <listitem>
              <para>
                DefaultCredentialSuspensionDuration
              </para>
            </listitem>
            <listitem>
              <para>
                ClientSuppliedTokenSupported
              </para>
            </listitem>
            <listitem>
              <para>
                Extension.SupportedExemptionType
              </para>
            </listitem>
            <listitem>
              <para>
                MaxWhitelistedItems
              </para>
            </listitem>
            <listitem>
              <para>
                MaxBlacklistedItems
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <!--Credential Info-->
    <section xml:id="tc.credential.credential_info"
             xreflabel="Section 4.2">
      <title>Credential Info</title>
      <!--CREDENTIAL-2-1-1-->
      <section xml:id="tc.CREDENTIAL-2-1-1">
        <title>GET CREDENTIAL INFO</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-2-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), GetCredentialInfo command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialInfo
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Info.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-2-1-1.6">
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">tokenList</emphasis> := [subset of <emphasis role="italic">credentialInfoCompleteList</emphasis>.token values with items number equal to <emphasis role="italic">cap</emphasis>.MaxLimit]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfo</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token list := <emphasis role="italic">tokenList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList1</emphasis> does not contain CredentialInfo item for each token from <emphasis role="italic">tokenList</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList1</emphasis> contains at least two CredentialInfo item with equal token, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList1</emphasis> contains other CredentialInfo items than listed in <emphasis role="italic">tokenList</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                For each CredentialInfo.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialInfoCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialInfo</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Token[0] := <emphasis role="italic">token</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialInfoResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CredentialInfo list =: <emphasis role="italic">credentialInfoList2</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoList2</emphasis> does not contain only one CredentialInfo item with token equal to <emphasis role="italic">token</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem xml:id="tc.CREDENTIAL-2-1-1.12.4"
                            xreflabel="12.4">
                    <para>
                      If <emphasis role="italic">credentialInfoList2</emphasis>[0] item is not equal to <emphasis role="italic">credentialInfoCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>] item, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialInfoResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If number of items in <emphasis role="italic">credentialInfoCompleteList</emphasis> is less than <emphasis role="italic">cap</emphasis>.MaxLimit, then all <emphasis role="italic">credentialInfoCompleteList</emphasis>.Token items shall be used for the step <xref linkend="tc.CREDENTIAL-2-1-1.6"/>.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step <xref linkend="tc.CREDENTIAL-2-1-1.12.4"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-2-1-2-->
      <section xml:id="tc.CREDENTIAL-2-1-2">
        <title>GET CREDENTIAL INFO LIST - LIMIT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-2-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), GetCredentialInfoList command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialInfoList
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Info List using Limit.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := 1
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList1</emphasis> contains more CredentialInfo items than 1, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 1, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList2</emphasis> contains more CredentialInfo items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 2, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">limit</emphasis> := [number between 1 and <emphasis role="italic">cap</emphasis>.MaxLimit]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">limit</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoList3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList3</emphasis> contains more CredentialInfo items than <emphasis role="italic">limit</emphasis>, FAIL the test and skip other steps.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-2-1-3-->
      <section xml:id="tc.CREDENTIAL-2-1-3">
        <title>GET CREDENTIAL INFO LIST - START REFERENCE AND LIMIT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-2-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), GetCredentialInfoList command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialInfoList
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Info List using StartReference and Limit.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoCompleteList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList1</emphasis> contains more CredentialInfo items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            CredentialInfo list =: <emphasis role="italic">credentialInfoListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoListPart</emphasis> contains more CredentialInfo items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">credentialInfoCompleteList1</emphasis> := <emphasis role="italic">credentialInfoCompleteList1</emphasis> + <emphasis role="italic">credentialInfoListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList1</emphasis> contains at least two CredentialInfo items with equal token, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 1, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := 1
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoCompleteList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList2</emphasis> contains more CredentialInfo items than 1, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := 1
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            CredentialInfo list =: <emphasis role="italic">credentialInfoListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoListPart</emphasis> contains more CredentialInfo items than 1, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">credentialInfoCompleteList2</emphasis> := <emphasis role="italic">credentialInfoCompleteList2</emphasis> + <emphasis role="italic">credentialInfoListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList2</emphasis> contains at least two CredentialInfo items with equal token, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList2</emphasis> does not contain all credentials from <emphasis role="italic">credentialInfoCompleteList1</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList2</emphasis> contains credentials other than credentials from <emphasis role="italic">credentialInfoCompleteList1</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 2, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">limit</emphasis> := [number between 1 and <emphasis role="italic">cap</emphasis>.MaxLimit]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">limit</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoCompleteList3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList3</emphasis> contains more CredentialInfo items than <emphasis role="italic">limit</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := <emphasis role="italic">limit</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            CredentialInfo list =: <emphasis role="italic">credentialInfoListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoListPart</emphasis> contains more CredentialInfo items than <emphasis role="italic">limit</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">credentialInfoCompleteList3</emphasis> := <emphasis role="italic">credentialInfoCompleteList3</emphasis> + <emphasis role="italic">credentialInfoListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList3</emphasis> contains at least two CredentialInfo items with equal token, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList3</emphasis> does not contain all credentials from <emphasis role="italic">credentialInfoCompleteList1</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList3</emphasis> contains credentials other than credentials from <emphasis role="italic">credentialInfoCompleteList1</emphasis>, FAIL the test and skip other steps.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-2-1-4-->
      <section xml:id="tc.CREDENTIAL-2-1-4">
        <title>GET CREDENTIAL INFO LIST - NO LIMIT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-2-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), GetCredentialInfoList command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialInfoList
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Info List without using Limit.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoCompleteList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> contains more CredentialInfo items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            CredentialInfo list =: <emphasis role="italic">credentialInfoListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoListPart</emphasis> contains more CredentialInfo items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">credentialInfoCompleteList</emphasis> := <emphasis role="italic">credentialInfoCompleteList</emphasis> + <emphasis role="italic">credentialInfoListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> contains at least two CredentialInfo items with equal token, FAIL the test.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> contains more CredentialInfo items than <emphasis role="italic">cap</emphasis>.MaxCredentials, FAIL the test and skip other steps.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-2-1-5-->
      <section xml:id="tc.CREDENTIAL-2-1-5">
        <title>GET CREDENTIAL INFO WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-2-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), GetCredentialInfo command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialInfo
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Info with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>

                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfo</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token[0] := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis> is not empty, FAIL the test.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is less than 2, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfo</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token[0] := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Token[1] := <emphasis role="italic">credentialInfoCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialInfoResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialInfoList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis> is empty, FAIL the test.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis> contains more than one item, FAIL the test.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis>[0].token does not equal to <emphasis role="italic">credentialInfoCompleteList</emphasis>[0].token, FAIL the test.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialInfoResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-2-1-6-->
      <section xml:id="tc.CREDENTIAL-2-1-6">
        <title>GET CREDENTIAL INFO - TOO MANY ITEMS</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-2-1-6
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), GetCredentialInfo command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialInfo
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Info in case if there a more items than MaxLimit in request.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis>.token items number is less than <emphasis role="italic">cap</emphasis>.MaxLimit or equal to <emphasis role="italic">cap</emphasis>.MaxLimit, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">tokenList</emphasis> := [subset of <emphasis role="italic">credentialInfoCompleteList</emphasis>.token values with items number equal to <emphasis role="italic">cap</emphasis>.MaxLimit + 1]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialInfo</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token list := <emphasis role="italic">tokenList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgs\ter:TooManyItems</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgs\ter:TooManyItems</emphasis> SOAP 1.2 fault.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <!--Credential-->
    <section xml:id="tc.credential.credential"
             xreflabel="Section 4.3">
      <title>Credential</title>
      <!--CREDENTIAL-3-1-1-->
      <section xml:id="tc.CREDENTIAL-3-1-1">
        <title>GET CREDENTIALS</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), GetCredentials command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentials
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-1.6">
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">tokenList</emphasis> := [subset of <emphasis role="italic">credentialCompleteList</emphasis>.token values with items number equal to <emphasis role="italic">cap</emphasis>.MaxLimit]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentials</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token list := <emphasis role="italic">tokenList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialList1</emphasis> does not contain Credential item for each token from <emphasis role="italic">tokenList</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialList1</emphasis> contains at least two Credential items with equal token, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialList1</emphasis> contains other Credential items than listed in <emphasis role="italic">tokenList</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                For each Credential.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentials</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Token[0] := <emphasis role="italic">token</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialsResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Credential list =: <emphasis role="italic">credentialList2</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList2</emphasis> does not contain only one Credential item with token equal to <emphasis role="italic">token</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem xml:id="tc.CREDENTIAL-3-1-1.12.4"
                            xreflabel="12.4">
                    <para>
                      If <emphasis role="italic">credentialList2</emphasis>[0] item does not have equal field values to <emphasis role="italic">credentialCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>] item, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If number of items in <emphasis role="italic">credentialCompleteList</emphasis> is less than <emphasis role="italic">cap</emphasis>.MaxLimit, then all <emphasis role="italic">credentialCompleteList</emphasis>.Token items shall be used for the step <xref linkend="tc.CREDENTIAL-3-1-1.6"/>.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step <xref linkend="tc.CREDENTIAL-3-1-1.12.4"/>:
          <itemizedlist>
            <listitem>
              <para>
                Credential:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier list (Type.Name is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            Type
                            <itemizedlist>
                              <listitem>
                                <para>
                                  Name
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  FormatType
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ExemptedFromAuthentication
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialAccessProfile list (AccessProfileToken is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            AccessProfileToken
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidFrom
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidTo
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Attribute list
                      <itemizedlist>
                        <listitem>
                          <para>
                            Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-2-->
      <section xml:id="tc.CREDENTIAL-3-1-2">
        <title>GET CREDENTIAL LIST - LIMIT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), GetCredentialList command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialList
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential List using Limit.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := 1
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialList1</emphasis> contains more Credential items than 1, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 1, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialList2</emphasis> contains more Credential items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 2, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">limit</emphasis> := [number between 1 and <emphasis role="italic">cap</emphasis>.MaxLimit]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">limit</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialList3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialList3</emphasis> contains more Credential items than <emphasis role="italic">limit</emphasis>, FAIL the test and skip other steps.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialListResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-3-->
      <section xml:id="tc.CREDENTIAL-3-1-3">
        <title>GET CREDENTIAL LIST - START REFERENCE AND LIMIT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), GetCredentialList command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialList
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential List using StartReference and Limit.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialCompleteList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList1</emphasis> contains more Credential items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential list =: <emphasis role="italic">credentialListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialListPart</emphasis> contains more Credential items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">credentialCompleteList1</emphasis> := <emphasis role="italic">credentialCompleteList1</emphasis> + <emphasis role="italic">credentialListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList1</emphasis> contains at least two Credential item with equal token, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 1, do the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialCompleteList1</emphasis> does not contain all credentials from <emphasis role="italic">credentialInfoCompleteList</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialCompleteList1</emphasis> contains credentials other than credentials from <emphasis role="italic">credentialInfoCompleteList</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      For each CredentialInfo.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialInfoCompleteList</emphasis> repeat the following steps:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            If <emphasis role="italic">credentialCompleteList1</emphasis>[token = <emphasis role="italic">token</emphasis>] item does not have equal field values to <emphasis role="italic">credentialInfoCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>] item, FAIL the test and skip other steps.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := 1
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialCompleteList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList2</emphasis> contains more Credential items than 1, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := 1
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential list =: <emphasis role="italic">credentialListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialListPart</emphasis> contains more Credential items than 1, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">credentialCompleteList2</emphasis> := <emphasis role="italic">credentialCompleteList2</emphasis> + <emphasis role="italic">credentialListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList2</emphasis> contains at least two Credential item with equal token, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList2</emphasis> does not contain all credentials from <emphasis role="italic">credentialCompleteList1</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList2</emphasis> contains credentials other than credentials from <emphasis role="italic">credentialCompleteList1</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 2 do the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialCompleteList2</emphasis> does not contain all credentials from <emphasis role="italic">credentialInfoCompleteList</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialCompleteList2</emphasis> contains credentials other than credentials from <emphasis role="italic">credentialInfoCompleteList</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      For each CredentialInfo.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialInfoCompleteList</emphasis> repeat the following steps:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            If <emphasis role="italic">credentialCompleteList2</emphasis>[token = <emphasis role="italic">token</emphasis>] item does not have equal field values to <emphasis role="italic">credentialInfoCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>] item, FAIL the test and skip other steps.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">limit</emphasis> := [number between 1 and <emphasis role="italic">cap</emphasis>.MaxLimit]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">limit</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialCompleteList3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList3</emphasis> contains more Credential items than <emphasis role="italic">limit</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := <emphasis role="italic">limit</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential list =: <emphasis role="italic">credentialListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialListPart</emphasis> contains more Credential items than <emphasis role="italic">limit</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">credentialCompleteList3</emphasis> := <emphasis role="italic">credentialCompleteList3</emphasis> + <emphasis role="italic">credentialListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList3</emphasis> contains at least two Credential items with equal token, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList3</emphasis> does not contain all credentials from <emphasis role="italic">credentialCompleteList1</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList3</emphasis> contains credentials other than credentials from <emphasis role="italic">credentialCompleteList1</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList3</emphasis> does not contain all credentials from <emphasis role="italic">credentialInfoCompleteList</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList3</emphasis> contains credentials other than credentials from <emphasis role="italic">credentialInfoCompleteList</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                For each CredentialInfo.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialInfoCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem xml:id="tc.CREDENTIAL-3-1-3.29.1"
                            xreflabel="29.1">
                    <para>
                      If <emphasis role="italic">credentialCompleteList3</emphasis>[token = <emphasis role="italic">token</emphasis>] item does not have equal field values to <emphasis role="italic">credentialInfoCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>] item, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialListResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step <xref linkend="tc.CREDENTIAL-3-1-3.29.1"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-4-->
      <section xml:id="tc.CREDENTIAL-3-1-4">
        <title>GET CREDENTIAL LIST - NO LIMIT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), GetCredentialList command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialList
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential List without using Limit.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      StartReference skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialCompleteList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> contains more Credential items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential list =: <emphasis role="italic">credentialListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialListPart</emphasis> contains more Credential items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">credentialCompleteList</emphasis> := <emphasis role="italic">credentialCompleteList</emphasis> + <emphasis role="italic">credentialListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>

                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> contains at least two Credential item with equal token, FAIL the test.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> does not contain all credentials from <emphasis role="italic">credentialInfoCompleteList</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> contains credentials other than credentials from <emphasis role="italic">credentialInfoCompleteList</emphasis>, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                For each CredentialInfo.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialInfoCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem xml:id="tc.CREDENTIAL-3-1-4.12.1"
                            xreflabel="12.1">
                    <para>
                      If <emphasis role="italic">credentialCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>] item does not have equal field values to <emphasis role="italic">credentialInfoCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>] item, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialListResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step <xref linkend="tc.CREDENTIAL-3-1-4.12.1"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>

        </para>
      </section>
      <!--CREDENTIAL-3-1-5-->
      <section xml:id="tc.CREDENTIAL-3-1-5">
        <title>CREATE CREDENTIAL (ENABLED)</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), CreateCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> CreateCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify creation of enabled credential and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. 
          Credential Entity is supported by the DUT. Access Rules Service is received from the DUT. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.4">
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList1</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profile (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves supported Credential identifier type name (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) (out <emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and credential identifier value (out <emphasis role="italic">value</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.9">
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.10">
              <para>
                ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := ""
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := true if <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication, otherwise false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token or skipped (if <emphasis role="italic">accessProfileCompleteList</emphasis> is empty)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Extension skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := true
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">CreateCredentialResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token =: <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.12">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint s with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-3-1-5.13"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.13">
              <para>
                If <emphasis role="italic">oprationDelay</emphasis> timeout expires for step <xref linkend="tc.CREDENTIAL-3-1-5.12"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.15">
              <para>
                If <emphasis role="italic">credentialList</emphasis>[0] item does not have equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-5.10"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialInfoList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.17">
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis>[0] item does not have equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-5.9"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.19">
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> does not have <emphasis role="italic">credentialInfo</emphasis>.[token = <emphasis role="italic">credentialToken</emphasis>] item with equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-5.9"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.21">
              <para>
                If <emphasis role="italic">credentialCompleteList2</emphasis> does not have <emphasis role="italic">credential</emphasis>.[token = <emphasis role="italic">credentialToken</emphasis>] item with equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-5.10"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client retrieves credential state (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialState</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialState"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0].Enabled equal to false, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0].Reason does not equal to "Test Reason" or missed, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true check the following:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            If <emphasis role="italic">credentialState</emphasis>[0] does not contain AntipassbackState element, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">credentialState</emphasis>[0].AntipassbackState.AntipassbackViolated equal to true, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-5.24"/>.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-5.24">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-3-1-5.4"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreateCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-5.15"/>, <xref linkend="tc.CREDENTIAL-3-1-5.21"/>:
          <itemizedlist>
            <listitem>
              <para>
                Credential:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier list (Type.Name is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            Type
                            <itemizedlist>
                              <listitem>
                                <para>
                                  Name
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  FormatType
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ExemptedFromAuthentication
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialAccessProfile list (AccessProfileToken is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            AccessProfileToken
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidFrom
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidTo
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Attribute list
                      <itemizedlist>
                        <listitem>
                          <para>
                            Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>

        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-5.17"/>, <xref linkend="tc.CREDENTIAL-3-1-5.19"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-6-->
      <section xml:id="tc.CREDENTIAL-3-1-6">
        <title>CREATE CREDENTIAL (DISABLED)</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-6
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), CreateCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> CreateCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify creation of disabled credential and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. 
          Credential Entity is supported by the DUT. Access Rules Service is received from the DUT. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.4">
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList1</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profile (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves supported Credential identifier type name (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) (out <emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and credential identifier value (out <emphasis role="italic">value</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.10">
              <para>
                ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := ""
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := true if <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication, otherwise false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token or skipped (if <emphasis role="italic">accessProfileCompleteList</emphasis> is empty)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Extension skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">CreateCredentialResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token =: <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.12">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint s with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-3-1-6.14"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">oprationDelay</emphasis> timeout expires for step <xref linkend="tc.CREDENTIAL-3-1-6.12"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.14">
              <para>
                ONVIF Client retrieves a credential (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.15">
              <para>
                If <emphasis role="italic">credentialList</emphasis>[0] item does not have equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-6.10"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialInfoList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.17">
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis>[0] item does not have equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-6.10"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.19">
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> does not have <emphasis role="italic">credentialInfo</emphasis>[token = <emphasis role="italic">credentialToken</emphasis>] item with equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-6.10"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.21">
              <para>
                If <emphasis role="italic">credentialCompleteList2</emphasis> does not have <emphasis role="italic">credential</emphasis>.[token = <emphasis role="italic">credentialToken</emphasis>] item with equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-6.10"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client retrieves credential state (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialState</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialState"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0].Enabled equal to true, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0].Reason does not equal to "Test Reason" or missed, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true check the following:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            If <emphasis role="italic">credentialState</emphasis>[0] does not contain AntipassbackState element, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">credentialState</emphasis>[0].AntipassbackState.AntipassbackViolated equal to true, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-6.24"/>.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-6.24">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-3-1-6.4"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.
              </para>
            </listitem>

          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreateCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-6.15"/>, <xref linkend="tc.CREDENTIAL-3-1-6.21"/>:
          <itemizedlist>
            <listitem>
              <para>
                Credential:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier list (Type.Name is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            Type
                            <itemizedlist>
                              <listitem>
                                <para>
                                  Name
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  FormatType
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ExemptedFromAuthentication
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialAccessProfile list (AccessProfileToken is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            AccessProfileToken
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidFrom
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidTo
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Attribute list
                      <itemizedlist>
                        <listitem>
                          <para>
                            Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-6.17"/>, <xref linkend="tc.CREDENTIAL-3-1-6.19"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-7-->
      <section xml:id="tc.CREDENTIAL-3-1-7">
        <title>MODIFY CREDENTIAL</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-7
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), ModifyCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> ModifyCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify modifying of credential with different states and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. 
          Credential Entity is supported by the DUT. Access Rules Service is received from the DUT. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.1">
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.3">
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.4">
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList1</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profiles (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential with ExemptedFromAuthentication equal to false (in false), with Credential identifier item (out <emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and corresponding credential identifier value (out <emphasis role="italic">value</emphasis>) and with credential token (out <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.9">
              <para>
                ONVIF client invokes <emphasis role="bold">ModifyCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.Token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description 2"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser 2"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := true if <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication, otherwise false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token or skipped (if <emphasis role="italic">accessProfileCompleteList</emphasis> is empty)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">ModifyCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.11">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint s with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-7.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-7.1"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-3-1-7.13"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">oprationDelay</emphasis> timeout expires for step <xref linkend="tc.CREDENTIAL-3-1-7.11"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-7.21"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.13">
              <para>
                ONVIF Client retrieves a credential (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.14">
              <para>
                If <emphasis role="italic">credentialList</emphasis>[0] item does not have equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-7.9"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-7.21"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialInfoList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.16">
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis>[0] item does not have equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-7.9"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-7.21"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.18">
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> does not have <emphasis role="italic">credentialInfo</emphasis>.[token:= <emphasis role="italic">credentialToken</emphasis>] item with equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-7.9"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-7.21"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.20">
              <para>
                If <emphasis role="italic">credentialCompleteList2</emphasis> does not have <emphasis role="italic">credential</emphasis>.[token:= <emphasis role="italic">credentialToken</emphasis>] item with equal field values to values from step <xref linkend="tc.CREDENTIAL-3-1-7.9"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-7.22"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.21">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-7.22">
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-3-1-7.4"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">ModifyCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-7.18"/>, <xref linkend="tc.CREDENTIAL-3-1-7.20"/>:
          <itemizedlist>
            <listitem>
              <para>
                Credential:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier list (Type.Name is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            Type
                            <itemizedlist>
                              <listitem>
                                <para>
                                  Name
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  FormatType
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ExemptedFromAuthentication
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialAccessProfile list (AccessProfileToken is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            AccessProfileToken
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidFrom
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidTo
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Attribute list
                      <itemizedlist>
                        <listitem>
                          <para>
                            Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-7.14"/>, <xref linkend="tc.CREDENTIAL-3-1-7.16"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--CREDENTIAL-3-1-8-->
      <section xml:id="tc.CREDENTIAL-3-1-8">
        <title>DELETE CREDENTIAL</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-8
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), DeleteCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify deleting of credential and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. 
          Credential Entity is supported by the DUT. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-8.4">
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList1</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential (in false, out <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Removed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">DeleteCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-8.10">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Removed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-8.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-8.20"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-3-1-8.12"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">oprationDelay</emphasis> timeout expires for step <xref linkend="tc.CREDENTIAL-3-1-8.10"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-3-1-8.20"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-8.12">
              <para>
                ONVIF Client retrieves a credential (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialList</emphasis> is not empty, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-8.20"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialInfoList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis> is not empty, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-8.20"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> contains <emphasis role="italic">credentialInfo</emphasis>.[token:= <emphasis role="italic">credentialToken</emphasis>] item, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-8.20"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList2</emphasis> contains <emphasis role="italic">credential</emphasis>.[token:= <emphasis role="italic">credentialToken</emphasis>] item, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-8.20"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-8.20">
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-3-1-8.4"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-8.21">
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialsResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">DeleteCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
      <!--CREDENTIAL-3-1-9-->
      <section xml:id="tc.CREDENTIAL-3-1-9">
        <title>GET CREDENTIALS WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-9
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Credential (ONVIF Credential Service Specification), GetCredentials command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentials
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentials</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token[0] := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential list =: <emphasis role="italic">credentialsList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialsList</emphasis> is not empty, FAIL the test.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is less than 2, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentials</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token[0] := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Token[1] := <emphasis role="italic">credentialInfoCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialsResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialInfo list =: <emphasis role="italic">credentialsList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialsList</emphasis> is empty, FAIL the test.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialsList</emphasis> contains more than one item, FAIL the test.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialsList</emphasis>[0].token does not equal to <emphasis role="italic">credentialInfoCompleteList</emphasis>[0].token, FAIL the test.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialsResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-10-->
      <section xml:id="tc.CREDENTIAL-3-1-10">
        <title>GET CREDENTIALS - TOO MANY ITEMS</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-10
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Credential (ONVIF Credential Service Specification), GetCredentials command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentials
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential in case if there a more items than MaxLimit in request.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.
          Test Configuration: ONVIF Client and DUT

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis>.token items number is less than <emphasis role="italic">cap</emphasis>.MaxLimit or equal to <emphasis role="italic">cap</emphasis>.MaxLimit, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">tokenList</emphasis> := [subset of <emphasis role="italic">credentialCompleteList</emphasis>.token values with items number equal to <emphasis role="italic">cap</emphasis>.MaxLimit + 1]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentials</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token list := <emphasis role="italic">tokenList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgs\ter:TooManyItems</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgs\ter:TooManyItems</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-11-->
      <section xml:id="tc.CREDENTIAL-3-1-11">
        <title>CREATE CREDENTIAL - NOT EMPTY CREDENTIAL TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-11
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CreateCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> CreateCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Create Credential with not Empty Token Verification.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves supported Credential identifier type name (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) (out <emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and credential identifier value (out <emphasis role="italic">value</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := "CredentialToken"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := true
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal</emphasis> SOAP 1.2 fault.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-12-->
      <section xml:id="tc.CREDENTIAL-3-1-12">
        <title>MODIFY CREDENTIAL WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-12
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> ModifyCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> ModifyCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify modifying of credential with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves supported Credential identifier type name (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) (out <emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and credential identifier value (out <emphasis role="italic">value</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">ModifyCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.Token := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-3-1-13-->
      <section xml:id="tc.CREDENTIAL-3-1-13">
        <title>DELETE CREDENTIAL WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-13
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> DeleteCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify deleting of credential with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>

                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">DeleteCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-3-1-14-->
      <section xml:id="tc.CREDENTIAL-3-1-14">
        <title>CREATE CREDENTIAL - VALIDITY VALUES</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-14
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), CreateCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> CreateCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and accessrules.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify creation of credential with credential validity and with credential access profile validity.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Access Rules Service is received from the DUT. Credential Entity is supported by the DUT. CredentialValiditySupported is supported by the DUT as indicated by the Capabilities.CredentialValiditySupported capability or CredentialAccessProfileValiditySupported is supported by the DUT as indicated by the Capabilities.CredentialAccessProfileValiditySupported capability. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profile (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves supported Credential identifier type name (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) (out <emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and credential identifier value (out <emphasis role="italic">value</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">credentialValidFrom</emphasis>:= value of current time
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">credentialValidTo</emphasis>:= <emphasis role="italic">credentialValidFrom</emphasis> + one year
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileValidFrom</emphasis> := value of current time + 24 h
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileValidTo</emphasis> := <emphasis role="italic">accessProfileValidFrom</emphasis> + one year
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := ""
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom := <emphasis role="italic">credentialValidFrom</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to true or skipped if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo := <emphasis role="italic">credentialValidTo</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to true or skipped if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0] is skipped if <emphasis role="italic">accessProfileCompleteList</emphasis> is empty or if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].ValidFrom := <emphasis role="italic">accessProfileValidFrom</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].ValidTo := <emphasis role="italic">accessProfileValidTo</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">CreateCredentialResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token =: <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialInfoList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.ValiditySupportsTimeValue is equal to true, check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].Credential.ValidFrom value does not equal to <emphasis role="italic">credentialValidFrom</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].Credential.ValidTo value does not equal to <emphasis role="italic">credentialValidTo</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].CredentialAccessProfile[0].ValidFrom value does not equal to <emphasis role="italic">accessProfileValidFrom</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].CredentialAccessProfile[0].ValidTo value does not equal to <emphasis role="italic">accessProfileValidTo</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoList</emphasis>[0].CredentialInfo.ValidFrom value does not equal to <emphasis role="italic">credentialValidFrom</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentiaIInfoList</emphasis>[0].CredentialInfo.ValidTo value does not equal to <emphasis role="italic">credentialValidTo</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.ValiditySupportsTimeValue is equal to false, check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].Credential.ValidFrom value contains data component that does not equal to data component of <emphasis role="italic">credentialValidFrom</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].Credential.ValidTo value contains data component that does not equal to data component of <emphasis role="italic">credentialValidTo</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].CredentialAccessProfile[0].ValidFrom value contains data component that does not equal to data component of <emphasis role="italic">accessProfileValidFrom</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].CredentialAccessProfile[0].ValidTo value contains data component that does not equal to data component of <emphasis role="italic">accessProfileValidTo</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoList</emphasis>[0].CredentialInfo.ValidFrom value contains data component that does not equal to data component of <emphasis role="italic">credentialValidFrom</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoList</emphasis>[0].CredentialInfo.ValidTo value contains data component that does not equal to data component of <emphasis role="italic">credentialValidTo</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-14.13"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-14.13">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">CreateCredentialResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The ONVIF Client sets and compares values of Credential.ValidFrom, Credential.ValidTo, CredentialAccessProfile.ValidFrom, and CredentialAccessProfile.ValidTo accurate to a second.
        </para>
      </section>
      <!--CREDENTIAL-3-1-15-->
      <section xml:id="tc.CREDENTIAL-3-1-15">
        <title>MODIFY CREDENTIAL - VALIDITY VALUES</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-15
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> ModifyCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> ModifyCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and accessrules.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify creation of credential with credential validity and with credential access profile validity.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Access Rules Service is received from the DUT. CredentialValiditySupported is supported by the DUT as indicated by the Capabilities.CredentialValiditySupported capability or CredentialAccessProfileValiditySupported is supported by the DUT as indicated by the Capabilities.CredentialAccessProfileValiditySupported capability. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profile (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves supported Credential identifier type name (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) (out <emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and credential identifier value (out <emphasis role="italic">value</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">credentialValidFrom1</emphasis>:= value of current time
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">credentialValidTo1</emphasis>:= <emphasis role="italic">credentialValidFrom1</emphasis> + one year
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileValidFrom1</emphasis> := value of current time + 24 h
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileValidTo1</emphasis> := <emphasis role="italic">accessProfileValidFrom1</emphasis> + one year
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := ""
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom := <emphasis role="italic">credentialValidFrom1</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to true or skipped if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo := <emphasis role="italic">credentialValidTo1</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to true or skipped if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0] is skipped if <emphasis role="italic">accessProfileCompleteList</emphasis> is empty or if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].ValidFrom := <emphasis role="italic">accessProfileValidFrom1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].ValidTo := <emphasis role="italic">accessProfileValidTo1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">CreateCredentialResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token =: <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">credentialValidFrom2</emphasis>:= <emphasis role="italic">credentialValidFrom2</emphasis> + one day + one hour
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">credentialValidTo2</emphasis>:= <emphasis role="italic">credentialValidTo2</emphasis> + one day + one hour
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileValidFrom2</emphasis> := <emphasis role="italic">accessProfileValidFrom1</emphasis> + one day + one hour
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileValidTo2</emphasis> := <emphasis role="italic">accessProfileValidFrom1</emphasis> + one day + one hour
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">ModifyCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.Token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom := <emphasis role="italic">credentialValidFrom2</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to true or skipped if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo := <emphasis role="italic">credentialValidTo2</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to true or skipped if <emphasis role="italic">cap</emphasis>.CredentialValiditySupported value is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0] is skipped if accessProfileCompleteList is empty or if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].ValidFrom := <emphasis role="italic">accessProfileValidFrom2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile[0].ValidTo := <emphasis role="italic">accessProfileValidTo2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">ModifyCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialInfoList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.ValiditySupportsTimeValue is equal to true, check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].Credential.ValidFrom value does not equal to <emphasis role="italic">credentialValidFrom2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].Credential.ValidTo value does not equal to <emphasis role="italic">credentialValidTo2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].CredentialAccessProfile[0].ValidFrom value does not equal to <emphasis role="italic">accessProfileValidFrom2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].CredentialAccessProfile[0].ValidTo value does not equal to <emphasis role="italic">accessProfileValidTo2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoList</emphasis>[0].CredentialInfo.ValidFrom value does not equal to <emphasis role="italic">credentialValidFrom2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentiaIInfoList</emphasis>[0].CredentialInfo.ValidTo value does not equal to <emphasis role="italic">credentialValidTo2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.ValiditySupportsTimeValue is equal to false, check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].Credential.ValidFrom value contains data component that does not equal to data component of <emphasis role="italic">credentialValidFrom2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].Credential.ValidTo value contains data component that does not equal to data component of <emphasis role="italic">credentialValidTo2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].CredentialAccessProfile[0].ValidFrom value contains data component that does not equal to data component of <emphasis role="italic">accessProfileValidFrom2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialList</emphasis>[0].CredentialAccessProfile[0].ValidTo value contains data component that does not equal to data component of <emphasis role="italic">accessProfileValidTo2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoList</emphasis>[0].CredentialInfo.ValidFrom value contains data component that does not equal to data component of <emphasis role="italic">credentialValidFrom2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialInfoList</emphasis>[0].CredentialInfo.ValidTo value contains data component that does not equal to data component of <emphasis role="italic">credentialValidTo2</emphasis>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-3-1-15.16"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-15.16">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreateCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">ModifyCredentialResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The ONVIF Client sets and compares values of Credential.ValidFrom, Credential.ValidTo, CredentialAccessProfile.ValidFrom, and CredentialAccessProfile.ValidTo accurate to a second.
        </para>
      </section>
      <!--CREDENTIAL-3-1-16-->
      <section xml:id="tc.CREDENTIAL-3-1-16">
        <title>SET NEW CREDENTIAL (ENABLED)</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-16
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), SetCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> SetCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify creation of enabled credential using SetCredential command and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. Access Rules Service is received from the DUT. Client Supplied Token is supported by the DUT. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves Credential Service Capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialCredentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem  xml:id="tc.CREDENTIAL-3-1-16.RemoveCredential">
              <para>
                ONVIF Client checks free storage for additional credential by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialCredentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialToRestore</emphasis> - removed credential
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">stateToRestore</emphasis> - state of removed credential
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of access profiles by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">accessProfileCompleteList</emphasis> - access profiles complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves supported credential identifier type name with corresponding credential identifier format type and credential identifier value by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType - list of supported identifier types
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">typeName</emphasis> - selected identifier type name
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">formatType</emphasis> - selected identifier format type
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">value</emphasis> - credential identifier value for selected identifier format type
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">credentialToken</emphasis> := token that differs from tokens listed in <emphasis role="italic">initialCredentialCompleteList</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates PullPoint subscription for the specified topic by following the procedure mentioned in <xref linkend="Annex_HelperCreatePullPointSubscription"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="bold">tns1:Configuration/Credential/Changed</emphasis> - Notification Topic
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">currentTime</emphasis> - current time for the DUT
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">terminationTime</emphasis> - Subscription termination time
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">credential</emphasis> :=
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := true if <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication, otherwise false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">accessProfileCompleteList</emphasis> contains at least one item:
                      <itemizedlist>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.ValidFrom skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.ValidTo skipped
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                    <para>
                      otherwise:
                      <itemizedlist>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile is skipped
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredential</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential := <emphasis role="italic">credential</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := true
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">SetCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves and checks <emphasis role="bold">tns1:Configuration/Credential/Changed</emphasis> event for the specified Credential token by following the procedure mentioned in <xref linkend="Annex_HelperPullCredentialChanged"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">currentTime</emphasis> - current time for the DUT
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">terminationTime</emphasis> - subscription termination time
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - Credential token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes PullPoint subscription by following the procedure mentioned in <xref linkend="Annex_HelperDeleteSubscription"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialList</emphasis> - the list of credentials
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-16.CompareCredential1">
              <para>
                If <emphasis role="italic">credentialList</emphasis>[0] item does not have equal to <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialInfoList</emphasis> - the list of credentials info
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-16.CompareCredentialInfo1">
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis>[0] item does not have equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials info by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialInfoCompleteList</emphasis> - credential info complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-16.CompareCredentialInfo2">
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> does not have CredentialInfo[token = <emphasis role="italic">credentialToken</emphasis>] item with equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-16.CompareCredential2">
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> does not have Credential[token = <emphasis role="italic">credentialToken</emphasis>] item with equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves credential state by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialState"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialState</emphasis> - credential state
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis>[0].Enabled equal to false, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis>[0].Reason does not equal to "Test Reason" or missed, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0] does not contain AntipassbackState element, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0].AntipassbackState.AntipassbackViolated equal to true, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the Credential by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-3-1-16.RemoveCredential"/>:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client restores credential deletes special day group by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> with the following input and output parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            in <emphasis role="italic">credentialToRestore</emphasis> - removed credential
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            in <emphasis role="italic">stateToRestore</emphasis> - state of removed credential
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">SetCredentialResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-16.CompareCredential1"/> and <xref linkend="tc.CREDENTIAL-3-1-16.CompareCredential2"/>:
          <itemizedlist>
            <listitem>
              <para>
                Credential:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier list (Type.Name is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            Type
                            <itemizedlist>
                              <listitem>
                                <para>
                                  Name
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  FormatType
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ExemptedFromAuthentication
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialAccessProfile list (AccessProfileToken is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            AccessProfileToken
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidFrom
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidTo
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Attribute list
                      <itemizedlist>
                        <listitem>
                          <para>
                            Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>

        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-16.CompareCredentialInfo1"/> and <xref linkend="tc.CREDENTIAL-3-1-16.CompareCredentialInfo2"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-3-1-17-->
      <section xml:id="tc.CREDENTIAL-3-1-17">
        <title>SET NEW CREDENTIAL (DISABLED)</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-17
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), SetCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> SetCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify creation of disabled credential using SetCredential command and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. Access Rules Service is received from the DUT. Client Supplied Token is supported by the DUT. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves Credential Service Capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialCredentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem  xml:id="tc.CREDENTIAL-3-1-17.RemoveCredential">
              <para>
                ONVIF Client checks free storage for additional credential by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialCredentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialToRestore</emphasis> - removed credential
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">stateToRestore</emphasis> - state of removed credential
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of access profiles by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">accessProfileCompleteList</emphasis> - access profiles complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves supported credential identifier type name with corresponding credential identifier format type and credential identifier value by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType - list of supported identifier types
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">typeName</emphasis> - selected identifier type name
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">formatType</emphasis> - selected identifier format type
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">value</emphasis> - credential identifier value for selected identifier format type
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">credentialToken</emphasis> := token that differs from tokens listed in <emphasis role="italic">initialCredentialCompleteList</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates PullPoint subscription for the specified topic by following the procedure mentioned in <xref linkend="Annex_HelperCreatePullPointSubscription"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="bold">tns1:Configuration/Credential/Changed</emphasis> - Notification Topic
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">currentTime</emphasis> - current time for the DUT
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">terminationTime</emphasis> - Subscription termination time
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">credential</emphasis> :=
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := true if <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication, otherwise false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">accessProfileCompleteList</emphasis> contains at least one item:
                      <itemizedlist>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.ValidFrom skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.ValidTo skipped
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                    <para>
                      otherwise:
                      <itemizedlist>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile is skipped
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredential</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential := <emphasis role="italic">credential</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">SetCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves and checks <emphasis role="bold">tns1:Configuration/Credential/Changed</emphasis> event for the specified Credential token by following the procedure mentioned in <xref linkend="Annex_HelperPullCredentialChanged"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">currentTime</emphasis> - current time for the DUT
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">terminationTime</emphasis> - subscription termination time
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - Credential token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes PullPoint subscription by following the procedure mentioned in <xref linkend="Annex_HelperDeleteSubscription"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialList</emphasis> - the list of credentials
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-17.CompareCredential1">
              <para>
                If <emphasis role="italic">credentialList</emphasis>[0] item does not have equal to <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialInfoList</emphasis> - the list of credentials info
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-17.CompareCredentialInfo1">
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis>[0] item does not have equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials info by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialInfoCompleteList</emphasis> - credential info complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-17.CompareCredentialInfo2">
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> does not have CredentialInfo[token = <emphasis role="italic">credentialToken</emphasis>] item with equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-17.CompareCredential2">
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> does not have Credential[token = <emphasis role="italic">credentialToken</emphasis>] item with equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves credential state by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialState"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialState</emphasis> - credential state
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis>[0].Enabled equal to true, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis>[0].Reason does not equal to "Test Reason" or missed, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0] does not contain AntipassbackState element, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0].AntipassbackState.AntipassbackViolated equal to true, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the Credential by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-3-1-17.RemoveCredential"/>:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client restores credential deletes special day group by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> with the following input and output parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            in <emphasis role="italic">credentialToRestore</emphasis> - removed credential
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            in <emphasis role="italic">stateToRestore</emphasis> - state of removed credential
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">SetCredentialResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-17.CompareCredential1"/> and <xref linkend="tc.CREDENTIAL-3-1-17.CompareCredential2"/>:
          <itemizedlist>
            <listitem>
              <para>
                Credential:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier list (Type.Name is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            Type
                            <itemizedlist>
                              <listitem>
                                <para>
                                  Name
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  FormatType
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ExemptedFromAuthentication
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialAccessProfile list (AccessProfileToken is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            AccessProfileToken
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidFrom
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidTo
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Attribute list
                      <itemizedlist>
                        <listitem>
                          <para>
                            Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>

        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-17.CompareCredentialInfo1"/> and <xref linkend="tc.CREDENTIAL-3-1-17.CompareCredentialInfo2"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>

      <!--CREDENTIAL-3-1-18-->
      <section xml:id="tc.CREDENTIAL-3-1-18">
        <title>SET CREDENTIAL</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-3-1-18
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialInfo (ONVIF Credential Service Specification), Credential (ONVIF Credential Service Specification), SetCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> ModifyCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify modifying of credential with different states using SetCredential command and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. Access Rules Service is received from the DUT. Client Supplied Token is supported by the DUT.  The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem xml:id="tc.CREDENTIAL-3-1-18.1">
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves Credential Service Capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialCredentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem  xml:id="tc.CREDENTIAL-3-1-18.RemoveCredential">
              <para>
                ONVIF Client checks free storage for additional credential by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialCredentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialToRestore</emphasis> - removed credential
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">stateToRestore</emphasis> - state of removed credential
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of access profiles by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">accessProfileCompleteList</emphasis> - access profiles complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in false - ExemptedFromAuthentication value
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">typeName</emphasis> - selected identifier type name
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">formatType</emphasis> - selected identifier format type
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">value</emphasis> - credential identifier value for selected identifier format type
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialToken</emphasis> - Credential token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates PullPoint subscription for the specified topic by following the procedure mentioned in <xref linkend="Annex_HelperCreatePullPointSubscription"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="bold">tns1:Configuration/Credential/Changed</emphasis> - Notification Topic
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">currentTime</emphasis> - current time for the DUT
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">terminationTime</emphasis> - Subscription termination time
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">credential</emphasis> :=
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description2"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser2"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := true if <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication, otherwise false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">accessProfileCompleteList</emphasis> contains at least one item:
                      <itemizedlist>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.ValidFrom skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile.ValidTo skipped
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                    <para>
                      otherwise:
                      <itemizedlist>
                        <listitem>
                          <para>
                            Credential.CredentialAccessProfile is skipped
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredential</emphasis> request with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential := <emphasis role="italic">credential</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason2"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">SetCredentialResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves and checks <emphasis role="bold">tns1:Configuration/Credential/Changed</emphasis> event for the specified Credential token by following the procedure mentioned in <xref linkend="Annex_HelperPullCredentialChanged"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">currentTime</emphasis> - current time for the DUT
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">terminationTime</emphasis> - subscription termination time
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - Credential token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes PullPoint subscription by following the procedure mentioned in <xref linkend="Annex_HelperDeleteSubscription"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">s</emphasis> - Subscription reference
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>


            <listitem>
              <para>
                ONVIF Client retrieves a credential by following the procedure mentioned in <xref linkend="Annex_HelperGetCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialList</emphasis> - the list of credentials
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-18.CompareCredential1">
              <para>
                If <emphasis role="italic">credentialList</emphasis>[0] item does not have equal to <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a credential info by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfo"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialInfoList</emphasis> - the list of credentials info
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-18.CompareCredentialInfo1">
              <para>
                If <emphasis role="italic">credentialInfoList</emphasis>[0] item does not have equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials info by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialInfoCompleteList</emphasis> - credential info complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-18.CompareCredentialInfo2">
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> does not have CredentialInfo[token = <emphasis role="italic">credentialToken</emphasis>] item with equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves complete list of credentials by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialCompleteList</emphasis> - credential complete list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-3-1-18.CompareCredential2">
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> does not have Credential[token = <emphasis role="italic">credentialToken</emphasis>] item with equal fields with <emphasis role="italic">credential</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves credential state by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialState"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialState</emphasis> - credential state
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis>[0].Enabled equal to true, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis>[0].Reason does not equal to "Test Reason2" or missed, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true check the following:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0] does not contain AntipassbackState element, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialState</emphasis>[0].AntipassbackState.AntipassbackViolated equal to true, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the Credential by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialToken</emphasis> - credential token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-3-1-18.RemoveCredential"/>:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client restores credential deletes special day group by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> with the following input and output parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            in <emphasis role="italic">credentialToRestore</emphasis> - removed credential
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            in <emphasis role="italic">stateToRestore</emphasis> - state of removed credential
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">SetCredentialResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-18.CompareCredential1"/> and <xref linkend="tc.CREDENTIAL-3-1-18.CompareCredential2"/>:
          <itemizedlist>
            <listitem>
              <para>
                Credential:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier list (Type.Name is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            Type
                            <itemizedlist>
                              <listitem>
                                <para>
                                  Name
                                </para>
                              </listitem>
                              <listitem>
                                <para>
                                  FormatType
                                </para>
                              </listitem>
                            </itemizedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ExemptedFromAuthentication
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialAccessProfile list (AccessProfileToken is used as unique key for comparing)
                      <itemizedlist>
                        <listitem>
                          <para>
                            AccessProfileToken
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidFrom
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            ValidTo
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Attribute list
                      <itemizedlist>
                        <listitem>
                          <para>
                            Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>

        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at steps <xref linkend="tc.CREDENTIAL-3-1-18.CompareCredentialInfo1"/> and <xref linkend="tc.CREDENTIAL-3-1-18.CompareCredentialInfo2"/>:
          <itemizedlist>
            <listitem>
              <para>
                CredentialInfo:
                <itemizedlist>
                  <listitem>
                    <para>
                      token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Description
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialHolderToken
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidFrom
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ValidTo
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <!--Credential State-->
    <section xml:id="tc.credential.credential_state"
             xreflabel="Section 4.4">
      <title>Credential State</title>
      <!--CREDENTIAL-4-1-1-->
      <section xml:id="tc.CREDENTIAL-4-1-1">
        <title>GET CREDENTIAL STATE</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-4-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialState (ONVIF Credential Service Specification), GetCredentialState command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialState
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential State.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialInfoCompleteList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                For each CredentialInfo.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialInfoCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialState</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Token := <emphasis role="italic">token</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialStateResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            State =: <emphasis role="italic">credentialState</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported is equal to true and <emphasis role="italic">credentialState</emphasis> does not contain AntipassbackState element, FAIL the test.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialStateResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--CREDENTIAL-4-1-2-->
      <section xml:id="tc.CREDENTIAL-4-1-2">
        <title>CHANGE CREDENTIAL STATE</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-4-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialState (ONVIF Credential Service Specification), GetCredentialState command (ONVIF Credential Service Specification), EnableCredential command (ONVIF Credential Service Specification), DisableCredential command (ONVIF Credential Service Specification).
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialState, EnableCredential, DisableCredential.
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify enabling and disabling of Credential and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-4-1-2.4">
              <para>
                ONVIF Client checks free storage (in <emphasis role="italic">credentialCompleteList1</emphasis>) for additional Credential and removes one if needed (out <emphasis role="italic">credentialToRestore</emphasis>, out <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential (out <emphasis role="italic">credentialToken</emphasis>) with antipass back state equal to false (in false) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialState</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialStateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      State =: <emphasis role="italic">credentialState1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState1</emphasis>.Enabled is not equal to true, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Credential/State/Enabled"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-4-1-2.11">
              <para>
                ONVIF Client changes credential state (in <emphasis role="italic">credentialState1</emphasis>) for created credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperChangeCredentialState"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-4-1-2.12">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint s with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            If TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Credential/State/Enabled", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Source.SimpleItem item with Name = "CredentialToken" and with Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Data.SimpleItem item with Name = "State" and with Value = false, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Data.SimpleItem item with Name = "Reason" and with Value = "Test Reason", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Data.SimpleItem item with Name = "ClientUpdated", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis>.Message.Message.Data.SimpleItem.ClientUpdated has value type different from xs:boolean type, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Go to step <xref linkend="tc.CREDENTIAL-4-1-2.14"/>.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">oprationDelay</emphasis> timeout expires for step <xref linkend="tc.CREDENTIAL-4-1-2.12"/> without any Notification, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-4-1-2.14">
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialState</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialStateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      State =: <emphasis role="italic">credentialState2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState1</emphasis>.Enabled equal to <emphasis role="italic">credentialState2</emphasis>.Enabled, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client changes credential state (in <emphasis role="italic">credentialState2</emphasis>) for created credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperChangeCredentialState"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            If TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Credential/State/Enabled", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Source.SimpleItem item with Name = "CredentialToken" and with Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Data.SimpleItem item with Name = "State" and with Value = true, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Data.SimpleItem item with Name = "Reason" and with Value = "Test Reason", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Data.SimpleItem item with Name = "ClientUpdated", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis>.Message.Message.Data.SimpleItem.ClientUpdated has value type different from xs:boolean type, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>. Go to step <xref linkend="tc.CREDENTIAL-4-1-2.20"/>.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">oprationDelay</emphasis> timeout expires for step <xref linkend="tc.CREDENTIAL-4-1-2.11"/> without any Notification, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-4-1-2.22"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-4-1-2.20">
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialState</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialStateResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      State =: <emphasis role="italic">credentialState3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-4-1-2.22">
              <para>
                If <emphasis role="italic">credentialState3</emphasis>.Enabled equal to <emphasis role="italic">credentialState2</emphasis>.Enabled, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-4-1-2.23"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-4-1-2.23">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-4-1-2.4"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>) with initial state (in <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialStateResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
      <!--CREDENTIAL-4-1-3-->
      <section xml:id="tc.CREDENTIAL-4-1-3">
        <title>GET CREDENTIAL STATE WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-4-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetCredentialState command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialState
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential State with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialState</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-4-1-4-->
      <section xml:id="tc.CREDENTIAL-4-1-4">
        <title>ENABLE CREDENTIAL WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-4-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> EnableCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> EnableCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Enable Credential with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">EnableCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-4-1-5-->
      <section xml:id="tc.CREDENTIAL-4-1-5">
        <title>DISABLE CREDENTIAL WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-4-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> DisableCredential command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DisableCredential
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Disable Credential with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DisableCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.


              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
    </section>
    <!--Credential Identifiers-->
    <section xml:id="tc.credential.credential_identifiers"
             xreflabel="Section 4.5">
      <title>Credential Identifiers</title>
      <!--CREDENTIAL-5-1-1-->
      <section xml:id="tc.CREDENTIAL-5-1-1">
        <title>GET CREDENTIAL IDENTIFIERS</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialIdentifier (ONVIF Credential Service Specification), CredentialIdentiferValue (ONVIF Credential Service Specification), GetCredentialIdentifiers command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialIdentifiers
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Identifiers.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                For each Credential.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialIdentifiers</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CredentialToken := <emphasis role="italic">token</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CredentialIdentifier list =: <emphasis role="italic">credentialIdentifierList</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialIdentifierList</emphasis> contains at least two credential identifier items with equal Type.Name, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialIdentifierList</emphasis> contains at least one credential identifier item with Type.Name other than listed in <emphasis role="italic">cap</emphasis>.SupportedIdentifierTypes, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem xml:id="tc.CREDENTIAL-5-1-1.6.5"
                            xreflabel="6.5">
                    <para>
                      If <emphasis role="italic">credentialIdentifierList</emphasis> does not contain all credential identifiers from <emphasis role="italic">credentialCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>].CredentialIdentifierList, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem xml:id="tc.CREDENTIAL-5-1-1.6.6"
                            xreflabel="6.6">
                    <para>
                      If <emphasis role="italic">credentialIdentifierList</emphasis> contains credential identifiers other than credential identifiers from <emphasis role="italic">credentialCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>].CredentialIdentifierList, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      For each credential identifier <emphasis role="italic">credentialIdentifier</emphasis> from <emphasis role="italic">credentialIdentifierList</emphasis> repeat the following steps:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem xml:id="tc.CREDENTIAL-5-1-1.6.7.1"
                                  xreflabel="6.7.1">
                          <para>
                            If <emphasis role="italic">credentialIdentifier</emphasis> item does not have equal field values to <emphasis role="italic">credentialCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>].CredentialIdentifierList [Type.Name = <emphasis role="italic">credentialIdentifier</emphasis>.Type.Name] item, FAIL the test and skip other steps.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                </orderedlist>

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> To compare identifiers list as steps <xref linkend="tc.CREDENTIAL-5-1-1.6.5"/> and <xref linkend="tc.CREDENTIAL-5-1-1.6.6"/> Type.Name is used as unique value for identifier.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step <xref linkend="tc.CREDENTIAL-5-1-1.6.7.1"/>:
          <itemizedlist>
            <listitem>
              <para>
                Type
                <itemizedlist>
                  <listitem>
                    <para>
                      Name
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      FormatType
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ExemptedFromAuthentication
              </para>
            </listitem>
            <listitem>
              <para>
                Value
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-5-1-2-->
      <section xml:id="tc.CREDENTIAL-5-1-2">
        <title>SET CREDENTIAL IDENTIFIER – ADDING NEW TYPE</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialIdentifier (ONVIF Credential Service Specification), CredentialIdentiferValue (ONVIF Credential Service Specification), GetCredentialIdentifiers command (ONVIF Credential Service Specification), SetCredentialIdentifier command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> SetCredentialIdentifier
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify creation of credential identifier and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-2.4">
              <para>
                If <emphasis role="italic">cap</emphasis>.SupportedIdentifierType does not contain more than one IdentifierType item, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-2.6">
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential (in <emphasis role="italic">cap</emphasis>) with ExemptedFromAuthentication equal to false (in false), with Credential identifier item (out <emphasis role="italic">typeName1</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType1</emphasis>) and corresponding credential identifier value (out <emphasis role="italic">value1</emphasis>) and with credential token (out <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">identifierTypeNameList</emphasis> := <emphasis role="italic">cap</emphasis>.SupportedIdentifierType - <emphasis role="italic">typeName1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a Credential identifier type name (out <emphasis role="italic">typeName2</emphasis>) different from typeName1 (in <emphasis role="italic">identifierTypeNameList</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType2</emphasis>) and corresponding credential identifier value (out <emphasis role="italic">value2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredentialIdentifier</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Type.Name := <emphasis role="italic">typeName2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Type.FormatType := <emphasis role="italic">formatType2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.ExemptedFromAuthentication := true if <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication, otherwise false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Value := <emphasis role="italic">value2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">SetCredentialIdentifierResponse</emphasis> message.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-2.14">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-5-1-2.14"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">oprationDelay</emphasis> timeout expires for step <xref linkend="tc.CREDENTIAL-5-1-2.14"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialIdentifiers</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialIdentifier list =: <emphasis role="italic">credentialIdentifierList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> contains more or less than two items, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> does not have item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName1</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> does not have item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName1</emphasis> has FormatType value different from <emphasis role="italic">formatType1</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName1</emphasis> has Value value different from <emphasis role="italic">value1</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName1</emphasis> has ExemptedFromAuthentication value different from false, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName2</emphasis> has FormatType value different from <emphasis role="italic">formatType2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName2</emphasis> has Value value different from <emphasis role="italic">value2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialIdentifierList</emphasis> item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName2</emphasis> has ExemptedFromAuthentication value different from true, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.Extension does not contain SupportedExemptionType element with value = pt:ExemptFromAuthentication:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialIdentifierList</emphasis> item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName2</emphasis> has ExemptedFromAuthentication value different from false, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-2.28"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-2.28">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-5-1-2.6"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, in <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">SetCredentialIdentifierResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullpointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT supports only one credential identifier type, type warning message at step <xref linkend="tc.CREDENTIAL-5-1-2.4"/>.
        </para>
      </section>
      <!--CREDENTIAL-5-1-3-->
      <section xml:id="tc.CREDENTIAL-5-1-3">
        <title>SET CREDENTIAL IDENTIFIER – REPLACE OF THE SAME TYPE</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialIdentifier (ONVIF Credential Service Specification), CredentialIdentiferValue (ONVIF Credential Service Specification), GetCredentialIdentifiers command (ONVIF Credential Service Specification), SetCredentialIdentifier command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> SetCredentialIdentifier
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify replacing of credential identifier and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-3.4">
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-3.5">
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, out <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a list of Credential identifier Type Name items, which support at least two Format Types (out <emphasis role="italic">CredentialIdentifierTypeNameList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierName"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">CredentialIdentifierTypeNameList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves Credential identifier Type Name (out <emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType1</emphasis>) and Credential identifier value (out <emphasis role="italic">value1</emphasis>), and with corresponding Credential identifier Format Type (out <emphasis role="italic">formatType2</emphasis>) and Credential identifier value (out <emphasis role="italic">value2</emphasis>) based on Credential identifier Type Name items (in <emphasis role="italic">CredentialIdentifierTypeNameList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue2"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Credential.token := ""
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Description := "Test Description"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialHolderReference := "TestUser"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.ValidTo skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].ExemptedFromAuthentication := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value1</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.Extension skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Enabled := true
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.Reason := "Test Reason"
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      State.AntipassbackState.AntipassbackViolated := false if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">CreateCredentialResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token =: <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-3.13">
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredentialIdentifier</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Type.FormatType := formatType2
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.ExemptedFromAuthentication := true if <emphasis role="italic">cap</emphasis>.Extension contains SupportedExemptionType element with value = pt:ExemptFromAuthentication, otherwise false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Value := <emphasis role="italic">value2</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-3.14">
              <para>
                The DUT responds with empty <emphasis role="bold">SetCredentialIdentifierResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint s with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-3.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-3.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-5-1-3.16"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-3.16">
              <para>
                If oprationDelay timeout expires for step <xref linkend="tc.CREDENTIAL-5-1-3.14"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-3.21"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialIdentifiers</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialIdentifier list =: <emphasis role="italic">credentialIdentifierList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> contains more or less than one item, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-3.21"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis>[0].CredentialIdentifier.Type.Name item is not equal to <emphasis role="italic">typeName</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-3.21"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-3.21">
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> item with CredentialIdentifier.Type.Name value equal to <emphasis role="italic">typeName</emphasis> has different field values to values from step <xref linkend="tc.CREDENTIAL-5-1-3.13"/>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-3.21"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-5-1-3.5"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, in <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">SetCredentialIdentifierResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullpointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
          <itemizedlist>
            <listitem>
              <para>
                CredentialIdentifier list (Type.Name is used as unique key for comparing)
                <itemizedlist>
                  <listitem>
                    <para>
                      Type
                      <itemizedlist>
                        <listitem>
                          <para>
                            Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            FormatType
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ExemptedFromAuthentication
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Value
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-5-1-4-->
      <section xml:id="tc.CREDENTIAL-5-1-4">
        <title>DELETE CREDENTIAL IDENTIFIER</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialIdentifier (ONVIF Credential Service Specification), CredentialIdentiferValue (ONVIF Credential Service Specification), GetCredentialIdentifiers command (ONVIF Credential Service Specification), SetCredentialIdentifiers command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteCredentialIdentifier
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify replacing of credential identifier and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-4.4">
              <para>
                If <emphasis role="italic">cap</emphasis>.SupportedIdentifierType contains less than two SupportedIdentifierType items, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential with two Credential identifier items (out <emphasis role="italic">typeName1</emphasis>), (out <emphasis role="italic">typeName2</emphasis>), with corresponding Format Types (out <emphasis role="italic">formatType1</emphasis>), (out <emphasis role="italic">formatType2</emphasis>) and with corresponding values (out <emphasis role="italic">value1</emphasis>), (out <emphasis role="italic">value2</emphasis>), with antipass back state equal to false (in false), and with credential token (out <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential2"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteCredentialIdentifier</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifierTypeName := <emphasis role="italic">typeName1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">DeleteCredentialIdentifierResponse</emphasis> message.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-4.12">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-5-1-4.14"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If oprationDelay timeout expires for step <xref linkend="tc.CREDENTIAL-5-1-4.12"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-4.14">
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialIdentifiers</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialIdentifier list =: <emphasis role="italic">credentialIdentifierList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> contains less than one item, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> contains more than one item, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis>[0].CredentialIdentifier.Type.Name value does not equal to <emphasis role="italic">typeName2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis>[0].CredentialIdentifier.Type.FormatType value does not equal to <emphasis role="italic">formatType2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis>[0].CredentialIdentifier.ExemptedFromAuthentication value does not equal to false, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis>[0].CredentialIdentifier.Value value does not equal to <emphasis role="italic">value2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-4.22"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-4.22">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-5-1-4.4"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">DeleteCredentialIdentifierResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullpointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
      <!--CREDENTIAL-5-1-5-->
      <section xml:id="tc.CREDENTIAL-5-1-5">
        <title>GET SUPPORTED FORMAT TYPES</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialIdentifier (ONVIF Credential Service Specification), GetSupportedFormatTypes command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetSupportedFormatTypes
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Supported Format Types.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                For each <emphasis role="italic">cap</emphasis>.SupportedIdentifierType <emphasis role="italic">identifierType</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetSupportedFormatTypes</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CredentialIdentifierTypeName := <emphasis role="italic">identifierType</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            FormatTypeInfo list =: <emphasis role="italic">receivedformatTypeInfoList</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">formatTypeInfoList</emphasis>[<emphasis role="italic">identifierType</emphasis>] := <emphasis role="italic">receivedFormatTypeInfoList</emphasis>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">formatTypeInfoList</emphasis>[<emphasis role="italic">identifierType</emphasis>] is empty, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">formatTypeInfoList</emphasis>[<emphasis role="italic">identifierType</emphasis>] contains at least two format type info items with equal FormatType, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                For each Credential.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialIdentifiers</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CredentialToken := <emphasis role="italic">token</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CredentialIdentifier list =: <emphasis role="italic">credentialIdentifierList</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      For each CredentialIdentifier.Type.Name <emphasis role="italic">typeName</emphasis> from <emphasis role="italic">credentialIdentifierList</emphasis> repeat the following steps:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            If credential identifier type with <emphasis role="italic">typeName</emphasis> contains other format type (CredentialIdentifier.Type.FormatType) than listed in <emphasis role="italic">formatTypeInfoList</emphasis>[<emphasis role="italic">typeName</emphasis>], FAIL the test and skip other steps.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-5-1-6-->
      <section xml:id="tc.CREDENTIAL-5-1-6">
        <title>GET CREDENTIAL IDENTIFIERS WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-6
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetCredentialIdentifiers command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialIdentifiers
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Identifiers with Invalid Token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialIdentifiers</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-5-1-7-->
      <section xml:id="tc.CREDENTIAL-5-1-7">
        <title>SET CREDENTIAL IDENTIFIER WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-7
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> SetCredentialIdentifier command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> SetCredentialIdentifier with invalid token
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Set Credential Identifier with Invalid Token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) a supported Credential identifier type name (out <emphasis role="italic">typeName</emphasis>) with Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and with credential identifier value (out <emphasis role="italic">value</emphasis>) by the following procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredentialIdentifier</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Type.Name := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Type.FormatType := <emphasis role="italic">formatType</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.ExemptedFromAuthentication := false
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Value := <emphasis role="italic">value</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifier.Extension skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-5-1-8-->
      <section xml:id="tc.CREDENTIAL-5-1-8">
        <title>DELETE CREDENTIAL IDENTIFIER WITH INVALID CREDENTIAL TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-8
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> DeleteCredentialIdentifier command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteCredentialIdentifier
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Delete Credential Identifier with invalid credential token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteCredentialIdentifier</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifierTypeName := <emphasis role="italic">cap</emphasis>.SupportedIdentifierType[0]
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-5-1-9-->
      <section xml:id="tc.CREDENTIAL-5-1-9">
        <title>DELETE CREDENTIAL IDENTIFIER WITH INVALID IDENTIFIER TYPE</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-9
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> DeleteCredentialIdentifier command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteCredentialIdentifier
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Delete Credential Identifier with invalid identifier type.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.SupportedIdentifierType contains less than two SupportedIdentifierType items, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential with two Credential identifier items (out <emphasis role="italic">typeName1</emphasis>), (out <emphasis role="italic">typeName2</emphasis>), with corresponding Format Types (out <emphasis role="italic">formatType1</emphasis>), (out <emphasis role="italic">formatType2</emphasis>) and with corresponding values (out <emphasis role="italic">value1</emphasis>), (out <emphasis role="italic">value2</emphasis>), with antipass back state equal to false (in false), and with credential token (out credentialToken) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential2"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidIdentifierType</emphasis> := value not equal to any <emphasis role="italic">cap</emphasis>.SupportedIdentifierType.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteCredentialIdentifier</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifierTypeName := <emphasis role="italic">invalidIdentifierType</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">DeleteCredentialIdentifierResponse</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialIdentifiers</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialIdentifiersResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialIdentifier list =: <emphasis role="italic">credentialIdentifierList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> contains less than two items, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-9.15"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> contains more than two items, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-9.15"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> does not contain <emphasis role="italic">typeName1</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-9.15"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialIdentifierList</emphasis> does not contain <emphasis role="italic">typeName2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-5-1-9.15"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-5-1-9.15">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">DeleteCredentialIdentifierResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--CREDENTIAL-5-1-10-->
      <section xml:id="tc.CREDENTIAL-5-1-10">
        <title>DELETE CREDENTIAL IDENTIFIER - MIN IDENTIFIERS PER CREDENTIAL</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-5-1-10
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> DeleteCredentialIdentifier command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteCredentialIdentifier
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Delete Credential Identifier from a credential when credential contains only one Credential Identifier.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential with ExemptedFromAuthentication equal to false (in false), with Credential identifier item (out <emphasis role="italic">typeName</emphasis>) and with credential token (out <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteCredentialIdentifier</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CredentialIdentifierTypeName := <emphasis role="italic">typeName</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Receiver\ter:ConstraintViolated\ter:MinIdentifiersPerCredential</emphasis> SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Receiver\ter:ConstraintViolated\ter:MinIdentifiersPerCredential</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
    </section>
    <!--Credential Access Profiles-->
    <section xml:id="tc.credential.credential_access_profiles"
             xreflabel="Section 4.6">
      <title>Credential Access Profiles</title>
      <!--CREDENTIAL-6-1-1-->
      <section xml:id="tc.CREDENTIAL-6-1-1">
        <title>GET CREDENTIAL ACCESS PROFILES</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-6-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialAccessProfile (ONVIF Credential Service Specification), GetCredentialAccessProfiles command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialAccessProfiles
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Access Profiles.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialCompleteList</emphasis> is empty, skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                For each Credential.token <emphasis role="italic">token</emphasis> from <emphasis role="italic">credentialCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetCredentialAccessProfiles</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CredentialToken := <emphasis role="italic">token</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CredentialAccessProfile list =: <emphasis role="italic">credentialAccessProfileList</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis> contains at least two credential access profile items with equal AccessProfileToken, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis> contains more AccessProfileInfo items than <emphasis role="italic">cap</emphasis>.MaxAccessProfilesPerCredential, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem xml:id="tc.CREDENTIAL-6-1-1.6.5"
                            xreflabel="6.5">
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis> does not contain all credential access profiles from <emphasis role="italic">credentialCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>].CredentialAccessProfileList, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem xml:id="tc.CREDENTIAL-6-1-1.6.6"
                            xreflabel="6.6">
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis> contains credential access profiles other than credential access profiles from <emphasis role="italic">credentialCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>].CredentialAccessProfileList, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      For each credential access profile <emphasis role="italic">accessProfile</emphasis> from <emphasis role="italic">credentialAccessProfileList</emphasis> repeat the following steps:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem xml:id="tc.CREDENTIAL-6-1-1.6.7.1"
                                  xreflabel="6.7.1">
                          <para>
                            If accessProfile item does not have equal field values to <emphasis role="italic">credentialCompleteList</emphasis>[token = <emphasis role="italic">token</emphasis>].CredentialAccessProfileList[AccessProfileToken = <emphasis role="italic">accessProfile</emphasis>.AccessProfileToken] item, FAIL the test and skip other steps.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> To compare credential access profile list at steps <xref linkend="tc.CREDENTIAL-6-1-1.6.5"/> and <xref linkend="tc.CREDENTIAL-6-1-1.6.6"/>, AccessProfileToken is used as unique value for credential access profile.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> The following fields are compared at step <xref linkend="tc.CREDENTIAL-6-1-1.6.7.1"/>:
          <itemizedlist>
            <listitem>
              <para>
                AccessProfileToken
              </para>
            </listitem>
            <listitem>
              <para>
                ValidFrom
              </para>
            </listitem>
            <listitem>
              <para>
                ValidTo
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-6-1-2-->
      <section xml:id="tc.CREDENTIAL-6-1-2">
        <title>SET CREDENTIAL ACCESS PROFILES - ADDING NEW ACCESS PROFILE</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-6-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialAccessProfile (ONVIF Credential Service Specification), SetCredentialAccessProfiles command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> SetCredentialAccessProfiles
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Set Credential Access Profiles (adding new Access Profile).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Access Rules Service is received from the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profile (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileToken</emphasis> := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-2.6">
              <para>
                If <emphasis role="italic">accessProfileCompleteList</emphasis> is empty, ONVIF Client creates access profile (out <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateAccessProfile"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-2.8">
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential (in <emphasis role="italic">cap</emphasis>, out <emphasis role="italic">credentialToken</emphasis>) with Antipassback Violation State value equal to false (in false) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-2.12">
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidFrom := <emphasis role="italic">validFromDateTime</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to true. Otherwise Credential.CredentialAccessProfile.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidTo := <emphasis role="italic">validToDateTime</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to true. Otherwise Credential.CredentialAccessProfile.ValidTo skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">SetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-2.14">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-6-1-2.16"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If oprationDelay timeout expires for step <xref linkend="tc.CREDENTIAL-6-1-2.14"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-2.16">
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialAccessProfile list =: <emphasis role="italic">credentialAccessProfileList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialAccessProfileList</emphasis> contains more or less than one CredentialAccessProfile item, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to true and <emphasis role="italic">cap</emphasis>.ValiditySupportsTimeValue is equal to false:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis>[0].AccessProfileToken value is not equal to <emphasis role="italic">accessProfileToken</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis>[0].ValidFrom value contains data component is not equal to data component of <emphasis role="italic">validFromDateTime</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis>[0].ValidTo value contains data component that is not equal to data component of <emphasis role="italic">validToDateTime</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Go to the step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialAccessProfileList</emphasis>[0] item does not have equal field values to values from step <xref linkend="tc.CREDENTIAL-6-1-2.12"/>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-2.21"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-2.21">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-6-1-2.8"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was access profile created at step <xref linkend="tc.CREDENTIAL-6-1-2.6"/>, ONVIF Client deletes it (in <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteAccessProfile"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">SetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">validFromDateTime</emphasis> is set as current time, <emphasis role="italic">validToDateTime</emphasis> is set as current time + 1 year.
        </para>
      </section>
      <!--CREDENTIAL-6-1-3-->
      <section xml:id="tc.CREDENTIAL-6-1-3">
        <title>SET CREDENTIAL ACCESS PROFILES - UPDATING ACCESS PROFILE</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-6-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialAccessProfile (ONVIF Credential Service Specification), SetCredentialAccessProfiles command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> SetCredentialAccessProfiles
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Set Credential Access Profiles (updating Access Profile).
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Access Rules Service is received from the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profile (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileToken</emphasis> := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-3.6">
              <para>
                If <emphasis role="italic">accessProfileCompleteList</emphasis> is empty, ONVIF Client creates access profile (out <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateAccessProfile"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-3.8">
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList1</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential (in <emphasis role="italic">cap</emphasis>, out <emphasis role="italic">credentialToken</emphasis>) with Antipassback Violation State equal to false (in false) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">validFromDateTime1</emphasis> := value of current time
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">validToDateTime1</emphasis> := <emphasis role="italic">validToDateTime1</emphasis> + one year
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidFrom := <emphasis role="italic">validFromDateTime1</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to true. Otherwise Credential.CredentialAccessProfile.ValidFrom skipped.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidTo := <emphasis role="italic">validToDateTime1</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to true. Otherwise Credential.CredentialAccessProfile.ValidTo skipped.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">SetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">validFromDateTime2</emphasis> := <emphasis role="italic">validFromDateTime1</emphasis> + one day + one hour
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      <emphasis role="italic">validToDateTime2</emphasis> := <emphasis role="italic">validToDateTime1</emphasis> + one day + one hour
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-3.15">
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidFrom := <emphasis role="italic">validFromDateTime2</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to true. Otherwise Credential.CredentialAccessProfile.ValidFrom skipped.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidTo := <emphasis role="italic">ValidToDateTime2</emphasis> if <emphasis role="italic">cap</emphasis>.CredentialAccessProfileValiditySupported is equal to true. Otherwise Credential.CredentialAccessProfile.ValidTo skipped.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">SetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-3.19">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-6-1-3.21"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If oprationDelay timeout expires for step <xref linkend="tc.CREDENTIAL-6-1-3.19"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-3.21">
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialAccessProfile list =: <emphasis role="italic">credentialAccessProfileList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialAccessProfileList</emphasis> contains more or less than one CredentialAccessProfile item, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>. CredentialAccessProfileValiditySupported is equal to true and <emphasis role="italic">cap</emphasis>.ValiditySupportsTimeValue is equal to false:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis>[0].AccessProfileToken value is not equal to <emphasis role="italic">accessProfileToken</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis>[0].ValidFrom value contains data component that does not equal to data component of <emphasis role="italic">validFromDateTime2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileList</emphasis>[0].ValidTo value contains data component that does not equal to data component of <emphasis role="italic">validToDateTime2</emphasis>, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Go to the step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialAccessProfileList</emphasis>[0] item does not have equal field values to values from step <xref linkend="tc.CREDENTIAL-6-1-3.15"/>, FAIL the test and go step <xref linkend="tc.CREDENTIAL-6-1-3.26"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-3.26">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-6-1-3.8"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was access profile created at step <xref linkend="tc.CREDENTIAL-6-1-3.6"/>, ONVIF Client deletes it (in <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteAccessProfile"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">SetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
      <!--CREDENTIAL-6-1-4-->
      <section xml:id="tc.CREDENTIAL-6-1-4">
        <title>DELETE CREDENTIAL ACCESS PROFILES</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-6-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialAccessProfile (ONVIF Credential Service Specification), DeleteCredentialAccessProfiles command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteCredentialAccessProfiles
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl, accessrules.wsdl, and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Delete Credential Access Profiles.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Access Rules Service is received from the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profile (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">accessProfileToken</emphasis> := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-4.5">
              <para>
                If <emphasis role="italic">accessProfileCompleteList</emphasis> is empty, ONVIF Client creates access profile (out <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateAccessProfile"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-4.7">
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList1</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential (out <emphasis role="italic">credentialToken</emphasis>) with Antipassback Violation State equal to false (in false) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.AccessProfileToken := <emphasis role="italic">accessProfileToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidFrom skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidTo skipped
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">SetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Configuration/Credential/Changed"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      AccessProfileToken := <emphasis role="italic">accessProfileToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">DeleteCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-4.15">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Configuration/Credential/Changed", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-4.20"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-4.20"/>.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null and contains Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, go to the step <xref linkend="tc.CREDENTIAL-6-1-4.17"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">oprationDelay</emphasis> timeout expires for step <xref linkend="tc.CREDENTIAL-6-1-4.15"/> without Notification with CredentialToken source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-6-1-4.20"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-4.17">
              <para>
                ONVIF client invokes <emphasis role="bold">GetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialAccessProfile list =: <emphasis role="italic">credentialAccessProfileList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialAccessProfileList</emphasis> contains at least one credential access profile item, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-6-1-4.20"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-4.20">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-6-1-4.7"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was access profile created at step <xref linkend="tc.CREDENTIAL-6-1-4.5"/>, ONVIF Client deletes it (in <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteAccessProfile"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">SetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetCredentialAccessProfilesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-6-1-5-->
      <section xml:id="tc.CREDENTIAL-6-1-5">
        <title>GET CREDENTIAL ACCESS PROFILES WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-6-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetCredentialAccessProfiles command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentialAccessProfiles
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Credential Access Profiles with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="italic">GetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-6-1-6-->
      <section xml:id="tc.CREDENTIAL-6-1-6">
        <title>SET CREDENTIAL ACCESS PROFILES WITH INVALID CREDENTIAL TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-6-1-6
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> SetCredentialAccessProfiles command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> SetCredentialAccessProfiles
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Set Credential Access Profiles with invalid credential token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Access Rules Service is received from the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profiles (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">accessProfileCompleteList</emphasis> is not empty:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">accessProfileToken</emphasis> := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Go to the step <xref linkend="tc.CREDENTIAL-6-1-6.6"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-6.5">
              <para>
                ONVIF Client creates access profile (out <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateAccessProfile"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-6.6">
              <para>
                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">SetCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.<emphasis role="italic">AccessProfileToken</emphasis> := <emphasis role="italic">accessProfileToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidFrom skipped.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Credential.CredentialAccessProfile.ValidTo skipped.
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was access profile created at step <xref linkend="tc.CREDENTIAL-6-1-6.5"/>, ONVIF Client deletes it (in <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteAccessProfile"/> to restore DUT configuration.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
      <!--CREDENTIAL-6-1-7-->
      <section xml:id="tc.CREDENTIAL-6-1-7">
        <title>DELETE CREDENTIAL ACCESS PROFILES WITH INVALID CREDENTIAL TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-6-1-7
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> DeleteCredentialAccessProfiles command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteCredentialAccessProfiles
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Delete Credential Access Profiles with invalid credential token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Access Rules Service is received from the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profiles (out <emphasis role="italic">accessProfileCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfilesList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">accessProfileCompleteList</emphasis> is not empty:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      Set the following:
                      <itemizedlist>
                        <listitem>
                          <para>
                            <emphasis role="italic">accessProfileToken</emphasis> := <emphasis role="italic">accessProfileCompleteList</emphasis>[0].token
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Go to the step <xref linkend="tc.CREDENTIAL-6-1-7.6"/>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-7.5">
              <para>
                ONVIF Client creates access profile (out <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCreateAccessProfile"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-6-1-7.6">
              <para>
                ONVIF Client retrieves a complete list of credential info (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
                <itemizedlist>
                  <listitem>
                    <para>
                      <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteCredentialAccessProfiles</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      CredentialToken := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      AccessProfileToken[0] := <emphasis role="italic">accessProfileToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was access profile created at step <xref linkend="tc.CREDENTIAL-6-1-7.5"/>, ONVIF Client deletes it (in <emphasis role="italic">accessProfileToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteAccessProfile"/> to restore DUT configuration.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
    </section>
    <!--Reset Antipassback Violations-->
    <section xml:id="tc.credential.reset_antipassback_violations"
             xreflabel="Section 4.7">
      <title>Reset Antipassback Violations</title>
      <!--CREDENTIAL-7-1-1-->
      <section xml:id="tc.CREDENTIAL-7-1-1">
        <title>RESET ANTIPASSBACK VIOLATIONS</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-7-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> CredentialAccessProfile (ONVIF Credential Service Specification), ResetAntipassbackViolation command (ONVIF Credential Service Specification).
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> ResetAntipassbackViolation command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify resetting of antipassback violations and generating of appropriate notifications.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Event Service is received from the DUT. Device supports Pull-Point Notification feature. Reset Antipassback Violations is supported by the DUT as indicated by the Capabilities.ResetAntipassbackSupported capability. The DUT shall have enough free storage capacity for one additional Credential.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-7-1-1.4">
              <para>
                If <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported is equal to false, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client checks free storage for additional Credential (in <emphasis role="italic">credentialCompleteList1</emphasis>, out <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperCheckFreeStorageForCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client creates credential (out <emphasis role="italic">credentialToken</emphasis>) with Antipassback Violation State equal to true (in true) by following the procedure mentioned in <xref linkend="Annex_HelperCreateCredential"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client retrieves credential state (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialState</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialState"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis> does not contain AntipassbackState element, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis>.AntipassbackState.AntipassbackViolated equal to false, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Filter.TopicExpression := "tns1:Credential/State/ApbViolation"
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      SubscriptionReference =: <emphasis role="italic">s</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      CurrentTime =: <emphasis role="italic">ct</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TerminationTime =: <emphasis role="italic">tt</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">ResetAntipassbackViolation</emphasis> with parameter
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">credentialToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with empty <emphasis role="bold">ResetAntipassbackViolationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-7-1-1.15">
              <para>
                Until <emphasis role="italic">oprationDelay</emphasis> timeout expires, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Timeout := PT60S
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            MessageLimit := 1
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            CurrentTime =: <emphasis role="italic">ct</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            TerminationTime =: <emphasis role="italic">tt</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            NotificationMessage =: <emphasis role="italic">m</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">m</emphasis> is not null:
                      <orderedlist numeration="arabic"
                                   inheritnum="inherit">
                        <?dbfo label-width="3.5em"?>
                        <listitem>
                          <para>
                            If the TopicExpression item in <emphasis role="italic">m</emphasis> is not equal to "tns1:Credential/State/ApbViolation", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Source.SimpleItem item with Name = "CredentialToken" and Value = <emphasis role="italic">credentialToken</emphasis>, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
                            <orderedlist numeration="arabic"
                                         inheritnum="inherit">
                              <?dbfo label-width="4.5em"?>
                              <listitem>
                                <para>
                                  If <emphasis role="italic">m</emphasis> does not contain Data.SimpleItem item with Name = "ApbViolated" and Value = false, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
                                </para>
                              </listitem>
                            </orderedlist>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis> does not contain Data.SimpleItem item with Name = "ClientUpdated", FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            If <emphasis role="italic">m</emphasis>.Message.Message.Data.SimpleItem.ClientUpdated has value type different from xs:boolean type, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Go to step <xref linkend="tc.CREDENTIAL-7-1-1.17"/>.
                          </para>
                        </listitem>
                      </orderedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If oprationDelay timeout expires for step <xref linkend="tc.CREDENTIAL-7-1-1.15"/> without Notification with Source.SimpleItem item with Name = "CredentialToken" and Value = credentialToken and Data.SimpleItem item with Name = "ApbViolated" and Value = false, FAIL the test and go to the step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-7-1-1.17">
              <para>
                ONVIF client retrieves credential state (in <emphasis role="italic">credentialToken</emphasis>, out <emphasis role="italic">credentialState</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialState"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis> does not contain AntipassbackState element, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">credentialState</emphasis>.AntipassbackState.AntipassbackViolated equal to true, FAIL the test and go to step <xref linkend="tc.CREDENTIAL-7-1-1.20"/>.
              </para>
            </listitem>
            <listitem xml:id="tc.CREDENTIAL-7-1-1.20">
              <para>
                ONVIF Client deletes the Credential (in <emphasis role="italic">credentialToken</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                If there was credential deleted at step <xref linkend="tc.CREDENTIAL-7-1-1.4"/>, restore it (in <emphasis role="italic">credentialToRestore</emphasis>, <emphasis role="italic">stateToRestore</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperRestoreCredential"/> to restore DUT configuration.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">ResetAntipassbackViolationResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.

              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> <emphasis role="italic">oprationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
        </para>
      </section>
      <!--CREDENTIAL-7-1-2-->
      <section xml:id="tc.CREDENTIAL-7-1-2">
        <title>RESET ANTIPASSBACK VIOLATIONS WITH INVALID TOKEN</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-7-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> ResetAntipassbackViolation command (ONVIF Credential Service Specification).
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> ResetAntipassbackViolation command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Reset Antipassback Violations with invalid token.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Reset Antipassback Violations is supported by the DUT as indicated by the Capabilities.ResetAntipassbackSupported capability.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete credential information list (out <emphasis role="italic">credentialInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                Set the following:
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="italic">invalidToken</emphasis> := value not equal to any <emphasis role="italic">credentialInfoCompleteList</emphasis>.token
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">ResetAntipassbackViolation</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Token := <emphasis role="italic">invalidToken</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT returns <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault.

              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">env:Sender\ter:InvalidArgVal\ter:NotFound</emphasis> SOAP 1.2 fault
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">Note:</emphasis> If the DUT sends other SOAP 1.2 fault message than specified, log WARNING message, and PASS the test.
        </para>
      </section>
    </section>
    <!--Credential Events-->
    <section xml:id="tc.credential.credential_events"
             xreflabel="Section 4.8">
      <title>Credential Events</title>
      <!--CREDENTIAL-8-1-2-->
      <section xml:id="tc.CREDENTIAL-8-1-2">
        <title>CONFIGURATION CREDENTIAL CHANGED EVENT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-8-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Notification topics (ONVIF Credential Service Specification), Get event properties (ONVIF Core specification).
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetEventProperties
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify tns1:Configuration/Credential/Changed event format.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is supported by the DUT. Credential Entity is supported by the DUT. Event Service is supported by the DUT. 
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEventProperties</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetEventPropertiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      TopicNamespaceLocation list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      FixedTopicSet
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TopicSet =: <emphasis role="italic">topicSet</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TopicExpressionDialect list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MessageContentFilterDialect list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MessageContentSchemaLocation list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">topicSet</emphasis> does not contain tns1:Configuration/Credential/Changed topic, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client verifies tns1:Configuration/Credential/Changed topic (<emphasis role="italic">changedTopic</emphasis>) from <emphasis role="italic">topicSet</emphasis>:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">changedTopic</emphasis>.MessageDescription.IsProperty equals to true, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">changedTopic</emphasis> does not contain MessageDescription.Source.SimpleItemDescription item with Name = "CredentialToken", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">changedTopic</emphasis>.MessageDescription.Source.SimpleItemDescription with Name = "CredentialToken" does not have Type = "pt:ReferenceToken", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetEventPropertiesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>

      </section>
      <!--CREDENTIAL-8-1-3-->
      <section xml:id="tc.CREDENTIAL-8-1-3">
        <title>CONFIGURATION CREDENTIAL REMOVED EVENT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-8-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Notification topics (ONVIF Credential Service Specification), Get event properties (ONVIF Core specification).
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetEventProperties
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify tns1:Configuration/Credential/Removed event format.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is supported by the DUT. Credential Entity is supported by the DUT. Event Service is supported by the DUT. 

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEventProperties</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetEventPropertiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      TopicNamespaceLocation list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      FixedTopicSet
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TopicSet =: <emphasis role="italic">topicSet</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TopicExpressionDialect list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MessageContentFilterDialect list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MessageContentSchemaLocation list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">topicSet</emphasis> does not contain tns1:Configuration/Credential/Removed topic, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client verifies tns1:Configuration/Credential/Removed topic (<emphasis role="italic">removedTopic</emphasis>) from <emphasis role="italic">topicSet</emphasis>:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">removedTopic</emphasis>.MessageDescription.IsProperty equals to true, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">removedTopic</emphasis> does not contain MessageDescription.Source.SimpleItemDescription item with Name = "CredentialToken", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">removedTopic</emphasis>.MessageDescription.Source.SimpleItemDescription with Name = "CredentialToken" does not have Type = "pt:ReferenceToken", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetEventPropertiesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-8-1-4-->
      <section xml:id="tc.CREDENTIAL-8-1-4">
        <title>CREDENTIAL STATE ENABLED EVENT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-8-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Notification topics (ONVIF Credential Service Specification), Get event properties (ONVIF Core specification).
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetEventProperties
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify tns1:Credential/State/Enabled event format.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is supported by the DUT. Credential Entity is supported by the DUT. Event Service is supported by the DUT. 

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEventProperties</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetEventPropertiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      TopicNamespaceLocation list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      FixedTopicSet
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TopicSet =: <emphasis role="italic">topicSet</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TopicExpressionDialect list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MessageContentFilterDialect list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MessageContentSchemaLocation list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">topicSet</emphasis> does not contain tns1:Credential/State/Enabled topic, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client verifies tns1:Credential/State/Enabled topic (<emphasis role="italic">StateEnabledTopic</emphasis>) from <emphasis role="italic">topicSet</emphasis>:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis>.MessageDescription.IsProperty equals true, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis> does not contain MessageDescription.Source.SimpleItemDescription item with Name = "CredentialToken", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis>.MessageDescription.Source.SimpleItemDescription with Name = "CredentialToken" does not have Type = "pt:ReferenceToken", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis> does not contain MessageDescription.Data.SimpleItemDescription item with Name = "State", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis>.MessageDescription.Data.SimpleItemDescription with Name = "State" does not have Type = "xs:boolean", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis> does not contain MessageDescription.Data.SimpleItemDescription item with Name = "Reason", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis>.MessageDescription.Data.SimpleItemDescription with Name = "Reason" does not have Type = "xs:string", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis> does not contain Data.SimpleItemDescription with Name = "ClientUpdated", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">StateEnabledTopic</emphasis>.Message.Message.Data.SimpleItemDescription with Name = "ClientUpdated" does not have Type = "xs:boolean", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetEventPropertiesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-8-1-5-->
      <section xml:id="tc.CREDENTIAL-8-1-5">
        <title>CREDENTIAL STATE ANTIPASSBACK VIOLATION EVENT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-8-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Notification topics (ONVIF Credential Service Specification), Get event properties (ONVIF Core specification).
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetEventProperties
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and event.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify tns1:Credential/State/ApbViolation event format.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is supported by the DUT. Credential Entity is supported by the DUT. Event Service is supported by the DUT. ResetAntipassbackViolation capability is supported by the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client invokes <emphasis role="bold">GetEventProperties</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with a <emphasis role="bold">GetEventPropertiesResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      TopicNamespaceLocation list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      FixedTopicSet
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TopicSet =: <emphasis role="italic">topicSet</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      TopicExpressionDialect list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MessageContentFilterDialect list
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      MessageContentSchemaLocation list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">topicSet</emphasis> does not contain tns1:Credential/State/ApbViolation topic, FAIL the test and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client verifies tns1:Credential/State/ApbViolation topic (<emphasis role="italic">ApbViolationTopic</emphasis>) from <emphasis role="italic">topicSet</emphasis>:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">ApbViolationTopic</emphasis>.MessageDescription.IsProperty equal to true, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">ApbViolationTopic</emphasis> does not contain MessageDescription.Source.SimpleItemDescription item with Name = "CredentialToken", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">ApbViolationTopic</emphasis>.MessageDescription.Source.SimpleItemDescription with Name = "CredentialToken" does not have Type = "pt:ReferenceToken", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">ApbViolationTopic</emphasis> does not contain MessageDescription.Data.SimpleItemDescription item with Name = "ApbViolation", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">ApbViolationTopic</emphasis>.MessageDescription.Data.SimpleItemDescription with Name = "ApbViolation" does not have Type = "xs:boolean", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">ApbViolationTopic</emphasis> does not contain Data.SimpleItemDescription with Name = "ClientUpdated", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">ApbViolationTopic</emphasis>.Message.Message.Data.SimpleItemDescription with Name = "ClientUpdated" does not have Type = "xs:boolean", FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT did not send <emphasis role="bold">GetEventPropertiesResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <!--Consistency-->
    <section xml:id="tc.credential.consistency"
             xreflabel="Section 4.9">
      <title>Consistency</title>
      <!--CREDENTIAL-9-1-1-->
      <section xml:id="tc.CREDENTIAL-9-1-1">
        <title>GET CREDENTIAL AND GET ACCESS PROFILE INFO LIST CONSISTENCY</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-9-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> Credential (ONVIF Credential Service Specification), AccessProfileInfo (ONVIF Access Rules Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetCredentials, GetAccessProfileInfo
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl and accessrules.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify that all Access Profile Tokens from GetCredentialResponses could be listed through GetAccessProfileInfoList command.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Credential Entity is supported by the DUT. Access Rules Service is received from the DUT.

        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Procedure:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of credentials (out <emphasis role="italic">credentialCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete list of access profile info (out <emphasis role="italic">accessProfileInfoCompleteList</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetAccessProfileInfoList"/>.
              </para>
            </listitem>
            <listitem>
              <para>
                For each Credential.CredentialAccessProfile.AccessProfileToken (<emphasis role="italic">credentialAccessProfileToken</emphasis>) from <emphasis role="italic">credentialCompleteList</emphasis> repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      If <emphasis role="italic">credentialAccessProfileToken</emphasis> is not listed in <emphasis role="italic">accessProfileInfoCompleteList</emphasis>, FAIL the test and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                DUT passes all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <!--Whitelist Management-->
    <section xml:id="tc.credential.whitelist_management"
             xreflabel="Section 4.10">
      <title>Whitelist Management</title>
      <!--CREDENTIAL-10-1-1-->
      <section xml:id="tc.CREDENTIAL-10-1-1">
        <title>GET WHITELIST - START REFERENCE AND LIMIT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-10-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetWhitelist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetWhitelist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Whitelist using StartReference and Limit.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds number of credential identifiers to whitelist by following the procedure mentioned in <xref linkend="Annex_HelperAddCredentialIdentifiersToWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - list of added credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">completeWhitelist</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList0</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList0</emphasis> contains more Identifier items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">identifierPart</emphasis> contains more Identifier items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList0</emphasis> := <emphasis role="italic">identifierCompleteList0</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList0</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>

            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains more Identifier items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">identifierPart</emphasis> contains more Identifier items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList1</emphasis> := <emphasis role="italic">identifierCompleteList1</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> does not contain all Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains Identifiers other than Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>

            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 1, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>Limit := 1</para>
                  </listitem>
                  <listitem>
                    <para>StartReference skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains more Identifier items than 1, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>Limit := 1</para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">identifierListPart</emphasis> contains more Identifier items than 1, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList2</emphasis> := <emphasis role="italic">identifierCompleteList2</emphasis> + <emphasis role="italic">identifierListPart</emphasis>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> does not contain all Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains Identifiers other than Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 2, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">limit</emphasis> := [number between 1 and <emphasis role="italic">cap</emphasis>.MaxLimit].
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">limit</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains more Identifier items than <emphasis role="italic">limit</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := <emphasis role="italic">limit</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">identifierListPart</emphasis> contains more Identifier items than <emphasis role="italic">limit</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList3</emphasis> := <emphasis role="italic">identifierCompleteList3</emphasis> + <emphasis role="italic">identifierListPart</emphasis>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least two equal Identifiers, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis>does not contain all Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains Identifiers other than Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Remove all credential identifiers from <emphasis role="italic">credentialIdentifiersList</emphasis> from whitelist.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetWhitelistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-10-1-2-->
      <section xml:id="tc.CREDENTIAL-10-1-2">
        <title>GET WHITELIST - FILTERS</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-10-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetWhitelist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetWhitelist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Whitelist using filters.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds number of credential identifiers to whitelist by following the procedure mentioned in <xref linkend="Annex_HelperAddCredentialIdentifiersToWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - list of added credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">completeWhitelist</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">identifier</emphasis> := <emphasis role="italic">completeWhitelist</emphasis>[0].
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>
                      IdentifierType := <emphasis role="italic">identifier</emphasis>.Type.Name
                    </para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList0</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            IdentifierType := <emphasis role="italic">identifier</emphasis>.Type.Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList0</emphasis> := <emphasis role="italic">identifierCompleteList0</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList0</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList0</emphasis> contains at least one item with Type.Name other than <emphasis role="italic">identifier</emphasis>.Type.Name, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>
                      FormatType := <emphasis role="italic">identifier</emphasis>.Type.FormatType
                    </para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>
                            FormatType := <emphasis role="italic">identifier</emphasis>.Type.FormatType
                          </para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList1</emphasis> := <emphasis role="italic">identifierCompleteList1</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains at least one item with Type.FormatType other than <emphasis role="italic">identifier</emphasis>.Type.FormatType, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>
                      Value := <emphasis role="italic">identifier</emphasis>.Value
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>
                            Value := <emphasis role="italic">identifier</emphasis>.Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList2</emphasis> := <emphasis role="italic">identifierCompleteList2</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains at least one item with Value other than <emphasis role="italic">identifier</emphasis>.Value, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>
                      IdentifierType := <emphasis role="italic">identifier</emphasis>.Type.Name
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      FormatType := <emphasis role="italic">identifier</emphasis>.Type.FormatType
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Value := <emphasis role="italic">identifier</emphasis>.Value
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            IdentifierType := <emphasis role="italic">identifier</emphasis>.Type.Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            FormatType := <emphasis role="italic">identifier</emphasis>.Type.FormatType
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value := <emphasis role="italic">identifier</emphasis>.Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList3</emphasis> := <emphasis role="italic">identifierCompleteList3</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least one item with Type.Name other than <emphasis role="italic">identifier</emphasis>.Type.Name, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least one item with Type.FormatType other than <emphasis role="italic">identifier</emphasis>.Type.FormatType, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least one item with Value other than <emphasis role="italic">identifier</emphasis>.Value, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Remove all credential identifiers from <emphasis role="italic">credentialIdentifiersList</emphasis> from whitelist.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetWhitelistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-10-1-3-->
      <section xml:id="tc.CREDENTIAL-10-1-3">
        <title>ADD IDENTIFIER TO WHITELIST</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-10-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> AddToWhitelist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> AddToWhitelist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify adding identifier to whitelist.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT.
          Whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability.
          The DUT shall have enough free storage capacity for two additional items in whitelist.
          The DUT shall have enough free storage capacity for two additional items in blacklist, if blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialWhiteList</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client generates list of credential identifiers by following the procedure mentioned in <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialWhiteList</emphasis> - initial list of credential identifiers (to prevent creation of duplications)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in min{2; <emphasis role="italic">cap</emphasis>.MaxWhitelistedItems; <emphasis role="italic">cap</emphasis>.MaxLimit} - requiered number of credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxBlacklistedItems > 0:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client adds credential identifiers to blacklist by following the procedure mentioned in <xref linkend="Annex_HelperAddToBlacklist"/> with the following input and output parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            in <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifier list to be added to blacklist
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">AddToWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">AddToWhitelistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">updatedWhiteList</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedWhiteList</emphasis> does not contain all items from <emphasis role="italic">initialWhiteList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedWhiteList</emphasis> does not contain all items from <emphasis role="italic">credentialIdentifiersList</emphasis> item, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxBlacklistedItems > 0:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            out <emphasis role="italic">updatedBlackList</emphasis> - complete blacklist
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">updatedBlackList</emphasis> contains any item from <emphasis role="italic">credentialIdentifiersList</emphasis> item, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">AddToWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">AddToWhitelistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">updatedWhiteList2</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedWhiteList2</emphasis> contains more items that <emphasis role="italic">updatedWhiteList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Remove all items from <emphasis role="italic">credentialIdentifiersList</emphasis> from whitelist.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">AddToWhitelistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-10-1-4-->
      <section xml:id="tc.CREDENTIAL-10-1-4">
        <title>REMOVE IDENTIFIER FROM WHITELIST</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-10-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> RemoveFromWhitelist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> RemoveFromWhitelist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify removing identifier to whitelist.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT.
          Whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability.
          The DUT shall have enough free storage capacity for two additional items in whitelist.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialWhiteList</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client generates list of credential identifiers by following the procedure mentioned in <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialWhiteList</emphasis> - initial list of credential identifiers (to prevent creation of duplications)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in min{2; <emphasis role="italic">cap</emphasis>.MaxWhitelistedItems; <emphasis role="italic">cap</emphasis>.MaxLimit} - requiered number of credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds credential identifiers to whitelist by following the procedure mentioned in <xref linkend="Annex_HelperAddToWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers to be added to whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">RemoveFromWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">RemoveFromWhitelistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">updatedWhiteList</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedWhiteList</emphasis> does not contain all items from <emphasis role="italic">initialWhiteList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedWhiteList</emphasis> contains any item from <emphasis role="italic">credentialIdentifiersList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">RemoveFromWhitelist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">RemoveFromWhitelistResponse</emphasis> message.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">RemoveFromWhitelistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-10-1-5-->
      <section xml:id="tc.CREDENTIAL-10-1-5">
        <title>DELETE WHITELIST</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-10-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> DeleteWhitelist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteWhitelist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify deleting whitelist.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT.
          Whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability.
          The DUT shall have enough free storage capacity for two additional items in whitelist.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialWhiteList</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client generates list of credential identifiers by following the procedure mentioned in <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialWhiteList</emphasis> - initial list of credential identifiers (to prevent creation of duplications)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in min{2; <emphasis role="italic">cap</emphasis>.MaxWhitelistedItems; <emphasis role="italic">cap</emphasis>.MaxLimit} - requiered number of credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds credential identifiers to whitelist by following the procedure mentioned in <xref linkend="Annex_HelperAddToWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers to be added to whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteWhitelist</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">DeleteWhitelistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">updatedWhiteList</emphasis> - complete whitelist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedWhiteList</emphasis> contains any items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteWhitelist</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">DeleteWhitelistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                Client restores all items from <emphasis role="italic">initialWhiteList</emphasis>.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">DeleteWhitelistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
    <!--Blacklist Management-->
    <section xml:id="tc.credential.blacklist_management"
             xreflabel="Section 4.10">
      <title>Blacklist Management</title>
      <!--CREDENTIAL-11-1-1-->
      <section xml:id="tc.CREDENTIAL-11-1-1">
        <title>GET BLACKLIST - START REFERENCE AND LIMIT</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-11-1-1
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetBlacklist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetBlacklist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Blacklist using StartReference and Limit.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds number of credential identifiers to blacklist by following the procedure mentioned in <xref linkend="Annex_HelperAddCredentialIdentifiersToBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - list of added credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">completeBlacklist</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList0</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList0</emphasis> contains more Identifier items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">identifierPart</emphasis> contains more Identifier items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList0</emphasis> := <emphasis role="italic">identifierCompleteList0</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList0</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>

            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains more Identifier items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := <emphasis role="italic">cap</emphasis>.MaxLimit
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">identifierPart</emphasis> contains more Identifier items than <emphasis role="italic">cap</emphasis>.MaxLimit, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList1</emphasis> := <emphasis role="italic">identifierCompleteList1</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> does not contain all Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains Identifiers other than Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>

            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 1, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>Limit := 1</para>
                  </listitem>
                  <listitem>
                    <para>StartReference skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains more Identifier items than 1, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>Limit := 1</para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">identifierListPart</emphasis> contains more Identifier items than 1, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList2</emphasis> := <emphasis role="italic">identifierCompleteList2</emphasis> + <emphasis role="italic">identifierListPart</emphasis>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> does not contain all Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains Identifiers other than Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxLimit is equal to 2, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">limit</emphasis> := [number between 1 and <emphasis role="italic">cap</emphasis>.MaxLimit].
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit := <emphasis role="italic">limit</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains more Identifier items than <emphasis role="italic">limit</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit := <emphasis role="italic">limit</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierListPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">identifierListPart</emphasis> contains more Identifier items than <emphasis role="italic">limit</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList3</emphasis> := <emphasis role="italic">identifierCompleteList3</emphasis> + <emphasis role="italic">identifierListPart</emphasis>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least two equal Identifiers, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis>does not contain all Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains Identifiers other than Identifiers from <emphasis role="italic">identifierCompleteList0</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Remove all credential identifiers from <emphasis role="italic">credentialIdentifiersList</emphasis> from blacklist.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetBlacklistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-11-1-2-->
      <section xml:id="tc.CREDENTIAL-11-1-2">
        <title>GET BLACKLIST - FILTERS</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-11-1-2
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> GetBlacklist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> GetBlacklist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify Get Blacklist using filters.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT. Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds number of credential identifiers to blacklist by following the procedure mentioned in <xref linkend="Annex_HelperAddCredentialIdentifiersToBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - list of added credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">completeBlacklist</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Set <emphasis role="italic">identifier</emphasis> := <emphasis role="italic">completeBlacklist</emphasis>[0].
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>
                      IdentifierType := <emphasis role="italic">identifier</emphasis>.Type.Name
                    </para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList0</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            IdentifierType := <emphasis role="italic">identifier</emphasis>.Type.Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList0</emphasis> := <emphasis role="italic">identifierCompleteList0</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList0</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList0</emphasis> contains at least one item with Type.Name other than <emphasis role="italic">identifier</emphasis>.Type.Name, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>
                      FormatType := <emphasis role="italic">identifier</emphasis>.Type.FormatType
                    </para>
                  </listitem>
                  <listitem>
                    <para>Value is skipped</para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList1</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>
                            FormatType := <emphasis role="italic">identifier</emphasis>.Type.FormatType
                          </para>
                        </listitem>
                        <listitem>
                          <para>Value is skipped</para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList1</emphasis> := <emphasis role="italic">identifierCompleteList1</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList1</emphasis> contains at least one item with Type.FormatType other than <emphasis role="italic">identifier</emphasis>.Type.FormatType, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>IdentifierType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>FormatType is skipped</para>
                  </listitem>
                  <listitem>
                    <para>
                      Value := <emphasis role="italic">identifier</emphasis>.Value
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList2</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>IdentifierType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>FormatType is skipped</para>
                        </listitem>
                        <listitem>
                          <para>
                            Value := <emphasis role="italic">identifier</emphasis>.Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList2</emphasis> := <emphasis role="italic">identifierCompleteList2</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList2</emphasis> contains at least one item with Value other than <emphasis role="italic">identifier</emphasis>.Value, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Limit is skipped
                    </para>
                  </listitem>
                  <listitem>
                    <para>StartReference is skipped</para>
                  </listitem>
                  <listitem>
                    <para>
                      IdentifierType := <emphasis role="italic">identifier</emphasis>.Type.Name
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      FormatType := <emphasis role="italic">identifier</emphasis>.Type.FormatType
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Value := <emphasis role="italic">identifier</emphasis>.Value
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Identifier list =: <emphasis role="italic">identifierCompleteList3</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            Limit is skipped
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            StartReference := <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            IdentifierType := <emphasis role="italic">identifier</emphasis>.Type.Name
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            FormatType := <emphasis role="italic">identifier</emphasis>.Type.FormatType
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Value := <emphasis role="italic">identifier</emphasis>.Value
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                          </para>
                        </listitem>
                        <listitem>
                          <para>
                            Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Set <emphasis role="italic">identifierCompleteList3</emphasis> := <emphasis role="italic">identifierCompleteList3</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least two equal Identifier items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least one item with Type.Name other than <emphasis role="italic">identifier</emphasis>.Type.Name, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least one item with Type.FormatType other than <emphasis role="italic">identifier</emphasis>.Type.FormatType, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">identifierCompleteList3</emphasis> contains at least one item with Value other than <emphasis role="italic">identifier</emphasis>.Value, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Remove all credential identifiers from <emphasis role="italic">credentialIdentifiersList</emphasis> from blacklist.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">GetBlacklistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-11-1-3-->
      <section xml:id="tc.CREDENTIAL-11-1-3">
        <title>ADD IDENTIFIER TO BLACKLIST</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-11-1-3
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> AddToBlacklist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> AddToBlacklist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify adding identifier to blacklist.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT.
          Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability.
          The DUT shall have enough free storage capacity for two additional items in blacklist.
          The DUT shall have enough free storage capacity for two additional items in whitelist, if whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialBlackList</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client generates list of credential identifiers by following the procedure mentioned in <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialWhiteList</emphasis> - initial list of credential identifiers (to prevent creation of duplications)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in min{2; <emphasis role="italic">cap</emphasis>.MaxBlacklistedItems; <emphasis role="italic">cap</emphasis>.MaxLimit} - requiered number of credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxWhitelistedItems > 0:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client adds credential identifiers to whitelist by following the procedure mentioned in <xref linkend="Annex_HelperAddToWhitelist"/> with the following input and output parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            in <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers to be added to whitelist
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">AddToBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">AddToBlacklistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">updatedBlackList</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedBlackList</emphasis> does not contain all items from <emphasis role="italic">initialBlackList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedBlackList</emphasis> does not contain all items from <emphasis role="italic">credentialIdentifiersList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">cap</emphasis>.MaxWhitelistedItems > 0:
                <orderedlist numeration="arabic"
                             inheritnum="inherit">
                  <?dbfo label-width="2.5em"?>
                  <listitem>
                    <para>
                      ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
                      <itemizedlist>
                        <listitem>
                          <para>
                            out <emphasis role="italic">updatedWhiteList</emphasis> - complete whitelist
                          </para>
                        </listitem>
                      </itemizedlist>
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      If <emphasis role="italic">updatedWhiteList</emphasis> contains any item from <emphasis role="italic">credentialIdentifiersList</emphasis> item, FAIL the test, restore the DUT state, and skip other steps.
                    </para>
                  </listitem>
                </orderedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">AddToBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">AddToBlacklistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">updatedBlackList2</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedBlackList2</emphasis> contains more items that <emphasis role="italic">updatedBlackList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                Remove all items from <emphasis role="italic">credentialIdentifiersList</emphasis> from blacklist.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">AddToBlacklistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-11-1-4-->
      <section xml:id="tc.CREDENTIAL-11-1-4">
        <title>REMOVE IDENTIFIER FROM BLACKLIST</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-11-1-4
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> RemoveFromBlacklist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> RemoveFromBlacklist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify removing identifier to blacklist.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT.
          Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability.
          The DUT shall have enough free storage capacity for two additional items in blacklist.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialBlackList</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client generates list of credential identifiers by following the procedure mentioned in <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialWhiteList</emphasis> - initial list of credential identifiers (to prevent creation of duplications)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in min{2; <emphasis role="italic">cap</emphasis>.MaxBlacklistedItems; <emphasis role="italic">cap</emphasis>.MaxLimit} - requiered number of credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds credential identifiers to blacklist by following the procedure mentioned in <xref linkend="Annex_HelperAddToBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers to be added to blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">RemoveFromBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">RemoveFromBlacklistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">updatedBlackList</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedBlackList</emphasis> does not contain all items from <emphasis role="italic">initialBlackList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedBlackList</emphasis> contains all items from <emphasis role="italic">credentialIdentifiersList</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">RemoveFromBlacklist</emphasis> with parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">RemoveFromBlacklistResponse</emphasis> message.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">RemoveFromBlacklistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      <!--CREDENTIAL-11-1-5-->
      <section xml:id="tc.CREDENTIAL-11-1-5">
        <title>DELETE BLACKLIST</title>
        <para>
          <emphasis role="bold">Test Case ID:</emphasis> CREDENTIAL-11-1-5
        </para>
        <para>
          <emphasis role="bold">Specification Coverage:</emphasis> DeleteBlacklist command (ONVIF Credential Service Specification)
        </para>
        <para>
          <emphasis role="bold">Feature Under Test:</emphasis> DeleteBlacklist
        </para>
        <para>
          <emphasis role="bold">WSDL Reference:</emphasis> credential.wsdl
        </para>
        <para>
          <emphasis role="bold">Test Purpose:</emphasis> To verify deleting blacklist.
        </para>
        <para>
          <emphasis role="bold">Pre-Requisite:</emphasis> Credential Service is received from the DUT.
          Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability.
          The DUT shall have enough free storage capacity for two additional items in blacklist.
        </para>
        <para>
          <emphasis role="bold">Test Configuration:</emphasis> ONVIF Client and DUT
        </para>
        <para>
          <emphasis role="bold">Test Sequence:</emphasis>
        </para>
        <para>
          <orderedlist>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                Start an ONVIF Client.
              </para>
            </listitem>
            <listitem>
              <para>
                Start the DUT.
              </para>
            </listitem>
            <?dbfo label-width="1.5em"?>
            <listitem>
              <para>
                ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">initialBlackList</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client generates list of credential identifiers by following the procedure mentioned in <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in <emphasis role="italic">initialWhiteList</emphasis> - initial list of credential identifiers (to prevent creation of duplications)
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      in min{2; <emphasis role="italic">cap</emphasis>.MaxBlacklistedItems; <emphasis role="italic">cap</emphasis>.MaxLimit} - requiered number of credential identifiers
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      out <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers list
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client adds credential identifiers to blacklist by following the procedure mentioned in <xref linkend="Annex_HelperAddToBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      in <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers to be added to blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteBlacklist</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">DeleteBlacklistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
                <itemizedlist>
                  <listitem>
                    <para>
                      out <emphasis role="italic">updatedBlackList</emphasis> - complete blacklist
                    </para>
                  </listitem>
                </itemizedlist>
              </para>
            </listitem>
            <listitem>
              <para>
                If <emphasis role="italic">updatedBlackList</emphasis> contains any items, FAIL the test, restore the DUT state, and skip other steps.
              </para>
            </listitem>
            <listitem>
              <para>
                ONVIF client invokes <emphasis role="bold">DeleteBlacklist</emphasis>.
              </para>
            </listitem>
            <listitem>
              <para>
                The DUT responds with <emphasis role="bold">DeleteBlacklistResponse</emphasis> message.
              </para>
            </listitem>
            <listitem>
              <para>
                Client restores all items from <emphasis role="italic">initialBlackList</emphasis>.
              </para>
            </listitem>
          </orderedlist>
        </para>
        <para>
          <emphasis role="bold">Test Result:</emphasis>
        </para>
        <para>
          <emphasis role="bold">PASS –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT passed all assertions.
              </para>
            </listitem>
          </itemizedlist>
        </para>
        <para>
          <emphasis role="bold">FAIL –</emphasis>
          <itemizedlist>
            <listitem>
              <para>
                The DUT did not send <emphasis role="bold">DeleteBlacklistResponse</emphasis> message.
              </para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
    </section>
  </chapter>
  <appendix>
    <title>Helper Procedures and Additional Notes</title>
    <!--A.1-->
    <section xml:id="Annex_HelperGetCredentialInfoList"
             xreflabel="Annex A.1">
      <title>Get credentials information list</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetCredentialInfoList
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get complete credentials information list.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The complete list of credentials information (<emphasis role="italic">credentialInfoCompleteList</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Limit skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    StartReference skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CredentialInfo list =: <emphasis role="italic">credentialInfoCompleteList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetCredentialInfoList</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Limit skipped
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          StartReference := <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          CredentialInfo list =: <emphasis role="italic">credentialInfoListPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set the following:
                    <itemizedlist>
                      <listitem>
                        <para>
                          <emphasis role="italic">credentialInfoCompleteList</emphasis> := <emphasis role="italic">credentialInfoCompleteList</emphasis> + <emphasis role="italic">credentialInfoListPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetCredentialInfoListResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.2-->
    <section xml:id="Annex_HelperGetServiceCapabilities"
             xreflabel="Annex A.2">
      <title>Get service capabilities</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetServiceCapabilities
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get service capabilities.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The service capabilities (<emphasis role="italic">cap</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetServiceCapabilities</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with a <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Capabilities =: <emphasis role="italic">cap</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetServiceCapabilitiesResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.3-->
    <section xml:id="Annex_HelperGetCredentialList"
             xreflabel="Annex A.3">
      <title>Get credentials list</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetCredentialList
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get complete credentials list with.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The complete list of credentials (<emphasis role="italic">credentialCompleteList</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>

      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Limit skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    StartReference skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential list =: <emphasis role="italic">credentialCompleteList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetCredentialList</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Limit skipped
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          StartReference := <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetCredentialListResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          Credential list =: <emphasis role="italic">credentialListPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set the following:
                    <itemizedlist>
                      <listitem>
                        <para>
                          <emphasis role="italic">credentialCompleteList</emphasis> := <emphasis role="italic">credentialCompleteList</emphasis> + <emphasis role="italic">credentialListPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>

      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetCredentialListResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.4-->
    <section xml:id="Annex_HelperChangeCredentialState"
             xreflabel="Annex A.4">
      <title>Change credential state</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperChangeCredentialState
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to change credential state.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Credential token (<emphasis role="italic">credentialToken</emphasis>), credential state (<emphasis role="italic">credentialState</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              If <emphasis role="italic">credentialState</emphasis>.Enabled equal to <emphasis role="italic">true</emphasis>, do the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">DisableCredential</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Token := <emphasis role="italic">credentialToken</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          Reason := "Test Reason"
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with empty <emphasis role="bold">DisableCredentialResponse</emphasis> message.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">credentialState</emphasis>.Enabled is equal to <emphasis role="italic">false</emphasis>, perform the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">EnableCredential</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Token := <emphasis role="italic">credentialToken</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          Reason := "Test Reason"
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with empty <emphasis role="bold">EnableCredentialResponse</emphasis> message.
                  </para>
                </listitem>
              </orderedlist>

            </para>
          </listitem>

        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">EnableCredentialResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">DisableCredentialResponse</emphasis> message.

            </para>
          </listitem>

        </itemizedlist>
      </para>
    </section>
    <!--A.5-->
    <section xml:id="Annex_HelperGetAccessProfilesList"
             xreflabel="Annex A.5">
      <title>Get access profiles list</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetAccessProfilesList
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get complete access profiles list with.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Access Rules Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The complete list of access profiles (<emphasis role="italic">accessProfileCompleteList</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">GetAccessProfileList</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Limit skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    StartReference skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetAccessProfileListResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    AccessProfile list =: <emphasis role="italic">accessProfileCompleteList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetAccessProfileList</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Limit skipped
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          StartReference := <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetAccessProfileListResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          AccessProfile list =: <emphasis role="italic">accessProfileListPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set the following:
                    <itemizedlist>
                      <listitem>
                        <para>
                          <emphasis role="italic">accessProfileCompleteList</emphasis> := <emphasis role="italic">accessProfileCompleteList</emphasis> + <emphasis role="italic">accessProfileListPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetAccessProfileListResponse</emphasis> message.
            </para>
          </listitem>

        </itemizedlist>
      </para>
    </section>
    <!--A.6-->
    <section xml:id="Annex_HelperDeleteCredential"
             xreflabel="Annex A.6">
      <title>Delete credential</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteCredential
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete credential.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Credential Token (<emphasis role="italic">credentialToken</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteCredential</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token =: <emphasis role="italic">credentialToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">DeleteCredentialResponse</emphasis> message.
            </para>
          </listitem>

        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">DeleteCredentialResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>

    </section>
    <!--A.7-->
    <section xml:id="Annex_HelperCheckFreeStorageForCredential"
             xreflabel="Annex A.7">
      <title>Free storage for additional credential</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCheckFreeStorageForCredential
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to provide possibility to add a credential.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> The complete list of credentials (<emphasis role="italic">credentialCompleteList</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Removed credential (<emphasis role="italic">credentialToRestore</emphasis>) and its state (<emphasis role="italic">stateToRestore</emphasis>) if any.

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF client compares <emphasis role="italic">cap</emphasis>.MaxCredentials with number of items at <emphasis role="italic">credentialCompleteList</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              If number of items of <emphasis role="italic">credentialCompleteList</emphasis> less than cap.MaxCredential, skip other steps.
            </para>
          </listitem>
          <listitem>
            <para>
              If number of items at <emphasis role="italic">credentialCompleteList</emphasis> equal to <emphasis role="italic">cap</emphasis>.MaxCredentials, execute the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetCredentials</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Token list := <emphasis role="italic">credentialCompleteList</emphasis>[0].token
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetCredentialsResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Credential list =: <emphasis role="italic">credentialToRestore</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetCredentialState</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Token[0] := <emphasis role="italic">credentialCompleteList</emphasis>[0].token
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetCredentialStateResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          State =: <emphasis role="italic">stateToRestore</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client deletes the Credential (in <emphasis role="italic">credentialCompleteList</emphasis>[0].token) by following the procedure mentioned in <xref linkend="Annex_HelperDeleteCredential"/>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The number of items at <emphasis role="italic">accessProfileCompleteList</emphasis> more than <emphasis role="italic">cap</emphasis>.MaxAccessProfiles.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetCredentialsResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetCredentialStateResponse</emphasis> message.

            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.8-->
    <section xml:id="Annex_HelperGetCredential"
             xreflabel="Annex A.8">
      <title>Get credential</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetCredential
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get credential.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Credential Token (<emphasis role="italic">credentialToken</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Credential List (<emphasis role="italic">credentialList</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetCredentials</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token[0] := <emphasis role="italic">credentialToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetCredentialsResponse</emphasis> message with parameters:
              <itemizedlist>
                <listitem>
                  <para>
                    Credential list =: <emphasis role="italic">credentialList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetCredentialsResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.9-->
    <section xml:id="Annex_HelperGetCredentialInfo"
             xreflabel="Annex A.9">
      <title>Get credential info</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetCredentialInfo
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get credential info.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Credential Token (<emphasis role="italic">credentialToken</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Credential Info List (<emphasis role="italic">credentialInfoList</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetCredentialInfo</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token[0] := <emphasis role="italic">credentialToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT sends the <emphasis role="bold">GetCredentialInfoResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    CredentialInfo =: <emphasis role="italic">credentialInfoList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetCredentialInfoResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.10-->
    <section xml:id="Annex_HelperRestoreCredential"
             xreflabel="Annex A.10">
      <title>Restore credential</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperRestoreCredential
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to restore credential.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Credential (<emphasis role="italic">credentialToRestore</emphasis>) and its state (<emphasis role="italic">stateToRestore</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              Set:
              <itemizedlist>
                <listitem>
                  <para>
                    <emphasis role="italic">credentialToRestore</emphasis>.token := "";
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Credential := <emphasis role="italic">credentialToRestore</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    State := <emphasis role="italic">stateToRestore</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateCredentialResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token =: <emphasis role="italic">credentialToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>

            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">CreateCredentialResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.11-->
    <section xml:id="Annex_HelperCreateCredential"
             xreflabel="Annex A.11">
      <title>Create credential</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCredential
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create credential.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Credential Service capabilities (<emphasis role="italic">cap</emphasis>) (optional input parameter, could be skipped), Antipassback Violation State (<emphasis role="italic">AntipassbackViolated</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Credential Token (<emphasis role="italic">credentialToken</emphasis>), Credential identifier Type Name (<emphasis role="italic">typeName</emphasis>), Credential identifier Format Type (<emphasis role="italic">formatType</emphasis>), Credential identifier value (<emphasis role="italic">value</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              If cap is skipped, ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client retrieves (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) a supported Credential identifier type name (out <emphasis role="italic">typeName</emphasis>) with Credential identifier Format Type (out <emphasis role="italic">formatType</emphasis>) and with credential identifier value (out <emphasis role="italic">value</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Credential.token := ""
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.Description := "Test Description"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialHolderReference := "TestUser"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.ValidFrom skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.ValidTo skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[0].ExemptedFromAuthentication := false
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialAccessProfile skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.Extension skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    State.Enabled := true
                  </para>
                </listitem>
                <listitem>
                  <para>
                    State.Reason := "Test Reason"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    State.AntipassbackState.AntipassbackViolated := <emphasis role="italic">AntipassbackViolated</emphasis> if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateCredentialResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token =: <emphasis role="italic">credentialToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">CreateCredentialResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.12-->
    <section xml:id="Annex_HelperGetAccessProfileInfoList"
             xreflabel="Annex A.12">
      <title>Get access profiles information list</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetAccessProfileInfoList
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get complete access profiles information list.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Access Rules Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The complete list of access profiles information (<emphasis role="italic">accessProfileInfoCompleteList</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">GetAccessProfileInfoList</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Limit skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    StartReference skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetAccessProfileInfoListResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    AccessProfileInfo list =: <emphasis role="italic">accessProfileInfoCompleteList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetAccessProfileInfoList</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Limit skipped
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          StartReference := <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetAccessProfileInfoListResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          AccessProfileInfo list =: <emphasis role="italic">accessProfileInfoListPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set the following:
                    <itemizedlist>
                      <listitem>
                        <para>
                          <emphasis role="italic">accessProfileInfoCompleteList</emphasis> := <emphasis role="italic">accessProfileInfoCompleteList</emphasis> + <emphasis role="italic">accessProfileInfoListPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetAccessProfileInfoListResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.13-->
    <section xml:id="Annex_HelperGetCredentialState"
             xreflabel="Annex A.13">
      <title>Get credential state</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetCredentialState
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get credential state.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Credential Token (<emphasis role="italic">credentialToken</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Credential State (<emphasis role="italic">credentialState</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">GetCredentialState</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token[0] := <emphasis role="italic">credentialToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetCredentialStateResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    State =: <emphasis role="italic">credentialState</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetCredentialStateResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.14-->
    <section xml:id="Annex_HelperSupportedCredentialIdentifierFormatTypes"
             xreflabel="Annex A.14">
      <title>Supported credential identifier format types</title>
      <para>
        The list of supported credential identifier format types is the following:
        <itemizedlist>
          <listitem>
            <para>
              WIEGAND26
            </para>
          </listitem>
          <listitem>
            <para>
              WIEGAND37
            </para>
          </listitem>
          <listitem>
            <para>
              WIEGAND37_FACILITY
            </para>
          </listitem>
          <listitem>
            <para>
              FACILITY16_CARD32
            </para>
          </listitem>
          <listitem>
            <para>
              FACILITY32_CARD32
            </para>
          </listitem>
          <listitem>
            <para>
              FASC_N
            </para>
          </listitem>
          <listitem>
            <para>
              FASC_N_BCD
            </para>
          </listitem>
          <listitem>
            <para>
              FASC_N_LARGE
            </para>
          </listitem>
          <listitem>
            <para>
              FASC_N_LARGE_BCD
            </para>
          </listitem>
          <listitem>
            <para>
              GSA75
            </para>
          </listitem>
          <listitem>
            <para>
              GUID
            </para>
          </listitem>
          <listitem>
            <para>
              CHUID
            </para>
          </listitem>
          <listitem>
            <para>
              USER_PASSWORD
            </para>
          </listitem>
          <listitem>
            <para>
              SIMPLE_NUMBER16
            </para>
          </listitem>
          <listitem>
            <para>
              SIMPLE_NUMBER32
            </para>
          </listitem>
          <listitem>
            <para>
              SIMPLE_NUMBER56
            </para>
          </listitem>
          <listitem>
            <para>
              SIMPLE_ALPHA_NUMERIC
            </para>
          </listitem>
          <listitem>
            <para>
              ABA_TRACK2

            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.15-->
    <section xml:id="Annex_HelperGetCredentialIdentifierTypeAndValue"
             xreflabel="Annex A.15">
      <title>Get Credential Identifier type and value</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetCredentialIdentifierTypeAndValue
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get one Credential identifier Type Name with one corresponding FormatType and corresponding Value.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> List of supported Identifies types (<emphasis role="italic">identifierTypeList</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Credential identifier Type Name (<emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (<emphasis role="italic">formatType</emphasis>) and Credential identifier value (<emphasis role="italic">value</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              For each IdentifierType (<emphasis role="italic">typeName</emphasis>) contained in <emphasis role="italic">identifierTypeList</emphasis> repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetSupportedFormatTypes</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CredentialIdentifierTypeName := <emphasis role="italic">typeName</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          FormatTypeInfo list =: <emphasis role="italic">formatTypeInfoList</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If <emphasis role="italic">formatTypeInfoList</emphasis> is empty, FAIL the test and skip other steps.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    For each FormatType (<emphasis role="italic">formatType</emphasis>) from <emphasis role="italic">formatTypeInfoList</emphasis> repeat the following steps:
                    <orderedlist numeration="arabic"
                                 inheritnum="inherit">
                      <?dbfo label-width="3.5em"?>
                      <listitem>
                        <para>
                          If <emphasis role="italic">formatType</emphasis> is listed in <xref linkend="Annex_HelperSupportedCredentialIdentifierFormatTypes"/> go to step <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue.2"/>.
                        </para>
                      </listitem>
                    </orderedlist>
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperGetCredentialIdentifierTypeAndValue.2">
            <para>
              ONVIF Client generate appropriate value (<emphasis role="italic">value</emphasis>) for <emphasis role="italic">formatType</emphasis> and skip other steps.
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperGetCredentialIdentifierTypeAndValue.3">
            <para>
              ONVIF Client gets values from the Management tab for <emphasis role="italic">typeName</emphasis>, <emphasis role="italic">formatType</emphasis> and <emphasis role="italic">value</emphasis>.

            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> If values for <emphasis role="italic">typeName</emphasis>, <emphasis role="italic">formatType</emphasis> or <emphasis role="italic">value</emphasis> were empty on the Management tab at step <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue.3"/>, FAIL the test.
      </para>
    </section>
    <!--A.16-->
    <section xml:id="Annex_HelperGetCredentialIdentifierName"
             xreflabel="Annex A.16">
      <title>Get Credential Identifier type name list with at least two Format Type</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetCredentialIdentifierName
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get list of Credential identifier Type Name items which support at least two Format Types.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis>
        <emphasis role="italic">CredentialIdentifierTypeNameList</emphasis>

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              For each SupportedIdentifierType (<emphasis role="italic">typeName</emphasis>) contained in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetSupportedFormatTypes</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CredentialIdentifierTypeName := <emphasis role="italic">typeName</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          FormatTypeInfo list =: <emphasis role="italic">formatTypeInfoList</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If <emphasis role="italic">formatTypeInfoList</emphasis> is empty, FAIL the test and skip other steps.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If <emphasis role="italic">formatTypeInfoList</emphasis> contains at least two FormatType items do the following:
                    <orderedlist numeration="arabic"
                                 inheritnum="inherit">
                      <?dbfo label-width="3.5em"?>
                      <listitem>
                        <para>
                          <emphasis role="italic">CredentialIdentifierTypeNameList</emphasis> := <emphasis role="italic">CredentialIdentifierTypeNameList</emphasis> + <emphasis role="italic">typeName</emphasis>
                        </para>
                      </listitem>
                    </orderedlist>
                  </para>
                </listitem>
              </orderedlist>

            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.17-->
    <section xml:id="Annex_HelperGetCredentialIdentifierTypeAndValue2"
             xreflabel="Annex A.17">
      <title>Get Credential Identifier type and value for Type Name with at least two Format Type</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetCredentialIdentifierTypeAndValue2
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get one Credential identifier Type Name with two corresponding FormatType and corresponding Values.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> <emphasis role="italic">CredentialIdentifierTypeNameList</emphasis>.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Credential identifier Type Name (<emphasis role="italic">typeName</emphasis>) with corresponding Credential identifier Format Type (<emphasis role="italic">formatType1</emphasis>) and Credential identifier value (<emphasis role="italic">value1</emphasis>), and with corresponding Credential identifier Format Type (<emphasis role="italic">formatType2</emphasis>) and Credential identifier value (<emphasis role="italic">value2</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              For each IdentifierTypeName (<emphasis role="italic">typeName</emphasis>) contained in <emphasis role="italic">CredentialIdentifierTypeNameList</emphasis> repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetSupportedFormatTypes</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CredentialIdentifierTypeName := <emphasis role="italic">typeName</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          FormatTypeInfo list =: <emphasis role="italic">formatTypeInfoList</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If <emphasis role="italic">formatTypeInfoList</emphasis> is empty, FAIL the test and skip other steps.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If at least two FormatTypes (<emphasis role="italic">formatType1</emphasis>, <emphasis role="italic">formatType2</emphasis>) from <emphasis role="italic">formatTypeInfoList</emphasis> are listed in <xref linkend="Annex_HelperSupportedCredentialIdentifierFormatTypes"/> go to step <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue2.2"/>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperGetCredentialIdentifierTypeAndValue2.2">
            <para>
              ONVIF Client generates an appropriate value (<emphasis role="italic">value1</emphasis>) for <emphasis role="italic">formatType1</emphasis> and appropriate value (<emphasis role="italic">value2</emphasis>) for <emphasis role="italic">formatType2</emphasis> and skip other steps.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client gets <emphasis role="italic">typeName</emphasis> with at least two Format Type items from the Management tab.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client gets appropriate values (<emphasis role="italic">formatType1</emphasis>, <emphasis role="italic">value1</emphasis>) and (<emphasis role="italic">formatType2</emphasis>, <emphasis role="italic">value2</emphasis>) from the Management tab for <emphasis role="italic">typeName</emphasis>.

            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> If there was no <emphasis role="italic">typeName</emphasis> with at least two Format Type items and corresponding values for FormatType on the Management tab, FAIL the test.
      </para>
    </section>
    <!--A.18-->
    <section xml:id="Annex_HelperCreateCredential2"
             xreflabel="Annex A.18">
      <title>Create credential with two Credential identifier items</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateCredential2
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create credential with two Credential identifier items.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Credential Service capabilities (<emphasis role="italic">cap</emphasis>) (optional input parameter, could be skipped), Antipassback Violation State (<emphasis role="italic">AntipassbackViolated</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Credential Token (<emphasis role="italic">credentialToken</emphasis>), the first Credential identifier Type Name (<emphasis role="italic">typeName1</emphasis>) with corresponding Credential identifier Format Type (<emphasis role="italic">formatType1</emphasis>) and corresponding Credential identifier value (<emphasis role="italic">value1</emphasis>), the second Credential identifier Type Name (<emphasis role="italic">typeName2</emphasis>) with corresponding Credential identifier Format Type (<emphasis role="italic">formatType2</emphasis>) and corresponding Credential identifier value (<emphasis role="italic">value2</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              If <emphasis role="italic">cap</emphasis> is skipped, ONVIF Client gets the service capabilities (out <emphasis role="italic">cap</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client retrieves (in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType) a supported Credential identifier type name (out <emphasis role="italic">typeName1</emphasis>) with Credential identifier Format Type (out <emphasis role="italic">formatType1</emphasis>) and with credential identifier value (out <emphasis role="italic">value1</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              Set the following:
              <itemizedlist>
                <listitem>
                  <para>
                    <emphasis role="italic">identifierTypeList</emphasis> := <emphasis role="italic">cap</emphasis>.SupportedIdentifierType - <emphasis role="italic">typeName1</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client retrieves (in <emphasis role="italic">identifierTypeList</emphasis>) other supported Credential identifier type name (out <emphasis role="italic">typeName2</emphasis>) with Credential identifier Format Type (out <emphasis role="italic">formatType2</emphasis>) and with credential identifier value (out <emphasis role="italic">value2</emphasis>) by following the procedure mentioned in <xref linkend="Annex_HelperGetCredentialIdentifierTypeAndValue"/>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">CreateCredential</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Credential.token := ""
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.Description := "Test Description"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialHolderReference := "TestUser"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.ValidFrom skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.ValidTo skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[0].Type.Name := <emphasis role="italic">typeName1</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[0].Type.FormatType := <emphasis role="italic">formatType1</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[0].ExemptedFromAuthentication := false
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[0].Value := <emphasis role="italic">value1</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[1].Type.Name := <emphasis role="italic">typeName2</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[1].Type.FormatType := <emphasis role="italic">formatType2</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[1].ExemptedFromAuthentication := false
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialIdentifier[1].Value := <emphasis role="italic">value2</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.CredentialAccessProfile skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Credential.Extension skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    State.Enabled := true
                  </para>
                </listitem>
                <listitem>
                  <para>
                    State.Reason := "Test Reason"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    State.AntipassbackState.AntipassbackViolated := <emphasis role="italic">AntipassbackViolated</emphasis> if <emphasis role="italic">cap</emphasis>.ResetAntipassbackSupported value is equal to true, otherwise State.AntipassbackState is skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateCredentialResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token =: <emphasis role="italic">credentialToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">CreateCredentialResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.19-->
    <section xml:id="Annex_HelperCreateAccessProfile"
             xreflabel="Annex A.19">
      <title>Create access profile</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreateAccessProfile
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to Create access profile.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Access Rules Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Access Profile Token (<emphasis role="italic">accessProfileToken</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreateAccessProfile</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    AccessProfile.token := ""
                  </para>
                </listitem>
                <listitem>
                  <para>
                    AccessProfile.Name := "Test Access Profile"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    AccessProfile.Description := "Test Description"
                  </para>
                </listitem>
                <listitem>
                  <para>
                    AccessProfile.AccessPolicy skipped
                  </para>
                </listitem>
                <listitem>
                  <para>
                    AccessProfile.Extension skipped
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreateAccessProfileResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token =: <emphasis role="italic">accessProfileToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">CreateAccessProfileResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.20-->
    <section xml:id="Annex_HelperDeleteAccessProfile"
             xreflabel="Annex A.20">
      <title>Delete access profile</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteAccessProfile
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete access profile.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Access Rules Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Access Profile Token (<emphasis role="italic">accessProfileToken</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">DeleteAccessProfile</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Token =: <emphasis role="italic">accessProfileToken</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT sends the <emphasis role="bold">DeleteAccessProfileResponse</emphasis> message.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">DeleteAccessProfileResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.21-->
    <section xml:id="Annex_HelperCreatePullPointSubscription"
             xreflabel="Annex A.21">
      <title>Create Pull Point Subscription</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperCreatePullPointSubscription
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to create PullPoint Subscription with specified Topic.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Event Service is received from the DUT. Device supports Pull-Point Notification feature.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Notification Topic (<emphasis role="italic">topic</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> Subscription reference (<emphasis role="italic">s</emphasis>), current time for the DUT (<emphasis role="italic">ct</emphasis>), subscription termination time (<emphasis role="italic">tt</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client invokes <emphasis role="bold">CreatePullPointSubscription</emphasis> request with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Filter.TopicExpression := <emphasis role="italic">topic</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Filter.TopicExpression.@Dialect := "http://www.onvif.org/ver10/tev/topicExpression/ConcreteSet"
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    SubscriptionReference =: <emphasis role="italic">s</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    CurrentTime =: <emphasis role="italic">ct</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    TerminationTime =: <emphasis role="italic">tt</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">CreatePullPointSubscriptionResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.22-->
    <section xml:id="Annex_HelperDeleteSubscription"
             xreflabel="Annex A.22">
      <title>Delete Subscription</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperDeleteSubscription
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to delete supscribtion.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Event Service is received from the DUT. Device supports Pull-Point Notification feature.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Subscription reference (<emphasis role="italic">s</emphasis>)
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client sends an <emphasis role="bold">Unsubscribe</emphasis> to the subscription endpoint s.
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">UnsubscribeResponse</emphasis> message.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">UnsubscribeResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.23-->
    <section xml:id="Annex_HelperPullCredentialChanged"
             xreflabel="Annex A.23">
      <title>Retrieve Credential Changed Event by PullPoint</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperPullCredentialChanged
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to retrieve and check tns1:Configuration/Credential/Changed event with PullMessages.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Event Service is received from the DUT. Device supports Pull-Point Notification feature.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Subscription reference (<emphasis role="italic">s</emphasis>), current time for the DUT (<emphasis role="italic">ct</emphasis>),
        Subscription termination time (<emphasis role="italic">tt</emphasis>) and Credential token (<emphasis role="italic">credentialToken</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem xml:id="Annex_HelperPullCredentialChanged.1">
            <para>
              Until <emphasis role="italic">operationDelay</emphasis> timeout expires, repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF Client waits for time <emphasis role="italic">t</emphasis> := min{(<emphasis role="italic">tt</emphasis>-<emphasis role="italic">ct</emphasis>)/2, 1 second}.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    ONVIF Client invokes <emphasis role="bold">PullMessages</emphasis> to the subscription endpoint <emphasis role="italic">s</emphasis> request with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Timeout := PT60S
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          MessageLimit := 1
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">PullMessagesResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CurrentTime =: <emphasis role="italic">ct</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          TerminationTime =: <emphasis role="italic">tt</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          NotificationMessage list =: <emphasis role="italic">notificationMessageList</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If <emphasis role="italic">notificationMessageList</emphasis> is not empty and the CredentialToken source simple item in <emphasis role="italic">notificationMessageList</emphasis> is equal
                    to <emphasis role="italic">credentialToken</emphasis>, skip other steps and finish the procedure.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">operationDelay</emphasis> timeout expires for step <xref linkend="Annex_HelperPullCredentialChanged.1"/> without
              Notification with Token source simple item equal to <emphasis role="italic">credentialToken</emphasis>, FAIL the test, restore the DUT state, and skip other steps.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT did not send <emphasis role="bold">PullMessagesResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> <emphasis role="italic">operationDelay</emphasis> will be taken from Operation Delay field of ONVIF Device Test Tool.
      </para>
    </section>
    <!--A.24-->
    <section xml:id="Annex_HelperAddCredentialIdentifiersToWhitelist"
             xreflabel="Annex A.24">
      <title>Add Number of Credential Identifiers to Whitelist</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperAddCredentialIdentifiersToWhitelist
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to add number of credential identifiers required for test cases to whitelist.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT. Whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> List of added credential identifiers (<emphasis role="italic">credentialIdentifiersList</emphasis>). The service capabilities (<emphasis role="italic">cap</emphasis>). The complete whitelist (<emphasis role="italic">completeWhitelist</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client retrieves a complete whitelist by following the procedure mentioned in <xref linkend="Annex_HelperGetWhitelist"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    out <emphasis role="italic">initialWhiteList</emphasis> - complete whitelist
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">completeWhitelist</emphasis> := <emphasis role="italic">initialWhiteList</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">requiredNumberOfItems</emphasis> := min {50; <emphasis role="italic">cap</emphasis>.MaxLimit; <emphasis role="italic">cap</emphasis>.MaxWhitelistedItems}.
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">requiredNumberOfItems</emphasis> &lt;= number Identifier items in <emphasis role="italic">initialWhiteList</emphasis>, skip other steps of the procedure.
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">numberOfIdentefiersToBeAdded</emphasis> := <emphasis role="italic">requiredNumberOfItems</emphasis> - number of Identifier items in <emphasis role="italic">initialWhiteList</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client generates list of credential identifiers by following the procedure mentioned in <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    in <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                  </para>
                </listitem>
                <listitem>
                  <para>
                    in <emphasis role="italic">initialWhiteList</emphasis> - initial list of credential identifiers (to prevent creation of duplications)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    in <emphasis role="italic">numberOfIdentefiersToBeAdded</emphasis> - requiered number of credential identifiers
                  </para>
                </listitem>
                <listitem>
                  <para>
                    out <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers list
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperAddCredentialIdentifiersToWhitelist.AddToList">
            <para>
              ONVIF client invokes <emphasis role="bold">AddToWhitelist</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">AddToWhitelistResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">completeWhitelist</emphasis> := <emphasis role="italic">completeWhitelist</emphasis> + <emphasis role="italic">credentialIdentifiersList</emphasis>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT passed all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">AddToWhitelistResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.25-->
    <section xml:id="Annex_HelperGetWhitelist"
             xreflabel="Annex A.25">
      <title>Get Whitelist</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetWhitelist
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get complete whitelist.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT. Whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The complete whitelist (<emphasis role="italic">completeWhitelist</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Limit is skipped
                  </para>
                </listitem>
                <listitem>
                  <para>StartReference is skipped</para>
                </listitem>
                <listitem>
                  <para>IdentifierType is skipped</para>
                </listitem>
                <listitem>
                  <para>FormatType is skipped</para>
                </listitem>
                <listitem>
                  <para>Value is skipped</para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Identifier list =: <emphasis role="italic">completeWhitelist</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetWhitelist</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Limit is skipped
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          StartReference := <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>IdentifierType is skipped</para>
                      </listitem>
                      <listitem>
                        <para>FormatType is skipped</para>
                      </listitem>
                      <listitem>
                        <para>Value is skipped</para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetWhitelistResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set <emphasis role="italic">completeWhitelist</emphasis> := <emphasis role="italic">completeWhitelist</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetWhitelistResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.26-->
    <section xml:id="Annex_HelperAddToBlacklist"
             xreflabel="Annex A.26">
      <title>Add Identifiers to Blacklist</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperAddToBlacklist
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to add identifier to blacklist.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT. Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability. The DUT shall have enough free storage capacity for two additional item in blacklist.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Identifier list to be added (<emphasis role="italic">identifierList</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">AddToBlacklist</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Identifier list := <emphasis role="italic">identifierList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">AddToBlacklistResponse</emphasis> message.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">AddToBlacklistResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.27-->
    <section xml:id="Annex_HelperGetBlacklist"
             xreflabel="Annex A.27">
      <title>Get Blacklist</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGetBlacklist
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to get complete blacklist.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT. Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> The complete blacklist (<emphasis role="italic">completeBlacklist</emphasis>).

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Limit is skipped
                  </para>
                </listitem>
                <listitem>
                  <para>StartReference is skipped</para>
                </listitem>
                <listitem>
                  <para>IdentifierType is skipped</para>
                </listitem>
                <listitem>
                  <para>FormatType is skipped</para>
                </listitem>
                <listitem>
                  <para>Value is skipped</para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Identifier list =: <emphasis role="italic">completeBlacklist</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Until <emphasis role="italic">nextStartReference</emphasis> is not null, repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetBlacklist</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          Limit is skipped
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          StartReference := <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>IdentifierType is skipped</para>
                      </listitem>
                      <listitem>
                        <para>FormatType is skipped</para>
                      </listitem>
                      <listitem>
                        <para>Value is skipped</para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetBlacklistResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          NextStartReference =: <emphasis role="italic">nextStartReference</emphasis>
                        </para>
                      </listitem>
                      <listitem>
                        <para>
                          Identifier list =: <emphasis role="italic">identifierPart</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Set <emphasis role="italic">completeBlacklist</emphasis> := <emphasis role="italic">completeBlacklist</emphasis> + <emphasis role="italic">identifierPart</emphasis>.
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">GetBlacklistResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.28-->
    <section xml:id="Annex_HelperAddToWhitelist"
             xreflabel="Annex A.28">
      <title>Add Identifiers to Whitelist</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperAddToWhitelist
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to add identifier to whitelist.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT. Whitelist is supported by the DUT as indicated by MaxWhitelistedItems greater than zero capability. The DUT shall have enough free storage capacity for two additional item in whitelist.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Identifier list to be added (<emphasis role="italic">identifierList</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> None.

      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF client invokes <emphasis role="bold">AddToWhitelist</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Identifier list := <emphasis role="italic">identifierList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">AddToWhitelistResponse</emphasis> message.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              DUT passes all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">AddToWhitelistResponse</emphasis> message
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.29-->
    <section xml:id="Annex_HelperAddCredentialIdentifiersToBlacklist"
             xreflabel="Annex A.29">
      <title>Add Number of Credential Identifiers to Blacklist</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperAddCredentialIdentifiersToBlacklist
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to add number of credential identifiers required for test cases to blacklist.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT. Blacklist is supported by the DUT as indicated by MaxBlacklistedItems greater than zero capability.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> None.
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> List of added credential identifiers (<emphasis role="italic">credentialIdentifiersList</emphasis>). The service capabilities (<emphasis role="italic">cap</emphasis>). The complete blacklist (<emphasis role="italic">completeBlacklist</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              ONVIF Client retrieves a complete blacklist by following the procedure mentioned in <xref linkend="Annex_HelperGetBlacklist"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    out <emphasis role="italic">initialBlackList</emphasis> - complete blacklist
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">completeBlacklist</emphasis> := <emphasis role="italic">initialBlackList</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client gets the service capabilities by following the procedure mentioned in <xref linkend="Annex_HelperGetServiceCapabilities"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    out <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">requiredNumberOfItems</emphasis> := min {50; <emphasis role="italic">cap</emphasis>.MaxLimit; <emphasis role="italic">cap</emphasis>.MaxBlacklistedItems}.
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">requiredNumberOfItems</emphasis> &lt;= number Identifier items in <emphasis role="italic">initialBlackList</emphasis>, skip other steps of the procedure.
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">numberOfIdentefiersToBeAdded</emphasis> := <emphasis role="italic">requiredNumberOfItems</emphasis> - number of Identifier items in <emphasis role="italic">initialBlackList</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              ONVIF Client generates list of credential identifiers by following the procedure mentioned in <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers"/> with the following input and output parameters
              <itemizedlist>
                <listitem>
                  <para>
                    in <emphasis role="italic">cap</emphasis> - Credential Service capabilities
                  </para>
                </listitem>
                <listitem>
                  <para>
                    in <emphasis role="italic">initialBlackList</emphasis> - initial list of credential identifiers (to prevent creation of duplications)
                  </para>
                </listitem>
                <listitem>
                  <para>
                    in <emphasis role="italic">numberOfIdentefiersToBeAdded</emphasis> - requiered number of credential identifiers
                  </para>
                </listitem>
                <listitem>
                  <para>
                    out <emphasis role="italic">credentialIdentifiersList</emphasis> - credential identifiers list
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperAddCredentialIdentifiersToBlacklist.AddToList">
            <para>
              ONVIF client invokes <emphasis role="bold">AddToBlacklist</emphasis> with parameters
              <itemizedlist>
                <listitem>
                  <para>
                    Identifier list := <emphasis role="italic">credentialIdentifiersList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              The DUT responds with <emphasis role="bold">AddToBlacklistResponse</emphasis> message.
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">completeBlacklist</emphasis> := <emphasis role="italic">completeBlacklist</emphasis> + <emphasis role="italic">credentialIdentifiersList</emphasis>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT passed all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT did not send <emphasis role="bold">AddToBlacklistResponse</emphasis> message.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
    <!--A.30-->
    <section xml:id="Annex_HelperGenerateNumberOfCredentialIdentifiers"
             xreflabel="Annex A.30">
      <title>Generate Number of Credential Identifiers</title>
      <para>
        <emphasis role="bold">Name:</emphasis> HelperGenerateNumberOfCredentialIdentifiers
      </para>
      <para>
        <emphasis role="bold">Procedure Purpose:</emphasis> Helper procedure to generate number of credential identifiers.
      </para>
      <para>
        <emphasis role="bold">Pre-requisite:</emphasis> Credential Service is received from the DUT.
      </para>
      <para>
        <emphasis role="bold">Input:</emphasis> Initial list of credential identifiers (<emphasis role="italic">credentialIdentifiersInitialList</emphasis>).
        The service capabilities (<emphasis role="italic">cap</emphasis>). Requiered number of credential identifiers (<emphasis role="italic">requiredNumberOfNewItems</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Returns:</emphasis> List of credential identifiers (<emphasis role="italic">credentialIdentifiersList</emphasis>).
      </para>
      <para>
        <emphasis role="bold">Procedure:</emphasis>
      </para>
      <para>
        <orderedlist>
          <?dbfo label-width="1.5em"?>
          <listitem>
            <para>
              For each IdentifierType (<emphasis role="italic">typeName</emphasis>) contained in <emphasis role="italic">cap</emphasis>.SupportedIdentifierType repeat the following steps:
              <orderedlist numeration="arabic"
                           inheritnum="inherit">
                <?dbfo label-width="2.5em"?>
                <listitem>
                  <para>
                    ONVIF client invokes <emphasis role="bold">GetSupportedFormatTypes</emphasis> with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          CredentialIdentifierTypeName := <emphasis role="italic">typeName</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    The DUT responds with <emphasis role="bold">GetSupportedFormatTypesResponse</emphasis> message with parameters
                    <itemizedlist>
                      <listitem>
                        <para>
                          FormatTypeInfo list =: <emphasis role="italic">formatTypeInfoList</emphasis>
                        </para>
                      </listitem>
                    </itemizedlist>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    If <emphasis role="italic">formatTypeInfoList</emphasis> is empty, FAIL the test and skip other steps.
                  </para>
                </listitem>
                <listitem>
                  <para>
                    For each FormatType (<emphasis role="italic">formatType</emphasis>) from <emphasis role="italic">formatTypeInfoList</emphasis> repeat the following steps:
                    <orderedlist numeration="arabic"
                                 inheritnum="inherit">
                      <?dbfo label-width="3.5em"?>
                      <listitem>
                        <para>
                          If <emphasis role="italic">formatType</emphasis> is listed in <xref linkend="Annex_HelperSupportedCredentialIdentifierFormatTypes"/> go to step <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers.GenerateValue"/>.
                        </para>
                      </listitem>
                    </orderedlist>
                  </para>
                </listitem>
              </orderedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">identifier1</emphasis> :=
              <itemizedlist>
                <listitem>
                  <para>
                    Type.Name := type name from the Management tab for first value
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Type.FormatType := format type from the Management tab for first value
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Value := first value from management tab
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">identifier2</emphasis> :=
              <itemizedlist>
                <listitem>
                  <para>
                    Type.Name := type name from the Management tab for second value
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Type.FormatType := format type from the Management tab for second value
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Value := second value from management tab
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">credentialIdentifiersList</emphasis> := list with <emphasis role="italic">identifier1</emphasis> (if it is not listed in <emphasis role="italic">credentialIdentifiersInitialList</emphasis>) and <emphasis role="italic">identifier2</emphasis> (if it is not listed in <emphasis role="italic">credentialIdentifiersInitialList</emphasis>).
            </para>
          </listitem>
          <listitem>
            <para>
              Skip other steps of the procedure and return to the test.
            </para>
          </listitem>
          <listitem xml:id="Annex_HelperGenerateNumberOfCredentialIdentifiers.GenerateValue">
            <para>
              Set <emphasis role="italic">identifier</emphasis> :=
              <itemizedlist>
                <listitem>
                  <para>
                    Type.Name := <emphasis role="italic">typeName</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Type.FormatType := <emphasis role="italic">formatType</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>
                    Value := appropriate random value for <emphasis role="italic">formatType</emphasis> which is not contains in <emphasis role="italic">credentialIdentifiersList</emphasis>
                  </para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">credentialIdentifiersList</emphasis> := <emphasis role="italic">credentialIdentifiersList</emphasis> with added <emphasis role="italic">identifier</emphasis>.
            </para>
          </listitem>
          <listitem>
            <para>
              Set <emphasis role="italic">requiredNumberOfNewItems</emphasis> := <emphasis role="italic">requiredNumberOfNewItems</emphasis> - 1.
            </para>
          </listitem>
          <listitem>
            <para>
              If <emphasis role="italic">requiredNumberOfNewItems</emphasis> = 0, then skip other steps of the procedure and return to the test else go to step <xref linkend="Annex_HelperGenerateNumberOfCredentialIdentifiers.GenerateValue"/>.
            </para>
          </listitem>
        </orderedlist>
      </para>
      <para>
        <emphasis role="bold">Procedure Result:</emphasis>
      </para>
      <para>
        <emphasis role="bold">PASS –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              The DUT passed all assertions.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">FAIL –</emphasis>
        <itemizedlist>
          <listitem>
            <para>
              None.
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">Note:</emphasis> If values are not specified at Management tab and DUT does not support any format type listed in <xref linkend="Annex_HelperSupportedCredentialIdentifierFormatTypes"/>, fail the test.
      </para>
    </section>
  </appendix>
</book>